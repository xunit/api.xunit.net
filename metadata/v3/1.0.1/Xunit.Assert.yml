### YamlMime:ManagedReference
items:
- uid: v3.1.0.1:Xunit.Assert
  commentId: T:Xunit.Assert
  id: Assert
  parent: v3.1.0.1:Xunit
  children:
  - v3.1.0.1:Xunit.Assert.#ctor
  - v3.1.0.1:Xunit.Assert.AllAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Threading.Tasks.Task})
  - v3.1.0.1:Xunit.Assert.AllAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task})
  - v3.1.0.1:Xunit.Assert.All``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})
  - v3.1.0.1:Xunit.Assert.All``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})
  - v3.1.0.1:Xunit.Assert.CollectionAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task}[])
  - v3.1.0.1:Xunit.Assert.Collection``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0}[])
  - v3.1.0.1:Xunit.Assert.Contains(System.Memory{System.Char},System.Memory{System.Char})
  - v3.1.0.1:Xunit.Assert.Contains(System.Memory{System.Char},System.Memory{System.Char},System.StringComparison)
  - v3.1.0.1:Xunit.Assert.Contains(System.Memory{System.Char},System.ReadOnlyMemory{System.Char})
  - v3.1.0.1:Xunit.Assert.Contains(System.Memory{System.Char},System.ReadOnlyMemory{System.Char},System.StringComparison)
  - v3.1.0.1:Xunit.Assert.Contains(System.ReadOnlyMemory{System.Char},System.Memory{System.Char})
  - v3.1.0.1:Xunit.Assert.Contains(System.ReadOnlyMemory{System.Char},System.Memory{System.Char},System.StringComparison)
  - v3.1.0.1:Xunit.Assert.Contains(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char})
  - v3.1.0.1:Xunit.Assert.Contains(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char},System.StringComparison)
  - v3.1.0.1:Xunit.Assert.Contains(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})
  - v3.1.0.1:Xunit.Assert.Contains(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)
  - v3.1.0.1:Xunit.Assert.Contains(System.ReadOnlySpan{System.Char},System.Span{System.Char})
  - v3.1.0.1:Xunit.Assert.Contains(System.ReadOnlySpan{System.Char},System.Span{System.Char},System.StringComparison)
  - v3.1.0.1:Xunit.Assert.Contains(System.Span{System.Char},System.ReadOnlySpan{System.Char})
  - v3.1.0.1:Xunit.Assert.Contains(System.Span{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)
  - v3.1.0.1:Xunit.Assert.Contains(System.Span{System.Char},System.Span{System.Char})
  - v3.1.0.1:Xunit.Assert.Contains(System.Span{System.Char},System.Span{System.Char},System.StringComparison)
  - v3.1.0.1:Xunit.Assert.Contains(System.String,System.String)
  - v3.1.0.1:Xunit.Assert.Contains(System.String,System.String,System.StringComparison)
  - v3.1.0.1:Xunit.Assert.Contains``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})
  - v3.1.0.1:Xunit.Assert.Contains``1(System.Memory{``0},System.Memory{``0})
  - v3.1.0.1:Xunit.Assert.Contains``1(System.Memory{``0},System.ReadOnlyMemory{``0})
  - v3.1.0.1:Xunit.Assert.Contains``1(System.ReadOnlyMemory{``0},System.Memory{``0})
  - v3.1.0.1:Xunit.Assert.Contains``1(System.ReadOnlyMemory{``0},System.ReadOnlyMemory{``0})
  - v3.1.0.1:Xunit.Assert.Contains``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})
  - v3.1.0.1:Xunit.Assert.Contains``1(System.ReadOnlySpan{``0},System.Span{``0})
  - v3.1.0.1:Xunit.Assert.Contains``1(System.Span{``0},System.ReadOnlySpan{``0})
  - v3.1.0.1:Xunit.Assert.Contains``1(System.Span{``0},System.Span{``0})
  - v3.1.0.1:Xunit.Assert.Contains``1(``0,System.Collections.Generic.HashSet{``0})
  - v3.1.0.1:Xunit.Assert.Contains``1(``0,System.Collections.Generic.IEnumerable{``0})
  - v3.1.0.1:Xunit.Assert.Contains``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  - v3.1.0.1:Xunit.Assert.Contains``1(``0,System.Collections.Generic.ISet{``0})
  - v3.1.0.1:Xunit.Assert.Contains``1(``0,System.Collections.Generic.SortedSet{``0})
  - v3.1.0.1:Xunit.Assert.Contains``1(``0,System.Collections.Immutable.ImmutableHashSet{``0})
  - v3.1.0.1:Xunit.Assert.Contains``1(``0,System.Collections.Immutable.ImmutableSortedSet{``0})
  - v3.1.0.1:Xunit.Assert.Contains``2(``0,System.Collections.Concurrent.ConcurrentDictionary{``0,``1})
  - v3.1.0.1:Xunit.Assert.Contains``2(``0,System.Collections.Generic.Dictionary{``0,``1})
  - v3.1.0.1:Xunit.Assert.Contains``2(``0,System.Collections.Generic.IDictionary{``0,``1})
  - v3.1.0.1:Xunit.Assert.Contains``2(``0,System.Collections.Generic.IReadOnlyDictionary{``0,``1})
  - v3.1.0.1:Xunit.Assert.Contains``2(``0,System.Collections.Immutable.ImmutableDictionary{``0,``1})
  - v3.1.0.1:Xunit.Assert.Contains``2(``0,System.Collections.ObjectModel.ReadOnlyDictionary{``0,``1})
  - v3.1.0.1:Xunit.Assert.Distinct``1(System.Collections.Generic.IEnumerable{``0})
  - v3.1.0.1:Xunit.Assert.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  - v3.1.0.1:Xunit.Assert.DoesNotContain(System.Memory{System.Char},System.Memory{System.Char})
  - v3.1.0.1:Xunit.Assert.DoesNotContain(System.Memory{System.Char},System.Memory{System.Char},System.StringComparison)
  - v3.1.0.1:Xunit.Assert.DoesNotContain(System.Memory{System.Char},System.ReadOnlyMemory{System.Char})
  - v3.1.0.1:Xunit.Assert.DoesNotContain(System.Memory{System.Char},System.ReadOnlyMemory{System.Char},System.StringComparison)
  - v3.1.0.1:Xunit.Assert.DoesNotContain(System.ReadOnlyMemory{System.Char},System.Memory{System.Char})
  - v3.1.0.1:Xunit.Assert.DoesNotContain(System.ReadOnlyMemory{System.Char},System.Memory{System.Char},System.StringComparison)
  - v3.1.0.1:Xunit.Assert.DoesNotContain(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char})
  - v3.1.0.1:Xunit.Assert.DoesNotContain(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char},System.StringComparison)
  - v3.1.0.1:Xunit.Assert.DoesNotContain(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})
  - v3.1.0.1:Xunit.Assert.DoesNotContain(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)
  - v3.1.0.1:Xunit.Assert.DoesNotContain(System.ReadOnlySpan{System.Char},System.Span{System.Char})
  - v3.1.0.1:Xunit.Assert.DoesNotContain(System.ReadOnlySpan{System.Char},System.Span{System.Char},System.StringComparison)
  - v3.1.0.1:Xunit.Assert.DoesNotContain(System.Span{System.Char},System.ReadOnlySpan{System.Char})
  - v3.1.0.1:Xunit.Assert.DoesNotContain(System.Span{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)
  - v3.1.0.1:Xunit.Assert.DoesNotContain(System.Span{System.Char},System.Span{System.Char})
  - v3.1.0.1:Xunit.Assert.DoesNotContain(System.Span{System.Char},System.Span{System.Char},System.StringComparison)
  - v3.1.0.1:Xunit.Assert.DoesNotContain(System.String,System.String)
  - v3.1.0.1:Xunit.Assert.DoesNotContain(System.String,System.String,System.StringComparison)
  - v3.1.0.1:Xunit.Assert.DoesNotContain``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})
  - v3.1.0.1:Xunit.Assert.DoesNotContain``1(System.Memory{``0},System.Memory{``0})
  - v3.1.0.1:Xunit.Assert.DoesNotContain``1(System.Memory{``0},System.ReadOnlyMemory{``0})
  - v3.1.0.1:Xunit.Assert.DoesNotContain``1(System.ReadOnlyMemory{``0},System.Memory{``0})
  - v3.1.0.1:Xunit.Assert.DoesNotContain``1(System.ReadOnlyMemory{``0},System.ReadOnlyMemory{``0})
  - v3.1.0.1:Xunit.Assert.DoesNotContain``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})
  - v3.1.0.1:Xunit.Assert.DoesNotContain``1(System.ReadOnlySpan{``0},System.Span{``0})
  - v3.1.0.1:Xunit.Assert.DoesNotContain``1(System.Span{``0},System.ReadOnlySpan{``0})
  - v3.1.0.1:Xunit.Assert.DoesNotContain``1(System.Span{``0},System.Span{``0})
  - v3.1.0.1:Xunit.Assert.DoesNotContain``1(``0,System.Collections.Generic.HashSet{``0})
  - v3.1.0.1:Xunit.Assert.DoesNotContain``1(``0,System.Collections.Generic.IEnumerable{``0})
  - v3.1.0.1:Xunit.Assert.DoesNotContain``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  - v3.1.0.1:Xunit.Assert.DoesNotContain``1(``0,System.Collections.Generic.ISet{``0})
  - v3.1.0.1:Xunit.Assert.DoesNotContain``1(``0,System.Collections.Generic.SortedSet{``0})
  - v3.1.0.1:Xunit.Assert.DoesNotContain``1(``0,System.Collections.Immutable.ImmutableHashSet{``0})
  - v3.1.0.1:Xunit.Assert.DoesNotContain``1(``0,System.Collections.Immutable.ImmutableSortedSet{``0})
  - v3.1.0.1:Xunit.Assert.DoesNotContain``2(``0,System.Collections.Concurrent.ConcurrentDictionary{``0,``1})
  - v3.1.0.1:Xunit.Assert.DoesNotContain``2(``0,System.Collections.Generic.Dictionary{``0,``1})
  - v3.1.0.1:Xunit.Assert.DoesNotContain``2(``0,System.Collections.Generic.IDictionary{``0,``1})
  - v3.1.0.1:Xunit.Assert.DoesNotContain``2(``0,System.Collections.Generic.IReadOnlyDictionary{``0,``1})
  - v3.1.0.1:Xunit.Assert.DoesNotContain``2(``0,System.Collections.Immutable.ImmutableDictionary{``0,``1})
  - v3.1.0.1:Xunit.Assert.DoesNotContain``2(``0,System.Collections.ObjectModel.ReadOnlyDictionary{``0,``1})
  - v3.1.0.1:Xunit.Assert.DoesNotMatch(System.String,System.String)
  - v3.1.0.1:Xunit.Assert.DoesNotMatch(System.Text.RegularExpressions.Regex,System.String)
  - v3.1.0.1:Xunit.Assert.Empty(System.Collections.IEnumerable)
  - v3.1.0.1:Xunit.Assert.Empty(System.String)
  - v3.1.0.1:Xunit.Assert.EndsWith(System.Memory{System.Char},System.Memory{System.Char})
  - v3.1.0.1:Xunit.Assert.EndsWith(System.Memory{System.Char},System.Memory{System.Char},System.StringComparison)
  - v3.1.0.1:Xunit.Assert.EndsWith(System.Memory{System.Char},System.ReadOnlyMemory{System.Char})
  - v3.1.0.1:Xunit.Assert.EndsWith(System.Memory{System.Char},System.ReadOnlyMemory{System.Char},System.StringComparison)
  - v3.1.0.1:Xunit.Assert.EndsWith(System.ReadOnlyMemory{System.Char},System.Memory{System.Char})
  - v3.1.0.1:Xunit.Assert.EndsWith(System.ReadOnlyMemory{System.Char},System.Memory{System.Char},System.StringComparison)
  - v3.1.0.1:Xunit.Assert.EndsWith(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char})
  - v3.1.0.1:Xunit.Assert.EndsWith(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char},System.StringComparison)
  - v3.1.0.1:Xunit.Assert.EndsWith(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})
  - v3.1.0.1:Xunit.Assert.EndsWith(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)
  - v3.1.0.1:Xunit.Assert.EndsWith(System.ReadOnlySpan{System.Char},System.Span{System.Char})
  - v3.1.0.1:Xunit.Assert.EndsWith(System.ReadOnlySpan{System.Char},System.Span{System.Char},System.StringComparison)
  - v3.1.0.1:Xunit.Assert.EndsWith(System.Span{System.Char},System.ReadOnlySpan{System.Char})
  - v3.1.0.1:Xunit.Assert.EndsWith(System.Span{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)
  - v3.1.0.1:Xunit.Assert.EndsWith(System.Span{System.Char},System.Span{System.Char})
  - v3.1.0.1:Xunit.Assert.EndsWith(System.Span{System.Char},System.Span{System.Char},System.StringComparison)
  - v3.1.0.1:Xunit.Assert.EndsWith(System.String,System.String)
  - v3.1.0.1:Xunit.Assert.EndsWith(System.String,System.String,System.StringComparison)
  - v3.1.0.1:Xunit.Assert.Equal(System.DateTime,System.DateTime)
  - v3.1.0.1:Xunit.Assert.Equal(System.DateTime,System.DateTime,System.TimeSpan)
  - v3.1.0.1:Xunit.Assert.Equal(System.DateTimeOffset,System.DateTimeOffset)
  - v3.1.0.1:Xunit.Assert.Equal(System.DateTimeOffset,System.DateTimeOffset,System.TimeSpan)
  - v3.1.0.1:Xunit.Assert.Equal(System.Decimal,System.Decimal,System.Int32)
  - v3.1.0.1:Xunit.Assert.Equal(System.Double,System.Double,System.Double)
  - v3.1.0.1:Xunit.Assert.Equal(System.Double,System.Double,System.Int32)
  - v3.1.0.1:Xunit.Assert.Equal(System.Double,System.Double,System.Int32,System.MidpointRounding)
  - v3.1.0.1:Xunit.Assert.Equal(System.Memory{System.Char},System.Memory{System.Char})
  - v3.1.0.1:Xunit.Assert.Equal(System.Memory{System.Char},System.Memory{System.Char},System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  - v3.1.0.1:Xunit.Assert.Equal(System.Memory{System.Char},System.ReadOnlyMemory{System.Char})
  - v3.1.0.1:Xunit.Assert.Equal(System.Memory{System.Char},System.ReadOnlyMemory{System.Char},System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  - v3.1.0.1:Xunit.Assert.Equal(System.ReadOnlyMemory{System.Char},System.Memory{System.Char})
  - v3.1.0.1:Xunit.Assert.Equal(System.ReadOnlyMemory{System.Char},System.Memory{System.Char},System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  - v3.1.0.1:Xunit.Assert.Equal(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char})
  - v3.1.0.1:Xunit.Assert.Equal(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char},System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  - v3.1.0.1:Xunit.Assert.Equal(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})
  - v3.1.0.1:Xunit.Assert.Equal(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  - v3.1.0.1:Xunit.Assert.Equal(System.ReadOnlySpan{System.Char},System.Span{System.Char})
  - v3.1.0.1:Xunit.Assert.Equal(System.ReadOnlySpan{System.Char},System.Span{System.Char},System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  - v3.1.0.1:Xunit.Assert.Equal(System.Single,System.Single,System.Int32)
  - v3.1.0.1:Xunit.Assert.Equal(System.Single,System.Single,System.Int32,System.MidpointRounding)
  - v3.1.0.1:Xunit.Assert.Equal(System.Single,System.Single,System.Single)
  - v3.1.0.1:Xunit.Assert.Equal(System.Span{System.Char},System.ReadOnlySpan{System.Char})
  - v3.1.0.1:Xunit.Assert.Equal(System.Span{System.Char},System.ReadOnlySpan{System.Char},System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  - v3.1.0.1:Xunit.Assert.Equal(System.Span{System.Char},System.Span{System.Char})
  - v3.1.0.1:Xunit.Assert.Equal(System.Span{System.Char},System.Span{System.Char},System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  - v3.1.0.1:Xunit.Assert.Equal(System.String,System.String)
  - v3.1.0.1:Xunit.Assert.Equal(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  - v3.1.0.1:Xunit.Assert.Equal``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  - v3.1.0.1:Xunit.Assert.Equal``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  - v3.1.0.1:Xunit.Assert.Equal``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})
  - v3.1.0.1:Xunit.Assert.Equal``1(System.Memory{``0},System.Memory{``0})
  - v3.1.0.1:Xunit.Assert.Equal``1(System.Memory{``0},System.ReadOnlyMemory{``0})
  - v3.1.0.1:Xunit.Assert.Equal``1(System.ReadOnlyMemory{``0},System.Memory{``0})
  - v3.1.0.1:Xunit.Assert.Equal``1(System.ReadOnlyMemory{``0},System.ReadOnlyMemory{``0})
  - v3.1.0.1:Xunit.Assert.Equal``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})
  - v3.1.0.1:Xunit.Assert.Equal``1(System.ReadOnlySpan{``0},System.Span{``0})
  - v3.1.0.1:Xunit.Assert.Equal``1(System.ReadOnlySpan{``0},``0[])
  - v3.1.0.1:Xunit.Assert.Equal``1(System.Span{``0},System.ReadOnlySpan{``0})
  - v3.1.0.1:Xunit.Assert.Equal``1(System.Span{``0},System.Span{``0})
  - v3.1.0.1:Xunit.Assert.Equal``1(``0,``0)
  - v3.1.0.1:Xunit.Assert.Equal``1(``0,``0,System.Collections.Generic.IEqualityComparer{``0})
  - v3.1.0.1:Xunit.Assert.Equal``1(``0,``0,System.Func{``0,``0,System.Boolean})
  - v3.1.0.1:Xunit.Assert.Equal``1(``0[],``0[])
  - v3.1.0.1:Xunit.Assert.Equivalent(System.Object,System.Object,System.Boolean)
  - v3.1.0.1:Xunit.Assert.Fail(System.String)
  - v3.1.0.1:Xunit.Assert.False(System.Boolean)
  - v3.1.0.1:Xunit.Assert.False(System.Boolean,System.String)
  - v3.1.0.1:Xunit.Assert.False(System.Nullable{System.Boolean})
  - v3.1.0.1:Xunit.Assert.False(System.Nullable{System.Boolean},System.String)
  - v3.1.0.1:Xunit.Assert.InRange``1(``0,``0,``0)
  - v3.1.0.1:Xunit.Assert.InRange``1(``0,``0,``0,System.Collections.Generic.IComparer{``0})
  - v3.1.0.1:Xunit.Assert.IsAssignableFrom(System.Type,System.Object)
  - v3.1.0.1:Xunit.Assert.IsAssignableFrom``1(System.Object)
  - v3.1.0.1:Xunit.Assert.IsNotAssignableFrom(System.Type,System.Object)
  - v3.1.0.1:Xunit.Assert.IsNotAssignableFrom``1(System.Object)
  - v3.1.0.1:Xunit.Assert.IsNotType(System.Type,System.Object)
  - v3.1.0.1:Xunit.Assert.IsNotType(System.Type,System.Object,System.Boolean)
  - v3.1.0.1:Xunit.Assert.IsNotType``1(System.Object)
  - v3.1.0.1:Xunit.Assert.IsNotType``1(System.Object,System.Boolean)
  - v3.1.0.1:Xunit.Assert.IsType(System.Type,System.Object)
  - v3.1.0.1:Xunit.Assert.IsType(System.Type,System.Object,System.Boolean)
  - v3.1.0.1:Xunit.Assert.IsType``1(System.Object)
  - v3.1.0.1:Xunit.Assert.IsType``1(System.Object,System.Boolean)
  - v3.1.0.1:Xunit.Assert.Matches(System.String,System.String)
  - v3.1.0.1:Xunit.Assert.Matches(System.Text.RegularExpressions.Regex,System.String)
  - v3.1.0.1:Xunit.Assert.Multiple(System.Action[])
  - v3.1.0.1:Xunit.Assert.NotEmpty(System.Collections.IEnumerable)
  - v3.1.0.1:Xunit.Assert.NotEqual(System.Decimal,System.Decimal,System.Int32)
  - v3.1.0.1:Xunit.Assert.NotEqual(System.Double,System.Double,System.Double)
  - v3.1.0.1:Xunit.Assert.NotEqual(System.Double,System.Double,System.Int32)
  - v3.1.0.1:Xunit.Assert.NotEqual(System.Double,System.Double,System.Int32,System.MidpointRounding)
  - v3.1.0.1:Xunit.Assert.NotEqual(System.Single,System.Single,System.Int32)
  - v3.1.0.1:Xunit.Assert.NotEqual(System.Single,System.Single,System.Int32,System.MidpointRounding)
  - v3.1.0.1:Xunit.Assert.NotEqual(System.Single,System.Single,System.Single)
  - v3.1.0.1:Xunit.Assert.NotEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  - v3.1.0.1:Xunit.Assert.NotEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  - v3.1.0.1:Xunit.Assert.NotEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})
  - v3.1.0.1:Xunit.Assert.NotEqual``1(``0,``0)
  - v3.1.0.1:Xunit.Assert.NotEqual``1(``0,``0,System.Collections.Generic.IEqualityComparer{``0})
  - v3.1.0.1:Xunit.Assert.NotEqual``1(``0,``0,System.Func{``0,``0,System.Boolean})
  - v3.1.0.1:Xunit.Assert.NotEqual``1(``0[],``0[])
  - v3.1.0.1:Xunit.Assert.NotInRange``1(``0,``0,``0)
  - v3.1.0.1:Xunit.Assert.NotInRange``1(``0,``0,``0,System.Collections.Generic.IComparer{``0})
  - v3.1.0.1:Xunit.Assert.NotNull(System.Object)
  - v3.1.0.1:Xunit.Assert.NotNull``1(System.Nullable{``0})
  - v3.1.0.1:Xunit.Assert.NotSame(System.Object,System.Object)
  - v3.1.0.1:Xunit.Assert.NotStrictEqual``1(``0,``0)
  - v3.1.0.1:Xunit.Assert.Null(System.Object)
  - v3.1.0.1:Xunit.Assert.Null``1(System.Nullable{``0})
  - v3.1.0.1:Xunit.Assert.ProperSubset``1(System.Collections.Generic.ISet{``0},System.Collections.Generic.ISet{``0})
  - v3.1.0.1:Xunit.Assert.ProperSuperset``1(System.Collections.Generic.ISet{``0},System.Collections.Generic.ISet{``0})
  - v3.1.0.1:Xunit.Assert.PropertyChanged(System.ComponentModel.INotifyPropertyChanged,System.String,System.Action)
  - v3.1.0.1:Xunit.Assert.PropertyChangedAsync(System.ComponentModel.INotifyPropertyChanged,System.String,System.Func{System.Threading.Tasks.Task})
  - v3.1.0.1:Xunit.Assert.Raises(System.Action{System.Action},System.Action{System.Action},System.Action)
  - v3.1.0.1:Xunit.Assert.RaisesAny(System.Action{System.EventHandler},System.Action{System.EventHandler},System.Action)
  - v3.1.0.1:Xunit.Assert.RaisesAnyAsync(System.Action{System.EventHandler},System.Action{System.EventHandler},System.Func{System.Threading.Tasks.Task})
  - v3.1.0.1:Xunit.Assert.RaisesAnyAsync``1(System.Action{System.Action{``0}},System.Action{System.Action{``0}},System.Func{System.Threading.Tasks.Task})
  - v3.1.0.1:Xunit.Assert.RaisesAnyAsync``1(System.Action{System.EventHandler{``0}},System.Action{System.EventHandler{``0}},System.Func{System.Threading.Tasks.Task})
  - v3.1.0.1:Xunit.Assert.RaisesAny``1(System.Action{System.Action{``0}},System.Action{System.Action{``0}},System.Action)
  - v3.1.0.1:Xunit.Assert.RaisesAny``1(System.Action{System.EventHandler{``0}},System.Action{System.EventHandler{``0}},System.Action)
  - v3.1.0.1:Xunit.Assert.RaisesAsync(System.Action{System.Action},System.Action{System.Action},System.Func{System.Threading.Tasks.Task})
  - v3.1.0.1:Xunit.Assert.RaisesAsync``1(System.Action{System.Action{``0}},System.Action{System.Action{``0}},System.Func{System.Threading.Tasks.Task})
  - v3.1.0.1:Xunit.Assert.RaisesAsync``1(System.Action{System.EventHandler{``0}},System.Action{System.EventHandler{``0}},System.Func{System.Threading.Tasks.Task})
  - v3.1.0.1:Xunit.Assert.Raises``1(System.Action{System.Action{``0}},System.Action{System.Action{``0}},System.Action)
  - v3.1.0.1:Xunit.Assert.Raises``1(System.Action{System.EventHandler{``0}},System.Action{System.EventHandler{``0}},System.Action)
  - v3.1.0.1:Xunit.Assert.Raises``1(System.Func{Xunit.Assert.RaisedEvent{``0}},System.Action,System.Action,System.Action)
  - v3.1.0.1:Xunit.Assert.RecordException(System.Action)
  - v3.1.0.1:Xunit.Assert.RecordException(System.Func{System.Object},System.String)
  - v3.1.0.1:Xunit.Assert.RecordExceptionAsync(System.Func{System.Threading.Tasks.Task})
  - v3.1.0.1:Xunit.Assert.Same(System.Object,System.Object)
  - v3.1.0.1:Xunit.Assert.Single(System.Collections.IEnumerable)
  - v3.1.0.1:Xunit.Assert.Single(System.Collections.IEnumerable,System.Object)
  - v3.1.0.1:Xunit.Assert.Single``1(System.Collections.Generic.IEnumerable{``0})
  - v3.1.0.1:Xunit.Assert.Single``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})
  - v3.1.0.1:Xunit.Assert.Skip(System.String)
  - v3.1.0.1:Xunit.Assert.SkipUnless(System.Boolean,System.String)
  - v3.1.0.1:Xunit.Assert.SkipWhen(System.Boolean,System.String)
  - v3.1.0.1:Xunit.Assert.StartsWith(System.Memory{System.Char},System.Memory{System.Char})
  - v3.1.0.1:Xunit.Assert.StartsWith(System.Memory{System.Char},System.Memory{System.Char},System.StringComparison)
  - v3.1.0.1:Xunit.Assert.StartsWith(System.Memory{System.Char},System.ReadOnlyMemory{System.Char})
  - v3.1.0.1:Xunit.Assert.StartsWith(System.Memory{System.Char},System.ReadOnlyMemory{System.Char},System.StringComparison)
  - v3.1.0.1:Xunit.Assert.StartsWith(System.ReadOnlyMemory{System.Char},System.Memory{System.Char})
  - v3.1.0.1:Xunit.Assert.StartsWith(System.ReadOnlyMemory{System.Char},System.Memory{System.Char},System.StringComparison)
  - v3.1.0.1:Xunit.Assert.StartsWith(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char})
  - v3.1.0.1:Xunit.Assert.StartsWith(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char},System.StringComparison)
  - v3.1.0.1:Xunit.Assert.StartsWith(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})
  - v3.1.0.1:Xunit.Assert.StartsWith(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)
  - v3.1.0.1:Xunit.Assert.StartsWith(System.ReadOnlySpan{System.Char},System.Span{System.Char})
  - v3.1.0.1:Xunit.Assert.StartsWith(System.ReadOnlySpan{System.Char},System.Span{System.Char},System.StringComparison)
  - v3.1.0.1:Xunit.Assert.StartsWith(System.Span{System.Char},System.ReadOnlySpan{System.Char})
  - v3.1.0.1:Xunit.Assert.StartsWith(System.Span{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)
  - v3.1.0.1:Xunit.Assert.StartsWith(System.Span{System.Char},System.Span{System.Char})
  - v3.1.0.1:Xunit.Assert.StartsWith(System.Span{System.Char},System.Span{System.Char},System.StringComparison)
  - v3.1.0.1:Xunit.Assert.StartsWith(System.String,System.String)
  - v3.1.0.1:Xunit.Assert.StartsWith(System.String,System.String,System.StringComparison)
  - v3.1.0.1:Xunit.Assert.StrictEqual``1(``0,``0)
  - v3.1.0.1:Xunit.Assert.Subset``1(System.Collections.Generic.ISet{``0},System.Collections.Generic.ISet{``0})
  - v3.1.0.1:Xunit.Assert.Superset``1(System.Collections.Generic.ISet{``0},System.Collections.Generic.ISet{``0})
  - v3.1.0.1:Xunit.Assert.Throws(System.Type,System.Action)
  - v3.1.0.1:Xunit.Assert.Throws(System.Type,System.Func{System.Object})
  - v3.1.0.1:Xunit.Assert.ThrowsAnyAsync``1(System.Func{System.Threading.Tasks.Task})
  - v3.1.0.1:Xunit.Assert.ThrowsAny``1(System.Action)
  - v3.1.0.1:Xunit.Assert.ThrowsAny``1(System.Func{System.Object})
  - v3.1.0.1:Xunit.Assert.ThrowsAsync(System.Type,System.Func{System.Threading.Tasks.Task})
  - v3.1.0.1:Xunit.Assert.ThrowsAsync``1(System.Func{System.Threading.Tasks.Task})
  - v3.1.0.1:Xunit.Assert.ThrowsAsync``1(System.String,System.Func{System.Threading.Tasks.Task})
  - v3.1.0.1:Xunit.Assert.Throws``1(System.Action)
  - v3.1.0.1:Xunit.Assert.Throws``1(System.Func{System.Object})
  - v3.1.0.1:Xunit.Assert.Throws``1(System.String,System.Action)
  - v3.1.0.1:Xunit.Assert.Throws``1(System.String,System.Func{System.Object})
  - v3.1.0.1:Xunit.Assert.True(System.Boolean)
  - v3.1.0.1:Xunit.Assert.True(System.Boolean,System.String)
  - v3.1.0.1:Xunit.Assert.True(System.Nullable{System.Boolean})
  - v3.1.0.1:Xunit.Assert.True(System.Nullable{System.Boolean},System.String)
  langs:
  - csharp
  - vb
  name: Assert
  nameWithType: Assert
  fullName: Xunit.Assert
  type: Class
  source:
    id: Assert
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\TypeAsserts.cs
    startLine: 27
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: >-
    Contains various static methods that are used to verify that conditions are met during the

    process of running tests.
  example: []
  syntax:
    content: public class Assert
    content.vb: Public Class Assert
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: v3.1.0.1:Xunit.Assert.#ctor
  commentId: M:Xunit.Assert.#ctor
  id: '#ctor'
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Assert()
  nameWithType: Assert.Assert()
  fullName: Xunit.Assert.Assert()
  type: Constructor
  source:
    id: .ctor
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\Assert.cs
    startLine: 31
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Initializes a new instance of the <xref href="v3.1.0.1:Xunit.Assert" data-throw-if-not-resolved="false"></xref> class.
  example: []
  syntax:
    content: protected Assert()
    content.vb: Protected Sub New()
  overload: v3.1.0.1:Xunit.Assert.#ctor*
  nameWithType.vb: Assert.New()
  fullName.vb: Xunit.Assert.New()
  name.vb: New()
- uid: v3.1.0.1:Xunit.Assert.False(System.Boolean)
  commentId: M:Xunit.Assert.False(System.Boolean)
  id: False(System.Boolean)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: False(bool)
  nameWithType: Assert.False(bool)
  fullName: Xunit.Assert.False(bool)
  type: Method
  source:
    id: "False"
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\BooleanAsserts.cs
    startLine: 31
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that the condition is false.
  example: []
  syntax:
    content: public static void False(bool condition)
    parameters:
    - id: condition
      type: System.Boolean
      description: The condition to be tested
    content.vb: Public Shared Sub [False](condition As Boolean)
  overload: v3.1.0.1:Xunit.Assert.False*
  exceptions:
  - type: Xunit.Sdk.FalseException
    commentId: T:Xunit.Sdk.FalseException
    description: Thrown if the condition is not false
  nameWithType.vb: Assert.False(Boolean)
  fullName.vb: Xunit.Assert.False(Boolean)
  name.vb: False(Boolean)
- uid: v3.1.0.1:Xunit.Assert.False(System.Nullable{System.Boolean})
  commentId: M:Xunit.Assert.False(System.Nullable{System.Boolean})
  id: False(System.Nullable{System.Boolean})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: False(bool?)
  nameWithType: Assert.False(bool?)
  fullName: Xunit.Assert.False(bool?)
  type: Method
  source:
    id: "False"
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\BooleanAsserts.cs
    startLine: 43
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that the condition is false.
  example: []
  syntax:
    content: public static void False(bool? condition)
    parameters:
    - id: condition
      type: System.Nullable{System.Boolean}
      description: The condition to be tested
    content.vb: Public Shared Sub [False](condition As Boolean?)
  overload: v3.1.0.1:Xunit.Assert.False*
  exceptions:
  - type: Xunit.Sdk.FalseException
    commentId: T:Xunit.Sdk.FalseException
    description: Thrown if the condition is not false
  nameWithType.vb: Assert.False(Boolean?)
  fullName.vb: Xunit.Assert.False(Boolean?)
  name.vb: False(Boolean?)
- uid: v3.1.0.1:Xunit.Assert.False(System.Boolean,System.String)
  commentId: M:Xunit.Assert.False(System.Boolean,System.String)
  id: False(System.Boolean,System.String)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: False(bool, string?)
  nameWithType: Assert.False(bool, string?)
  fullName: Xunit.Assert.False(bool, string?)
  type: Method
  source:
    id: "False"
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\BooleanAsserts.cs
    startLine: 55
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that the condition is false.
  example: []
  syntax:
    content: public static void False(bool condition, string? userMessage)
    parameters:
    - id: condition
      type: System.Boolean
      description: The condition to be tested
    - id: userMessage
      type: System.String
      description: The message to show when the condition is not false
    content.vb: Public Shared Sub [False](condition As Boolean, userMessage As String)
  overload: v3.1.0.1:Xunit.Assert.False*
  exceptions:
  - type: Xunit.Sdk.FalseException
    commentId: T:Xunit.Sdk.FalseException
    description: Thrown if the condition is not false
  nameWithType.vb: Assert.False(Boolean, String)
  fullName.vb: Xunit.Assert.False(Boolean, String)
  name.vb: False(Boolean, String)
- uid: v3.1.0.1:Xunit.Assert.False(System.Nullable{System.Boolean},System.String)
  commentId: M:Xunit.Assert.False(System.Nullable{System.Boolean},System.String)
  id: False(System.Nullable{System.Boolean},System.String)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: False(bool?, string?)
  nameWithType: Assert.False(bool?, string?)
  fullName: Xunit.Assert.False(bool?, string?)
  type: Method
  source:
    id: "False"
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\BooleanAsserts.cs
    startLine: 71
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that the condition is false.
  example: []
  syntax:
    content: public static void False(bool? condition, string? userMessage)
    parameters:
    - id: condition
      type: System.Nullable{System.Boolean}
      description: The condition to be tested
    - id: userMessage
      type: System.String
      description: The message to show when the condition is not false
    content.vb: Public Shared Sub [False](condition As Boolean?, userMessage As String)
  overload: v3.1.0.1:Xunit.Assert.False*
  exceptions:
  - type: Xunit.Sdk.FalseException
    commentId: T:Xunit.Sdk.FalseException
    description: Thrown if the condition is not false
  nameWithType.vb: Assert.False(Boolean?, String)
  fullName.vb: Xunit.Assert.False(Boolean?, String)
  name.vb: False(Boolean?, String)
- uid: v3.1.0.1:Xunit.Assert.True(System.Boolean)
  commentId: M:Xunit.Assert.True(System.Boolean)
  id: True(System.Boolean)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: True(bool)
  nameWithType: Assert.True(bool)
  fullName: Xunit.Assert.True(bool)
  type: Method
  source:
    id: "True"
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\BooleanAsserts.cs
    startLine: 90
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that an expression is true.
  example: []
  syntax:
    content: public static void True(bool condition)
    parameters:
    - id: condition
      type: System.Boolean
      description: The condition to be inspected
    content.vb: Public Shared Sub [True](condition As Boolean)
  overload: v3.1.0.1:Xunit.Assert.True*
  exceptions:
  - type: Xunit.Sdk.TrueException
    commentId: T:Xunit.Sdk.TrueException
    description: Thrown when the condition is false
  nameWithType.vb: Assert.True(Boolean)
  fullName.vb: Xunit.Assert.True(Boolean)
  name.vb: True(Boolean)
- uid: v3.1.0.1:Xunit.Assert.True(System.Nullable{System.Boolean})
  commentId: M:Xunit.Assert.True(System.Nullable{System.Boolean})
  id: True(System.Nullable{System.Boolean})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: True(bool?)
  nameWithType: Assert.True(bool?)
  fullName: Xunit.Assert.True(bool?)
  type: Method
  source:
    id: "True"
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\BooleanAsserts.cs
    startLine: 102
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that an expression is true.
  example: []
  syntax:
    content: public static void True(bool? condition)
    parameters:
    - id: condition
      type: System.Nullable{System.Boolean}
      description: The condition to be inspected
    content.vb: Public Shared Sub [True](condition As Boolean?)
  overload: v3.1.0.1:Xunit.Assert.True*
  exceptions:
  - type: Xunit.Sdk.TrueException
    commentId: T:Xunit.Sdk.TrueException
    description: Thrown when the condition is false
  nameWithType.vb: Assert.True(Boolean?)
  fullName.vb: Xunit.Assert.True(Boolean?)
  name.vb: True(Boolean?)
- uid: v3.1.0.1:Xunit.Assert.True(System.Boolean,System.String)
  commentId: M:Xunit.Assert.True(System.Boolean,System.String)
  id: True(System.Boolean,System.String)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: True(bool, string?)
  nameWithType: Assert.True(bool, string?)
  fullName: Xunit.Assert.True(bool, string?)
  type: Method
  source:
    id: "True"
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\BooleanAsserts.cs
    startLine: 114
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that an expression is true.
  example: []
  syntax:
    content: public static void True(bool condition, string? userMessage)
    parameters:
    - id: condition
      type: System.Boolean
      description: The condition to be inspected
    - id: userMessage
      type: System.String
      description: The message to be shown when the condition is false
    content.vb: Public Shared Sub [True](condition As Boolean, userMessage As String)
  overload: v3.1.0.1:Xunit.Assert.True*
  exceptions:
  - type: Xunit.Sdk.TrueException
    commentId: T:Xunit.Sdk.TrueException
    description: Thrown when the condition is false
  nameWithType.vb: Assert.True(Boolean, String)
  fullName.vb: Xunit.Assert.True(Boolean, String)
  name.vb: True(Boolean, String)
- uid: v3.1.0.1:Xunit.Assert.True(System.Nullable{System.Boolean},System.String)
  commentId: M:Xunit.Assert.True(System.Nullable{System.Boolean},System.String)
  id: True(System.Nullable{System.Boolean},System.String)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: True(bool?, string?)
  nameWithType: Assert.True(bool?, string?)
  fullName: Xunit.Assert.True(bool?, string?)
  type: Method
  source:
    id: "True"
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\BooleanAsserts.cs
    startLine: 130
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that an expression is true.
  example: []
  syntax:
    content: public static void True(bool? condition, string? userMessage)
    parameters:
    - id: condition
      type: System.Nullable{System.Boolean}
      description: The condition to be inspected
    - id: userMessage
      type: System.String
      description: The message to be shown when the condition is false
    content.vb: Public Shared Sub [True](condition As Boolean?, userMessage As String)
  overload: v3.1.0.1:Xunit.Assert.True*
  exceptions:
  - type: Xunit.Sdk.TrueException
    commentId: T:Xunit.Sdk.TrueException
    description: Thrown when the condition is false
  nameWithType.vb: Assert.True(Boolean?, String)
  fullName.vb: Xunit.Assert.True(Boolean?, String)
  name.vb: True(Boolean?, String)
- uid: v3.1.0.1:Xunit.Assert.All``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})
  commentId: M:Xunit.Assert.All``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})
  id: All``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: All<T>(IEnumerable<T>, Action<T>)
  nameWithType: Assert.All<T>(IEnumerable<T>, Action<T>)
  fullName: Xunit.Assert.All<T>(System.Collections.Generic.IEnumerable<T>, System.Action<T>)
  type: Method
  source:
    id: All
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\CollectionAsserts.cs
    startLine: 46
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: >-
    Verifies that all items in the collection pass when executed against

    action.
  example: []
  syntax:
    content: public static void All<T>(IEnumerable<T> collection, Action<T> action)
    parameters:
    - id: collection
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The collection
    - id: action
      type: System.Action{{T}}
      description: The action to test each item against
    typeParameters:
    - id: T
      description: The type of the object to be verified
    content.vb: Public Shared Sub All(Of T)(collection As IEnumerable(Of T), action As Action(Of T))
  overload: v3.1.0.1:Xunit.Assert.All*
  exceptions:
  - type: Xunit.Sdk.AllException
    commentId: T:Xunit.Sdk.AllException
    description: Thrown when the collection contains at least one non-matching element
  nameWithType.vb: Assert.All(Of T)(IEnumerable(Of T), Action(Of T))
  fullName.vb: Xunit.Assert.All(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Action(Of T))
  name.vb: All(Of T)(IEnumerable(Of T), Action(Of T))
- uid: v3.1.0.1:Xunit.Assert.All``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})
  commentId: M:Xunit.Assert.All``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})
  id: All``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: All<T>(IEnumerable<T>, Action<T, int>)
  nameWithType: Assert.All<T>(IEnumerable<T>, Action<T, int>)
  fullName: Xunit.Assert.All<T>(System.Collections.Generic.IEnumerable<T>, System.Action<T, int>)
  type: Method
  source:
    id: All
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\CollectionAsserts.cs
    startLine: 64
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: >-
    Verifies that all items in the collection pass when executed against

    action. The item index is provided to the action, in addition to the item.
  example: []
  syntax:
    content: public static void All<T>(IEnumerable<T> collection, Action<T, int> action)
    parameters:
    - id: collection
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The collection
    - id: action
      type: System.Action{{T},System.Int32}
      description: The action to test each item against
    typeParameters:
    - id: T
      description: The type of the object to be verified
    content.vb: Public Shared Sub All(Of T)(collection As IEnumerable(Of T), action As Action(Of T, Integer))
  overload: v3.1.0.1:Xunit.Assert.All*
  exceptions:
  - type: Xunit.Sdk.AllException
    commentId: T:Xunit.Sdk.AllException
    description: Thrown when the collection contains at least one non-matching element
  nameWithType.vb: Assert.All(Of T)(IEnumerable(Of T), Action(Of T, Integer))
  fullName.vb: Xunit.Assert.All(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Action(Of T, Integer))
  name.vb: All(Of T)(IEnumerable(Of T), Action(Of T, Integer))
- uid: v3.1.0.1:Xunit.Assert.AllAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task})
  commentId: M:Xunit.Assert.AllAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task})
  id: AllAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: AllAsync<T>(IEnumerable<T>, Func<T, Task>)
  nameWithType: Assert.AllAsync<T>(IEnumerable<T>, Func<T, Task>)
  fullName: Xunit.Assert.AllAsync<T>(System.Collections.Generic.IEnumerable<T>, System.Func<T, System.Threading.Tasks.Task>)
  type: Method
  source:
    id: AllAsync
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\CollectionAsserts.cs
    startLine: 100
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: >-
    Verifies that all items in the collection pass when executed against

    action.
  example: []
  syntax:
    content: public static Task AllAsync<T>(IEnumerable<T> collection, Func<T, Task> action)
    parameters:
    - id: collection
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The collection
    - id: action
      type: System.Func{{T},System.Threading.Tasks.Task}
      description: The action to test each item against
    typeParameters:
    - id: T
      description: The type of the object to be verified
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Shared Function AllAsync(Of T)(collection As IEnumerable(Of T), action As Func(Of T, Task)) As Task
  overload: v3.1.0.1:Xunit.Assert.AllAsync*
  exceptions:
  - type: Xunit.Sdk.AllException
    commentId: T:Xunit.Sdk.AllException
    description: Thrown when the collection contains at least one non-matching element
  nameWithType.vb: Assert.AllAsync(Of T)(IEnumerable(Of T), Func(Of T, Task))
  fullName.vb: Xunit.Assert.AllAsync(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, System.Threading.Tasks.Task))
  name.vb: AllAsync(Of T)(IEnumerable(Of T), Func(Of T, Task))
- uid: v3.1.0.1:Xunit.Assert.AllAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Threading.Tasks.Task})
  commentId: M:Xunit.Assert.AllAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Threading.Tasks.Task})
  id: AllAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Threading.Tasks.Task})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: AllAsync<T>(IEnumerable<T>, Func<T, int, Task>)
  nameWithType: Assert.AllAsync<T>(IEnumerable<T>, Func<T, int, Task>)
  fullName: Xunit.Assert.AllAsync<T>(System.Collections.Generic.IEnumerable<T>, System.Func<T, int, System.Threading.Tasks.Task>)
  type: Method
  source:
    id: AllAsync
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\CollectionAsserts.cs
    startLine: 118
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: >-
    Verifies that all items in the collection pass when executed against

    action. The item index is provided to the action, in addition to the item.
  example: []
  syntax:
    content: public static Task AllAsync<T>(IEnumerable<T> collection, Func<T, int, Task> action)
    parameters:
    - id: collection
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The collection
    - id: action
      type: System.Func{{T},System.Int32,System.Threading.Tasks.Task}
      description: The action to test each item against
    typeParameters:
    - id: T
      description: The type of the object to be verified
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Shared Function AllAsync(Of T)(collection As IEnumerable(Of T), action As Func(Of T, Integer, Task)) As Task
  overload: v3.1.0.1:Xunit.Assert.AllAsync*
  exceptions:
  - type: Xunit.Sdk.AllException
    commentId: T:Xunit.Sdk.AllException
    description: Thrown when the collection contains at least one non-matching element
  nameWithType.vb: Assert.AllAsync(Of T)(IEnumerable(Of T), Func(Of T, Integer, Task))
  fullName.vb: Xunit.Assert.AllAsync(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, Integer, System.Threading.Tasks.Task))
  name.vb: AllAsync(Of T)(IEnumerable(Of T), Func(Of T, Integer, Task))
- uid: v3.1.0.1:Xunit.Assert.Collection``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0}[])
  commentId: M:Xunit.Assert.Collection``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0}[])
  id: Collection``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0}[])
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Collection<T>(IEnumerable<T>, params Action<T>[])
  nameWithType: Assert.Collection<T>(IEnumerable<T>, params Action<T>[])
  fullName: Xunit.Assert.Collection<T>(System.Collections.Generic.IEnumerable<T>, params System.Action<T>[])
  type: Method
  source:
    id: Collection
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\CollectionAsserts.cs
    startLine: 154
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: >-
    Verifies that a collection contains exactly a given number of elements, which meet

    the criteria provided by the element inspectors.
  example: []
  syntax:
    content: public static void Collection<T>(IEnumerable<T> collection, params Action<T>[] elementInspectors)
    parameters:
    - id: collection
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The collection to be inspected
    - id: elementInspectors
      type: System.Action{{T}}[]
      description: >-
        The element inspectors, which inspect each element in turn. The
            total number of element inspectors must exactly match the number of elements in the collection.
    typeParameters:
    - id: T
      description: The type of the object to be verified
    content.vb: Public Shared Sub Collection(Of T)(collection As IEnumerable(Of T), ParamArray elementInspectors As Action(Of T)())
  overload: v3.1.0.1:Xunit.Assert.Collection*
  nameWithType.vb: Assert.Collection(Of T)(IEnumerable(Of T), ParamArray Action(Of T)())
  fullName.vb: Xunit.Assert.Collection(Of T)(System.Collections.Generic.IEnumerable(Of T), ParamArray System.Action(Of T)())
  name.vb: Collection(Of T)(IEnumerable(Of T), ParamArray Action(Of T)())
- uid: v3.1.0.1:Xunit.Assert.CollectionAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task}[])
  commentId: M:Xunit.Assert.CollectionAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task}[])
  id: CollectionAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task}[])
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: CollectionAsync<T>(IEnumerable<T>, params Func<T, Task>[])
  nameWithType: Assert.CollectionAsync<T>(IEnumerable<T>, params Func<T, Task>[])
  fullName: Xunit.Assert.CollectionAsync<T>(System.Collections.Generic.IEnumerable<T>, params System.Func<T, System.Threading.Tasks.Task>[])
  type: Method
  source:
    id: CollectionAsync
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\CollectionAsserts.cs
    startLine: 195
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: >-
    Verifies that a collection contains exactly a given number of elements, which meet

    the criteria provided by the element inspectors.
  example: []
  syntax:
    content: public static Task CollectionAsync<T>(IEnumerable<T> collection, params Func<T, Task>[] elementInspectors)
    parameters:
    - id: collection
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The collection to be inspected
    - id: elementInspectors
      type: System.Func{{T},System.Threading.Tasks.Task}[]
      description: >-
        The element inspectors, which inspect each element in turn. The
            total number of element inspectors must exactly match the number of elements in the collection.
    typeParameters:
    - id: T
      description: The type of the object to be verified
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Shared Function CollectionAsync(Of T)(collection As IEnumerable(Of T), ParamArray elementInspectors As Func(Of T, Task)()) As Task
  overload: v3.1.0.1:Xunit.Assert.CollectionAsync*
  nameWithType.vb: Assert.CollectionAsync(Of T)(IEnumerable(Of T), ParamArray Func(Of T, Task)())
  fullName.vb: Xunit.Assert.CollectionAsync(Of T)(System.Collections.Generic.IEnumerable(Of T), ParamArray System.Func(Of T, System.Threading.Tasks.Task)())
  name.vb: CollectionAsync(Of T)(IEnumerable(Of T), ParamArray Func(Of T, Task)())
- uid: v3.1.0.1:Xunit.Assert.Contains``1(``0,System.Collections.Generic.IEnumerable{``0})
  commentId: M:Xunit.Assert.Contains``1(``0,System.Collections.Generic.IEnumerable{``0})
  id: Contains``1(``0,System.Collections.Generic.IEnumerable{``0})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Contains<T>(T, IEnumerable<T>)
  nameWithType: Assert.Contains<T>(T, IEnumerable<T>)
  fullName: Xunit.Assert.Contains<T>(T, System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    id: Contains
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\CollectionAsserts.cs
    startLine: 235
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a collection contains a given object.
  example: []
  syntax:
    content: public static void Contains<T>(T expected, IEnumerable<T> collection)
    parameters:
    - id: expected
      type: '{T}'
      description: The object expected to be in the collection
    - id: collection
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The collection to be inspected
    typeParameters:
    - id: T
      description: The type of the object to be verified
    content.vb: Public Shared Sub Contains(Of T)(expected As T, collection As IEnumerable(Of T))
  overload: v3.1.0.1:Xunit.Assert.Contains*
  exceptions:
  - type: Xunit.Sdk.ContainsException
    commentId: T:Xunit.Sdk.ContainsException
    description: Thrown when the object is not present in the collection
  nameWithType.vb: Assert.Contains(Of T)(T, IEnumerable(Of T))
  fullName.vb: Xunit.Assert.Contains(Of T)(T, System.Collections.Generic.IEnumerable(Of T))
  name.vb: Contains(Of T)(T, IEnumerable(Of T))
- uid: v3.1.0.1:Xunit.Assert.Contains``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:Xunit.Assert.Contains``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  id: Contains``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Contains<T>(T, IEnumerable<T>, IEqualityComparer<T>)
  nameWithType: Assert.Contains<T>(T, IEnumerable<T>, IEqualityComparer<T>)
  fullName: Xunit.Assert.Contains<T>(T, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)
  type: Method
  source:
    id: Contains
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\CollectionAsserts.cs
    startLine: 270
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a collection contains a given object, using an equality comparer.
  example: []
  syntax:
    content: public static void Contains<T>(T expected, IEnumerable<T> collection, IEqualityComparer<T> comparer)
    parameters:
    - id: expected
      type: '{T}'
      description: The object expected to be in the collection
    - id: collection
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The collection to be inspected
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{T}}
      description: The comparer used to equate objects in the collection with the expected object
    typeParameters:
    - id: T
      description: The type of the object to be verified
    content.vb: Public Shared Sub Contains(Of T)(expected As T, collection As IEnumerable(Of T), comparer As IEqualityComparer(Of T))
  overload: v3.1.0.1:Xunit.Assert.Contains*
  exceptions:
  - type: Xunit.Sdk.ContainsException
    commentId: T:Xunit.Sdk.ContainsException
    description: Thrown when the object is not present in the collection
  nameWithType.vb: Assert.Contains(Of T)(T, IEnumerable(Of T), IEqualityComparer(Of T))
  fullName.vb: Xunit.Assert.Contains(Of T)(T, System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEqualityComparer(Of T))
  name.vb: Contains(Of T)(T, IEnumerable(Of T), IEqualityComparer(Of T))
- uid: v3.1.0.1:Xunit.Assert.Contains``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})
  commentId: M:Xunit.Assert.Contains``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})
  id: Contains``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Contains<T>(IEnumerable<T>, Predicate<T>)
  nameWithType: Assert.Contains<T>(IEnumerable<T>, Predicate<T>)
  fullName: Xunit.Assert.Contains<T>(System.Collections.Generic.IEnumerable<T>, System.Predicate<T>)
  type: Method
  source:
    id: Contains
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\CollectionAsserts.cs
    startLine: 290
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a collection contains a given object.
  example: []
  syntax:
    content: public static void Contains<T>(IEnumerable<T> collection, Predicate<T> filter)
    parameters:
    - id: collection
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The collection to be inspected
    - id: filter
      type: System.Predicate{{T}}
      description: The filter used to find the item you're ensuring the collection contains
    typeParameters:
    - id: T
      description: The type of the object to be verified
    content.vb: Public Shared Sub Contains(Of T)(collection As IEnumerable(Of T), filter As Predicate(Of T))
  overload: v3.1.0.1:Xunit.Assert.Contains*
  exceptions:
  - type: Xunit.Sdk.ContainsException
    commentId: T:Xunit.Sdk.ContainsException
    description: Thrown when the object is not present in the collection
  nameWithType.vb: Assert.Contains(Of T)(IEnumerable(Of T), Predicate(Of T))
  fullName.vb: Xunit.Assert.Contains(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Predicate(Of T))
  name.vb: Contains(Of T)(IEnumerable(Of T), Predicate(Of T))
- uid: v3.1.0.1:Xunit.Assert.Distinct``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:Xunit.Assert.Distinct``1(System.Collections.Generic.IEnumerable{``0})
  id: Distinct``1(System.Collections.Generic.IEnumerable{``0})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Distinct<T>(IEnumerable<T>)
  nameWithType: Assert.Distinct<T>(IEnumerable<T>)
  fullName: Xunit.Assert.Distinct<T>(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    id: Distinct
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\CollectionAsserts.cs
    startLine: 313
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a collection contains each object only once.
  example: []
  syntax:
    content: public static void Distinct<T>(IEnumerable<T> collection)
    parameters:
    - id: collection
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The collection to be inspected
    typeParameters:
    - id: T
      description: The type of the object to be compared
    content.vb: Public Shared Sub Distinct(Of T)(collection As IEnumerable(Of T))
  overload: v3.1.0.1:Xunit.Assert.Distinct*
  exceptions:
  - type: Xunit.Sdk.DistinctException
    commentId: T:Xunit.Sdk.DistinctException
    description: Thrown when an object is present inside the collection more than once
  nameWithType.vb: Assert.Distinct(Of T)(IEnumerable(Of T))
  fullName.vb: Xunit.Assert.Distinct(Of T)(System.Collections.Generic.IEnumerable(Of T))
  name.vb: Distinct(Of T)(IEnumerable(Of T))
- uid: v3.1.0.1:Xunit.Assert.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:Xunit.Assert.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  id: Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Distinct<T>(IEnumerable<T>, IEqualityComparer<T>)
  nameWithType: Assert.Distinct<T>(IEnumerable<T>, IEqualityComparer<T>)
  fullName: Xunit.Assert.Distinct<T>(System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)
  type: Method
  source:
    id: Distinct
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\CollectionAsserts.cs
    startLine: 323
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a collection contains each object only once.
  example: []
  syntax:
    content: public static void Distinct<T>(IEnumerable<T> collection, IEqualityComparer<T> comparer)
    parameters:
    - id: collection
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The collection to be inspected
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{T}}
      description: The comparer used to equate objects in the collection with the expected object
    typeParameters:
    - id: T
      description: The type of the object to be compared
    content.vb: Public Shared Sub Distinct(Of T)(collection As IEnumerable(Of T), comparer As IEqualityComparer(Of T))
  overload: v3.1.0.1:Xunit.Assert.Distinct*
  exceptions:
  - type: Xunit.Sdk.DistinctException
    commentId: T:Xunit.Sdk.DistinctException
    description: Thrown when an object is present inside the collection more than once
  nameWithType.vb: Assert.Distinct(Of T)(IEnumerable(Of T), IEqualityComparer(Of T))
  fullName.vb: Xunit.Assert.Distinct(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEqualityComparer(Of T))
  name.vb: Distinct(Of T)(IEnumerable(Of T), IEqualityComparer(Of T))
- uid: v3.1.0.1:Xunit.Assert.DoesNotContain``1(``0,System.Collections.Generic.IEnumerable{``0})
  commentId: M:Xunit.Assert.DoesNotContain``1(``0,System.Collections.Generic.IEnumerable{``0})
  id: DoesNotContain``1(``0,System.Collections.Generic.IEnumerable{``0})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: DoesNotContain<T>(T, IEnumerable<T>)
  nameWithType: Assert.DoesNotContain<T>(T, IEnumerable<T>)
  fullName: Xunit.Assert.DoesNotContain<T>(T, System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    id: DoesNotContain
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\CollectionAsserts.cs
    startLine: 347
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a collection does not contain a given object.
  example: []
  syntax:
    content: public static void DoesNotContain<T>(T expected, IEnumerable<T> collection)
    parameters:
    - id: expected
      type: '{T}'
      description: The object that is expected not to be in the collection
    - id: collection
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The collection to be inspected
    typeParameters:
    - id: T
      description: The type of the object to be compared
    content.vb: Public Shared Sub DoesNotContain(Of T)(expected As T, collection As IEnumerable(Of T))
  overload: v3.1.0.1:Xunit.Assert.DoesNotContain*
  exceptions:
  - type: Xunit.Sdk.DoesNotContainException
    commentId: T:Xunit.Sdk.DoesNotContainException
    description: Thrown when the object is present inside the collection
  nameWithType.vb: Assert.DoesNotContain(Of T)(T, IEnumerable(Of T))
  fullName.vb: Xunit.Assert.DoesNotContain(Of T)(T, System.Collections.Generic.IEnumerable(Of T))
  name.vb: DoesNotContain(Of T)(T, IEnumerable(Of T))
- uid: v3.1.0.1:Xunit.Assert.DoesNotContain``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:Xunit.Assert.DoesNotContain``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  id: DoesNotContain``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: DoesNotContain<T>(T, IEnumerable<T>, IEqualityComparer<T>)
  nameWithType: Assert.DoesNotContain<T>(T, IEnumerable<T>, IEqualityComparer<T>)
  fullName: Xunit.Assert.DoesNotContain<T>(T, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)
  type: Method
  source:
    id: DoesNotContain
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\CollectionAsserts.cs
    startLine: 382
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a collection does not contain a given object, using an equality comparer.
  example: []
  syntax:
    content: public static void DoesNotContain<T>(T expected, IEnumerable<T> collection, IEqualityComparer<T> comparer)
    parameters:
    - id: expected
      type: '{T}'
      description: The object that is expected not to be in the collection
    - id: collection
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The collection to be inspected
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{T}}
      description: The comparer used to equate objects in the collection with the expected object
    typeParameters:
    - id: T
      description: The type of the object to be compared
    content.vb: Public Shared Sub DoesNotContain(Of T)(expected As T, collection As IEnumerable(Of T), comparer As IEqualityComparer(Of T))
  overload: v3.1.0.1:Xunit.Assert.DoesNotContain*
  exceptions:
  - type: Xunit.Sdk.DoesNotContainException
    commentId: T:Xunit.Sdk.DoesNotContainException
    description: Thrown when the object is present inside the collection
  nameWithType.vb: Assert.DoesNotContain(Of T)(T, IEnumerable(Of T), IEqualityComparer(Of T))
  fullName.vb: Xunit.Assert.DoesNotContain(Of T)(T, System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEqualityComparer(Of T))
  name.vb: DoesNotContain(Of T)(T, IEnumerable(Of T), IEqualityComparer(Of T))
- uid: v3.1.0.1:Xunit.Assert.DoesNotContain``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})
  commentId: M:Xunit.Assert.DoesNotContain``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})
  id: DoesNotContain``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: DoesNotContain<T>(IEnumerable<T>, Predicate<T>)
  nameWithType: Assert.DoesNotContain<T>(IEnumerable<T>, Predicate<T>)
  fullName: Xunit.Assert.DoesNotContain<T>(System.Collections.Generic.IEnumerable<T>, System.Predicate<T>)
  type: Method
  source:
    id: DoesNotContain
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\CollectionAsserts.cs
    startLine: 421
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a collection does not contain a given object.
  example: []
  syntax:
    content: public static void DoesNotContain<T>(IEnumerable<T> collection, Predicate<T> filter)
    parameters:
    - id: collection
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The collection to be inspected
    - id: filter
      type: System.Predicate{{T}}
      description: The filter used to find the item you're ensuring the collection does not contain
    typeParameters:
    - id: T
      description: The type of the object to be compared
    content.vb: Public Shared Sub DoesNotContain(Of T)(collection As IEnumerable(Of T), filter As Predicate(Of T))
  overload: v3.1.0.1:Xunit.Assert.DoesNotContain*
  exceptions:
  - type: Xunit.Sdk.DoesNotContainException
    commentId: T:Xunit.Sdk.DoesNotContainException
    description: Thrown when the object is present inside the collection
  nameWithType.vb: Assert.DoesNotContain(Of T)(IEnumerable(Of T), Predicate(Of T))
  fullName.vb: Xunit.Assert.DoesNotContain(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Predicate(Of T))
  name.vb: DoesNotContain(Of T)(IEnumerable(Of T), Predicate(Of T))
- uid: v3.1.0.1:Xunit.Assert.Empty(System.Collections.IEnumerable)
  commentId: M:Xunit.Assert.Empty(System.Collections.IEnumerable)
  id: Empty(System.Collections.IEnumerable)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Empty(IEnumerable)
  nameWithType: Assert.Empty(IEnumerable)
  fullName: Xunit.Assert.Empty(System.Collections.IEnumerable)
  type: Method
  source:
    id: Empty
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\CollectionAsserts.cs
    startLine: 457
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a collection is empty.
  example: []
  syntax:
    content: public static void Empty(IEnumerable collection)
    parameters:
    - id: collection
      type: System.Collections.IEnumerable
      description: The collection to be inspected
    content.vb: Public Shared Sub Empty(collection As IEnumerable)
  overload: v3.1.0.1:Xunit.Assert.Empty*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown when the collection is null
  - type: Xunit.Sdk.EmptyException
    commentId: T:Xunit.Sdk.EmptyException
    description: Thrown when the collection is not empty
- uid: v3.1.0.1:Xunit.Assert.Equal``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:Xunit.Assert.Equal``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  id: Equal``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Equal<T>(IEnumerable<T>?, IEnumerable<T>?)
  nameWithType: Assert.Equal<T>(IEnumerable<T>?, IEnumerable<T>?)
  fullName: Xunit.Assert.Equal<T>(System.Collections.Generic.IEnumerable<T>?, System.Collections.Generic.IEnumerable<T>?)
  type: Method
  source:
    id: Equal
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\CollectionAsserts.cs
    startLine: 476
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that two sequences are equivalent, using a default comparer.
  example: []
  syntax:
    content: public static void Equal<T>(IEnumerable<T>? expected, IEnumerable<T>? actual)
    parameters:
    - id: expected
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The expected value
    - id: actual
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The value to be compared against
    typeParameters:
    - id: T
      description: The type of the objects to be compared
    content.vb: Public Shared Sub Equal(Of T)(expected As IEnumerable(Of T), actual As IEnumerable(Of T))
  overload: v3.1.0.1:Xunit.Assert.Equal*
  exceptions:
  - type: Xunit.Sdk.EqualException
    commentId: T:Xunit.Sdk.EqualException
    description: Thrown when the objects are not equal
  nameWithType.vb: Assert.Equal(Of T)(IEnumerable(Of T), IEnumerable(Of T))
  fullName.vb: Xunit.Assert.Equal(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEnumerable(Of T))
  name.vb: Equal(Of T)(IEnumerable(Of T), IEnumerable(Of T))
- uid: v3.1.0.1:Xunit.Assert.Equal``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:Xunit.Assert.Equal``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  id: Equal``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Equal<T>(IEnumerable<T>?, IEnumerable<T>?, IEqualityComparer<T>)
  nameWithType: Assert.Equal<T>(IEnumerable<T>?, IEnumerable<T>?, IEqualityComparer<T>)
  fullName: Xunit.Assert.Equal<T>(System.Collections.Generic.IEnumerable<T>?, System.Collections.Generic.IEnumerable<T>?, System.Collections.Generic.IEqualityComparer<T>)
  type: Method
  source:
    id: Equal
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\CollectionAsserts.cs
    startLine: 494
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that two sequences are equivalent, using a custom equatable comparer.
  example: []
  syntax:
    content: public static void Equal<T>(IEnumerable<T>? expected, IEnumerable<T>? actual, IEqualityComparer<T> comparer)
    parameters:
    - id: expected
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The expected value
    - id: actual
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The value to be compared against
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{T}}
      description: The comparer used to compare the two objects
    typeParameters:
    - id: T
      description: The type of the objects to be compared
    content.vb: Public Shared Sub Equal(Of T)(expected As IEnumerable(Of T), actual As IEnumerable(Of T), comparer As IEqualityComparer(Of T))
  overload: v3.1.0.1:Xunit.Assert.Equal*
  exceptions:
  - type: Xunit.Sdk.EqualException
    commentId: T:Xunit.Sdk.EqualException
    description: Thrown when the objects are not equal
  nameWithType.vb: Assert.Equal(Of T)(IEnumerable(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
  fullName.vb: Xunit.Assert.Equal(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEqualityComparer(Of T))
  name.vb: Equal(Of T)(IEnumerable(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
- uid: v3.1.0.1:Xunit.Assert.Equal``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})
  commentId: M:Xunit.Assert.Equal``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})
  id: Equal``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Equal<T>(IEnumerable<T>?, IEnumerable<T>?, Func<T, T, bool>)
  nameWithType: Assert.Equal<T>(IEnumerable<T>?, IEnumerable<T>?, Func<T, T, bool>)
  fullName: Xunit.Assert.Equal<T>(System.Collections.Generic.IEnumerable<T>?, System.Collections.Generic.IEnumerable<T>?, System.Func<T, T, bool>)
  type: Method
  source:
    id: Equal
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\CollectionAsserts.cs
    startLine: 513
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: >-
    Verifies that two collections are equal, using a comparer function against

    items in the two collections.
  example: []
  syntax:
    content: public static void Equal<T>(IEnumerable<T>? expected, IEnumerable<T>? actual, Func<T, T, bool> comparer)
    parameters:
    - id: expected
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The expected value
    - id: actual
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The value to be compared against
    - id: comparer
      type: System.Func{{T},{T},System.Boolean}
      description: The function to compare two items for equality
    typeParameters:
    - id: T
      description: The type of the objects to be compared
    content.vb: Public Shared Sub Equal(Of T)(expected As IEnumerable(Of T), actual As IEnumerable(Of T), comparer As Func(Of T, T, Boolean))
  overload: v3.1.0.1:Xunit.Assert.Equal*
  nameWithType.vb: Assert.Equal(Of T)(IEnumerable(Of T), IEnumerable(Of T), Func(Of T, T, Boolean))
  fullName.vb: Xunit.Assert.Equal(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, T, Boolean))
  name.vb: Equal(Of T)(IEnumerable(Of T), IEnumerable(Of T), Func(Of T, T, Boolean))
- uid: v3.1.0.1:Xunit.Assert.NotEmpty(System.Collections.IEnumerable)
  commentId: M:Xunit.Assert.NotEmpty(System.Collections.IEnumerable)
  id: NotEmpty(System.Collections.IEnumerable)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: NotEmpty(IEnumerable)
  nameWithType: Assert.NotEmpty(IEnumerable)
  fullName: Xunit.Assert.NotEmpty(System.Collections.IEnumerable)
  type: Method
  source:
    id: NotEmpty
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\CollectionAsserts.cs
    startLine: 530
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a collection is not empty.
  example: []
  syntax:
    content: public static void NotEmpty(IEnumerable collection)
    parameters:
    - id: collection
      type: System.Collections.IEnumerable
      description: The collection to be inspected
    content.vb: Public Shared Sub NotEmpty(collection As IEnumerable)
  overload: v3.1.0.1:Xunit.Assert.NotEmpty*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown when a null collection is passed
  - type: Xunit.Sdk.NotEmptyException
    commentId: T:Xunit.Sdk.NotEmptyException
    description: Thrown when the collection is empty
- uid: v3.1.0.1:Xunit.Assert.NotEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:Xunit.Assert.NotEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  id: NotEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: NotEqual<T>(IEnumerable<T>?, IEnumerable<T>?)
  nameWithType: Assert.NotEqual<T>(IEnumerable<T>?, IEnumerable<T>?)
  fullName: Xunit.Assert.NotEqual<T>(System.Collections.Generic.IEnumerable<T>?, System.Collections.Generic.IEnumerable<T>?)
  type: Method
  source:
    id: NotEqual
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\CollectionAsserts.cs
    startLine: 553
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that two sequences are not equivalent, using a default comparer.
  example: []
  syntax:
    content: public static void NotEqual<T>(IEnumerable<T>? expected, IEnumerable<T>? actual)
    parameters:
    - id: expected
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The expected object
    - id: actual
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The actual object
    typeParameters:
    - id: T
      description: The type of the objects to be compared
    content.vb: Public Shared Sub NotEqual(Of T)(expected As IEnumerable(Of T), actual As IEnumerable(Of T))
  overload: v3.1.0.1:Xunit.Assert.NotEqual*
  exceptions:
  - type: Xunit.Sdk.NotEqualException
    commentId: T:Xunit.Sdk.NotEqualException
    description: Thrown when the objects are equal
  nameWithType.vb: Assert.NotEqual(Of T)(IEnumerable(Of T), IEnumerable(Of T))
  fullName.vb: Xunit.Assert.NotEqual(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEnumerable(Of T))
  name.vb: NotEqual(Of T)(IEnumerable(Of T), IEnumerable(Of T))
- uid: v3.1.0.1:Xunit.Assert.NotEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:Xunit.Assert.NotEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  id: NotEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: NotEqual<T>(IEnumerable<T>?, IEnumerable<T>?, IEqualityComparer<T>)
  nameWithType: Assert.NotEqual<T>(IEnumerable<T>?, IEnumerable<T>?, IEqualityComparer<T>)
  fullName: Xunit.Assert.NotEqual<T>(System.Collections.Generic.IEnumerable<T>?, System.Collections.Generic.IEnumerable<T>?, System.Collections.Generic.IEqualityComparer<T>)
  type: Method
  source:
    id: NotEqual
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\CollectionAsserts.cs
    startLine: 571
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that two sequences are not equivalent, using a custom equality comparer.
  example: []
  syntax:
    content: public static void NotEqual<T>(IEnumerable<T>? expected, IEnumerable<T>? actual, IEqualityComparer<T> comparer)
    parameters:
    - id: expected
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The expected object
    - id: actual
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The actual object
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{T}}
      description: The comparer used to compare the two objects
    typeParameters:
    - id: T
      description: The type of the objects to be compared
    content.vb: Public Shared Sub NotEqual(Of T)(expected As IEnumerable(Of T), actual As IEnumerable(Of T), comparer As IEqualityComparer(Of T))
  overload: v3.1.0.1:Xunit.Assert.NotEqual*
  exceptions:
  - type: Xunit.Sdk.NotEqualException
    commentId: T:Xunit.Sdk.NotEqualException
    description: Thrown when the objects are equal
  nameWithType.vb: Assert.NotEqual(Of T)(IEnumerable(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
  fullName.vb: Xunit.Assert.NotEqual(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEqualityComparer(Of T))
  name.vb: NotEqual(Of T)(IEnumerable(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
- uid: v3.1.0.1:Xunit.Assert.NotEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})
  commentId: M:Xunit.Assert.NotEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})
  id: NotEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: NotEqual<T>(IEnumerable<T>?, IEnumerable<T>?, Func<T, T, bool>)
  nameWithType: Assert.NotEqual<T>(IEnumerable<T>?, IEnumerable<T>?, Func<T, T, bool>)
  fullName: Xunit.Assert.NotEqual<T>(System.Collections.Generic.IEnumerable<T>?, System.Collections.Generic.IEnumerable<T>?, System.Func<T, T, bool>)
  type: Method
  source:
    id: NotEqual
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\CollectionAsserts.cs
    startLine: 590
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: >-
    Verifies that two collections are not equal, using a comparer function against

    items in the two collections.
  example: []
  syntax:
    content: public static void NotEqual<T>(IEnumerable<T>? expected, IEnumerable<T>? actual, Func<T, T, bool> comparer)
    parameters:
    - id: expected
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The expected value
    - id: actual
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The value to be compared against
    - id: comparer
      type: System.Func{{T},{T},System.Boolean}
      description: The function to compare two items for equality
    typeParameters:
    - id: T
      description: The type of the objects to be compared
    content.vb: Public Shared Sub NotEqual(Of T)(expected As IEnumerable(Of T), actual As IEnumerable(Of T), comparer As Func(Of T, T, Boolean))
  overload: v3.1.0.1:Xunit.Assert.NotEqual*
  nameWithType.vb: Assert.NotEqual(Of T)(IEnumerable(Of T), IEnumerable(Of T), Func(Of T, T, Boolean))
  fullName.vb: Xunit.Assert.NotEqual(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, T, Boolean))
  name.vb: NotEqual(Of T)(IEnumerable(Of T), IEnumerable(Of T), Func(Of T, T, Boolean))
- uid: v3.1.0.1:Xunit.Assert.Single(System.Collections.IEnumerable)
  commentId: M:Xunit.Assert.Single(System.Collections.IEnumerable)
  id: Single(System.Collections.IEnumerable)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Single(IEnumerable)
  nameWithType: Assert.Single(IEnumerable)
  fullName: Xunit.Assert.Single(System.Collections.IEnumerable)
  type: Method
  source:
    id: Single
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\CollectionAsserts.cs
    startLine: 610
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: >-
    Verifies that the given collection contains only a single

    element of the given type.
  example: []
  syntax:
    content: public static object? Single(IEnumerable collection)
    parameters:
    - id: collection
      type: System.Collections.IEnumerable
      description: The collection.
    return:
      type: System.Object
      description: The single item in the collection.
    content.vb: Public Shared Function [Single](collection As IEnumerable) As Object
  overload: v3.1.0.1:Xunit.Assert.Single*
  exceptions:
  - type: Xunit.Sdk.SingleException
    commentId: T:Xunit.Sdk.SingleException
    description: >-
      Thrown when the collection does not contain
          exactly one element.
- uid: v3.1.0.1:Xunit.Assert.Single(System.Collections.IEnumerable,System.Object)
  commentId: M:Xunit.Assert.Single(System.Collections.IEnumerable,System.Object)
  id: Single(System.Collections.IEnumerable,System.Object)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Single(IEnumerable, object?)
  nameWithType: Assert.Single(IEnumerable, object?)
  fullName: Xunit.Assert.Single(System.Collections.IEnumerable, object?)
  type: Method
  source:
    id: Single
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\CollectionAsserts.cs
    startLine: 630
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: >-
    Verifies that the given collection contains only a single

    element of the given value. The collection may or may not

    contain other values.
  example: []
  syntax:
    content: public static void Single(IEnumerable collection, object? expected)
    parameters:
    - id: collection
      type: System.Collections.IEnumerable
      description: The collection.
    - id: expected
      type: System.Object
      description: The value to find in the collection.
    content.vb: Public Shared Sub [Single](collection As IEnumerable, expected As Object)
  overload: v3.1.0.1:Xunit.Assert.Single*
  exceptions:
  - type: Xunit.Sdk.SingleException
    commentId: T:Xunit.Sdk.SingleException
    description: >-
      Thrown when the collection does not contain
          exactly one element.
  nameWithType.vb: Assert.Single(IEnumerable, Object)
  fullName.vb: Xunit.Assert.Single(System.Collections.IEnumerable, Object)
  name.vb: Single(IEnumerable, Object)
- uid: v3.1.0.1:Xunit.Assert.Single``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:Xunit.Assert.Single``1(System.Collections.Generic.IEnumerable{``0})
  id: Single``1(System.Collections.Generic.IEnumerable{``0})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Single<T>(IEnumerable<T>)
  nameWithType: Assert.Single<T>(IEnumerable<T>)
  fullName: Xunit.Assert.Single<T>(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    id: Single
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\CollectionAsserts.cs
    startLine: 652
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: >-
    Verifies that the given collection contains only a single

    element of the given type.
  example: []
  syntax:
    content: public static T Single<T>(IEnumerable<T> collection)
    parameters:
    - id: collection
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The collection.
    typeParameters:
    - id: T
      description: The collection type.
    return:
      type: '{T}'
      description: The single item in the collection.
    content.vb: Public Shared Function [Single](Of T)(collection As IEnumerable(Of T)) As T
  overload: v3.1.0.1:Xunit.Assert.Single*
  exceptions:
  - type: Xunit.Sdk.SingleException
    commentId: T:Xunit.Sdk.SingleException
    description: >-
      Thrown when the collection does not contain
          exactly one element.
  nameWithType.vb: Assert.Single(Of T)(IEnumerable(Of T))
  fullName.vb: Xunit.Assert.Single(Of T)(System.Collections.Generic.IEnumerable(Of T))
  name.vb: Single(Of T)(IEnumerable(Of T))
- uid: v3.1.0.1:Xunit.Assert.Single``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})
  commentId: M:Xunit.Assert.Single``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})
  id: Single``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Single<T>(IEnumerable<T>, Predicate<T>)
  nameWithType: Assert.Single<T>(IEnumerable<T>, Predicate<T>)
  fullName: Xunit.Assert.Single<T>(System.Collections.Generic.IEnumerable<T>, System.Predicate<T>)
  type: Method
  source:
    id: Single
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\CollectionAsserts.cs
    startLine: 671
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: >-
    Verifies that the given collection contains only a single

    element of the given type which matches the given predicate. The

    collection may or may not contain other values which do not

    match the given predicate.
  example: []
  syntax:
    content: public static T Single<T>(IEnumerable<T> collection, Predicate<T> predicate)
    parameters:
    - id: collection
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The collection.
    - id: predicate
      type: System.Predicate{{T}}
      description: The item matching predicate.
    typeParameters:
    - id: T
      description: The collection type.
    return:
      type: '{T}'
      description: The single item in the filtered collection.
    content.vb: Public Shared Function [Single](Of T)(collection As IEnumerable(Of T), predicate As Predicate(Of T)) As T
  overload: v3.1.0.1:Xunit.Assert.Single*
  exceptions:
  - type: Xunit.Sdk.SingleException
    commentId: T:Xunit.Sdk.SingleException
    description: >-
      Thrown when the filtered collection does
          not contain exactly one element.
  nameWithType.vb: Assert.Single(Of T)(IEnumerable(Of T), Predicate(Of T))
  fullName.vb: Xunit.Assert.Single(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Predicate(Of T))
  name.vb: Single(Of T)(IEnumerable(Of T), Predicate(Of T))
- uid: v3.1.0.1:Xunit.Assert.Contains``2(``0,System.Collections.Generic.IDictionary{``0,``1})
  commentId: M:Xunit.Assert.Contains``2(``0,System.Collections.Generic.IDictionary{``0,``1})
  id: Contains``2(``0,System.Collections.Generic.IDictionary{``0,``1})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Contains<TKey, TValue>(TKey, IDictionary<TKey, TValue>)
  nameWithType: Assert.Contains<TKey, TValue>(TKey, IDictionary<TKey, TValue>)
  fullName: Xunit.Assert.Contains<TKey, TValue>(TKey, System.Collections.Generic.IDictionary<TKey, TValue>)
  type: Method
  source:
    id: Contains
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\DictionaryAsserts.cs
    startLine: 42
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a dictionary contains a given key.
  example: []
  syntax:
    content: 'public static TValue Contains<TKey, TValue>(TKey expected, IDictionary<TKey, TValue> collection) where TKey : notnull'
    parameters:
    - id: expected
      type: '{TKey}'
      description: The object expected to be in the collection.
    - id: collection
      type: System.Collections.Generic.IDictionary{{TKey},{TValue}}
      description: The collection to be inspected.
    typeParameters:
    - id: TKey
      description: The type of the keys of the object to be verified.
    - id: TValue
      description: The type of the values of the object to be verified.
    return:
      type: '{TValue}'
      description: The value associated with <code class="paramref">expected</code>.
    content.vb: Public Shared Function Contains(Of TKey, TValue)(expected As TKey, collection As IDictionary(Of TKey, TValue)) As TValue
  overload: v3.1.0.1:Xunit.Assert.Contains*
  exceptions:
  - type: Xunit.Sdk.ContainsException
    commentId: T:Xunit.Sdk.ContainsException
    description: Thrown when the object is not present in the collection
  nameWithType.vb: Assert.Contains(Of TKey, TValue)(TKey, IDictionary(Of TKey, TValue))
  fullName.vb: Xunit.Assert.Contains(Of TKey, TValue)(TKey, System.Collections.Generic.IDictionary(Of TKey, TValue))
  name.vb: Contains(Of TKey, TValue)(TKey, IDictionary(Of TKey, TValue))
- uid: v3.1.0.1:Xunit.Assert.Contains``2(``0,System.Collections.Generic.IReadOnlyDictionary{``0,``1})
  commentId: M:Xunit.Assert.Contains``2(``0,System.Collections.Generic.IReadOnlyDictionary{``0,``1})
  id: Contains``2(``0,System.Collections.Generic.IReadOnlyDictionary{``0,``1})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Contains<TKey, TValue>(TKey, IReadOnlyDictionary<TKey, TValue>)
  nameWithType: Assert.Contains<TKey, TValue>(TKey, IReadOnlyDictionary<TKey, TValue>)
  fullName: Xunit.Assert.Contains<TKey, TValue>(TKey, System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>)
  type: Method
  source:
    id: Contains
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\DictionaryAsserts.cs
    startLine: 71
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a read-only dictionary contains a given key.
  example: []
  syntax:
    content: 'public static TValue Contains<TKey, TValue>(TKey expected, IReadOnlyDictionary<TKey, TValue> collection) where TKey : notnull'
    parameters:
    - id: expected
      type: '{TKey}'
      description: The object expected to be in the collection.
    - id: collection
      type: System.Collections.Generic.IReadOnlyDictionary{{TKey},{TValue}}
      description: The collection to be inspected.
    typeParameters:
    - id: TKey
      description: The type of the keys of the object to be verified.
    - id: TValue
      description: The type of the values of the object to be verified.
    return:
      type: '{TValue}'
      description: The value associated with <code class="paramref">expected</code>.
    content.vb: Public Shared Function Contains(Of TKey, TValue)(expected As TKey, collection As IReadOnlyDictionary(Of TKey, TValue)) As TValue
  overload: v3.1.0.1:Xunit.Assert.Contains*
  exceptions:
  - type: Xunit.Sdk.ContainsException
    commentId: T:Xunit.Sdk.ContainsException
    description: Thrown when the object is not present in the collection
  nameWithType.vb: Assert.Contains(Of TKey, TValue)(TKey, IReadOnlyDictionary(Of TKey, TValue))
  fullName.vb: Xunit.Assert.Contains(Of TKey, TValue)(TKey, System.Collections.Generic.IReadOnlyDictionary(Of TKey, TValue))
  name.vb: Contains(Of TKey, TValue)(TKey, IReadOnlyDictionary(Of TKey, TValue))
- uid: v3.1.0.1:Xunit.Assert.Contains``2(``0,System.Collections.Concurrent.ConcurrentDictionary{``0,``1})
  commentId: M:Xunit.Assert.Contains``2(``0,System.Collections.Concurrent.ConcurrentDictionary{``0,``1})
  id: Contains``2(``0,System.Collections.Concurrent.ConcurrentDictionary{``0,``1})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Contains<TKey, TValue>(TKey, ConcurrentDictionary<TKey, TValue>)
  nameWithType: Assert.Contains<TKey, TValue>(TKey, ConcurrentDictionary<TKey, TValue>)
  fullName: Xunit.Assert.Contains<TKey, TValue>(TKey, System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>)
  type: Method
  source:
    id: Contains
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\DictionaryAsserts.cs
    startLine: 100
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a dictionary contains a given key.
  example: []
  syntax:
    content: 'public static TValue Contains<TKey, TValue>(TKey expected, ConcurrentDictionary<TKey, TValue> collection) where TKey : notnull'
    parameters:
    - id: expected
      type: '{TKey}'
      description: The object expected to be in the collection.
    - id: collection
      type: System.Collections.Concurrent.ConcurrentDictionary{{TKey},{TValue}}
      description: The collection to be inspected.
    typeParameters:
    - id: TKey
      description: The type of the keys of the object to be verified.
    - id: TValue
      description: The type of the values of the object to be verified.
    return:
      type: '{TValue}'
      description: The value associated with <code class="paramref">expected</code>.
    content.vb: Public Shared Function Contains(Of TKey, TValue)(expected As TKey, collection As ConcurrentDictionary(Of TKey, TValue)) As TValue
  overload: v3.1.0.1:Xunit.Assert.Contains*
  exceptions:
  - type: Xunit.Sdk.ContainsException
    commentId: T:Xunit.Sdk.ContainsException
    description: Thrown when the object is not present in the collection
  nameWithType.vb: Assert.Contains(Of TKey, TValue)(TKey, ConcurrentDictionary(Of TKey, TValue))
  fullName.vb: Xunit.Assert.Contains(Of TKey, TValue)(TKey, System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue))
  name.vb: Contains(Of TKey, TValue)(TKey, ConcurrentDictionary(Of TKey, TValue))
- uid: v3.1.0.1:Xunit.Assert.Contains``2(``0,System.Collections.Generic.Dictionary{``0,``1})
  commentId: M:Xunit.Assert.Contains``2(``0,System.Collections.Generic.Dictionary{``0,``1})
  id: Contains``2(``0,System.Collections.Generic.Dictionary{``0,``1})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Contains<TKey, TValue>(TKey, Dictionary<TKey, TValue>)
  nameWithType: Assert.Contains<TKey, TValue>(TKey, Dictionary<TKey, TValue>)
  fullName: Xunit.Assert.Contains<TKey, TValue>(TKey, System.Collections.Generic.Dictionary<TKey, TValue>)
  type: Method
  source:
    id: Contains
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\DictionaryAsserts.cs
    startLine: 117
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a dictionary contains a given key.
  example: []
  syntax:
    content: 'public static TValue Contains<TKey, TValue>(TKey expected, Dictionary<TKey, TValue> collection) where TKey : notnull'
    parameters:
    - id: expected
      type: '{TKey}'
      description: The object expected to be in the collection.
    - id: collection
      type: System.Collections.Generic.Dictionary{{TKey},{TValue}}
      description: The collection to be inspected.
    typeParameters:
    - id: TKey
      description: The type of the keys of the object to be verified.
    - id: TValue
      description: The type of the values of the object to be verified.
    return:
      type: '{TValue}'
      description: The value associated with <code class="paramref">expected</code>.
    content.vb: Public Shared Function Contains(Of TKey, TValue)(expected As TKey, collection As Dictionary(Of TKey, TValue)) As TValue
  overload: v3.1.0.1:Xunit.Assert.Contains*
  exceptions:
  - type: Xunit.Sdk.ContainsException
    commentId: T:Xunit.Sdk.ContainsException
    description: Thrown when the object is not present in the collection
  nameWithType.vb: Assert.Contains(Of TKey, TValue)(TKey, Dictionary(Of TKey, TValue))
  fullName.vb: Xunit.Assert.Contains(Of TKey, TValue)(TKey, System.Collections.Generic.Dictionary(Of TKey, TValue))
  name.vb: Contains(Of TKey, TValue)(TKey, Dictionary(Of TKey, TValue))
- uid: v3.1.0.1:Xunit.Assert.Contains``2(``0,System.Collections.ObjectModel.ReadOnlyDictionary{``0,``1})
  commentId: M:Xunit.Assert.Contains``2(``0,System.Collections.ObjectModel.ReadOnlyDictionary{``0,``1})
  id: Contains``2(``0,System.Collections.ObjectModel.ReadOnlyDictionary{``0,``1})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Contains<TKey, TValue>(TKey, ReadOnlyDictionary<TKey, TValue>)
  nameWithType: Assert.Contains<TKey, TValue>(TKey, ReadOnlyDictionary<TKey, TValue>)
  fullName: Xunit.Assert.Contains<TKey, TValue>(TKey, System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>)
  type: Method
  source:
    id: Contains
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\DictionaryAsserts.cs
    startLine: 134
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a dictionary contains a given key.
  example: []
  syntax:
    content: 'public static TValue Contains<TKey, TValue>(TKey expected, ReadOnlyDictionary<TKey, TValue> collection) where TKey : notnull'
    parameters:
    - id: expected
      type: '{TKey}'
      description: The object expected to be in the collection.
    - id: collection
      type: System.Collections.ObjectModel.ReadOnlyDictionary{{TKey},{TValue}}
      description: The collection to be inspected.
    typeParameters:
    - id: TKey
      description: The type of the keys of the object to be verified.
    - id: TValue
      description: The type of the values of the object to be verified.
    return:
      type: '{TValue}'
      description: The value associated with <code class="paramref">expected</code>.
    content.vb: Public Shared Function Contains(Of TKey, TValue)(expected As TKey, collection As ReadOnlyDictionary(Of TKey, TValue)) As TValue
  overload: v3.1.0.1:Xunit.Assert.Contains*
  exceptions:
  - type: Xunit.Sdk.ContainsException
    commentId: T:Xunit.Sdk.ContainsException
    description: Thrown when the object is not present in the collection
  nameWithType.vb: Assert.Contains(Of TKey, TValue)(TKey, ReadOnlyDictionary(Of TKey, TValue))
  fullName.vb: Xunit.Assert.Contains(Of TKey, TValue)(TKey, System.Collections.ObjectModel.ReadOnlyDictionary(Of TKey, TValue))
  name.vb: Contains(Of TKey, TValue)(TKey, ReadOnlyDictionary(Of TKey, TValue))
- uid: v3.1.0.1:Xunit.Assert.Contains``2(``0,System.Collections.Immutable.ImmutableDictionary{``0,``1})
  commentId: M:Xunit.Assert.Contains``2(``0,System.Collections.Immutable.ImmutableDictionary{``0,``1})
  id: Contains``2(``0,System.Collections.Immutable.ImmutableDictionary{``0,``1})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Contains<TKey, TValue>(TKey, ImmutableDictionary<TKey, TValue>)
  nameWithType: Assert.Contains<TKey, TValue>(TKey, ImmutableDictionary<TKey, TValue>)
  fullName: Xunit.Assert.Contains<TKey, TValue>(TKey, System.Collections.Immutable.ImmutableDictionary<TKey, TValue>)
  type: Method
  source:
    id: Contains
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\DictionaryAsserts.cs
    startLine: 152
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a dictionary contains a given key.
  example: []
  syntax:
    content: 'public static TValue Contains<TKey, TValue>(TKey expected, ImmutableDictionary<TKey, TValue> collection) where TKey : notnull'
    parameters:
    - id: expected
      type: '{TKey}'
      description: The object expected to be in the collection.
    - id: collection
      type: System.Collections.Immutable.ImmutableDictionary{{TKey},{TValue}}
      description: The collection to be inspected.
    typeParameters:
    - id: TKey
      description: The type of the keys of the object to be verified.
    - id: TValue
      description: The type of the values of the object to be verified.
    return:
      type: '{TValue}'
      description: The value associated with <code class="paramref">expected</code>.
    content.vb: Public Shared Function Contains(Of TKey, TValue)(expected As TKey, collection As ImmutableDictionary(Of TKey, TValue)) As TValue
  overload: v3.1.0.1:Xunit.Assert.Contains*
  exceptions:
  - type: Xunit.Sdk.ContainsException
    commentId: T:Xunit.Sdk.ContainsException
    description: Thrown when the object is not present in the collection
  nameWithType.vb: Assert.Contains(Of TKey, TValue)(TKey, ImmutableDictionary(Of TKey, TValue))
  fullName.vb: Xunit.Assert.Contains(Of TKey, TValue)(TKey, System.Collections.Immutable.ImmutableDictionary(Of TKey, TValue))
  name.vb: Contains(Of TKey, TValue)(TKey, ImmutableDictionary(Of TKey, TValue))
- uid: v3.1.0.1:Xunit.Assert.DoesNotContain``2(``0,System.Collections.Generic.IDictionary{``0,``1})
  commentId: M:Xunit.Assert.DoesNotContain``2(``0,System.Collections.Generic.IDictionary{``0,``1})
  id: DoesNotContain``2(``0,System.Collections.Generic.IDictionary{``0,``1})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: DoesNotContain<TKey, TValue>(TKey, IDictionary<TKey, TValue>)
  nameWithType: Assert.DoesNotContain<TKey, TValue>(TKey, IDictionary<TKey, TValue>)
  fullName: Xunit.Assert.DoesNotContain<TKey, TValue>(TKey, System.Collections.Generic.IDictionary<TKey, TValue>)
  type: Method
  source:
    id: DoesNotContain
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\DictionaryAsserts.cs
    startLine: 169
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a dictionary does not contain a given key.
  example: []
  syntax:
    content: 'public static void DoesNotContain<TKey, TValue>(TKey expected, IDictionary<TKey, TValue> collection) where TKey : notnull'
    parameters:
    - id: expected
      type: '{TKey}'
      description: The object expected to be in the collection.
    - id: collection
      type: System.Collections.Generic.IDictionary{{TKey},{TValue}}
      description: The collection to be inspected.
    typeParameters:
    - id: TKey
      description: The type of the keys of the object to be verified.
    - id: TValue
      description: The type of the values of the object to be verified.
    content.vb: Public Shared Sub DoesNotContain(Of TKey, TValue)(expected As TKey, collection As IDictionary(Of TKey, TValue))
  overload: v3.1.0.1:Xunit.Assert.DoesNotContain*
  exceptions:
  - type: Xunit.Sdk.DoesNotContainException
    commentId: T:Xunit.Sdk.DoesNotContainException
    description: Thrown when the object is present in the collection
  nameWithType.vb: Assert.DoesNotContain(Of TKey, TValue)(TKey, IDictionary(Of TKey, TValue))
  fullName.vb: Xunit.Assert.DoesNotContain(Of TKey, TValue)(TKey, System.Collections.Generic.IDictionary(Of TKey, TValue))
  name.vb: DoesNotContain(Of TKey, TValue)(TKey, IDictionary(Of TKey, TValue))
- uid: v3.1.0.1:Xunit.Assert.DoesNotContain``2(``0,System.Collections.Generic.IReadOnlyDictionary{``0,``1})
  commentId: M:Xunit.Assert.DoesNotContain``2(``0,System.Collections.Generic.IReadOnlyDictionary{``0,``1})
  id: DoesNotContain``2(``0,System.Collections.Generic.IReadOnlyDictionary{``0,``1})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: DoesNotContain<TKey, TValue>(TKey, IReadOnlyDictionary<TKey, TValue>)
  nameWithType: Assert.DoesNotContain<TKey, TValue>(TKey, IReadOnlyDictionary<TKey, TValue>)
  fullName: Xunit.Assert.DoesNotContain<TKey, TValue>(TKey, System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>)
  type: Method
  source:
    id: DoesNotContain
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\DictionaryAsserts.cs
    startLine: 195
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a dictionary does not contain a given key.
  example: []
  syntax:
    content: 'public static void DoesNotContain<TKey, TValue>(TKey expected, IReadOnlyDictionary<TKey, TValue> collection) where TKey : notnull'
    parameters:
    - id: expected
      type: '{TKey}'
      description: The object expected to be in the collection.
    - id: collection
      type: System.Collections.Generic.IReadOnlyDictionary{{TKey},{TValue}}
      description: The collection to be inspected.
    typeParameters:
    - id: TKey
      description: The type of the keys of the object to be verified.
    - id: TValue
      description: The type of the values of the object to be verified.
    content.vb: Public Shared Sub DoesNotContain(Of TKey, TValue)(expected As TKey, collection As IReadOnlyDictionary(Of TKey, TValue))
  overload: v3.1.0.1:Xunit.Assert.DoesNotContain*
  exceptions:
  - type: Xunit.Sdk.DoesNotContainException
    commentId: T:Xunit.Sdk.DoesNotContainException
    description: Thrown when the object is present in the collection
  nameWithType.vb: Assert.DoesNotContain(Of TKey, TValue)(TKey, IReadOnlyDictionary(Of TKey, TValue))
  fullName.vb: Xunit.Assert.DoesNotContain(Of TKey, TValue)(TKey, System.Collections.Generic.IReadOnlyDictionary(Of TKey, TValue))
  name.vb: DoesNotContain(Of TKey, TValue)(TKey, IReadOnlyDictionary(Of TKey, TValue))
- uid: v3.1.0.1:Xunit.Assert.DoesNotContain``2(``0,System.Collections.Concurrent.ConcurrentDictionary{``0,``1})
  commentId: M:Xunit.Assert.DoesNotContain``2(``0,System.Collections.Concurrent.ConcurrentDictionary{``0,``1})
  id: DoesNotContain``2(``0,System.Collections.Concurrent.ConcurrentDictionary{``0,``1})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: DoesNotContain<TKey, TValue>(TKey, ConcurrentDictionary<TKey, TValue>)
  nameWithType: Assert.DoesNotContain<TKey, TValue>(TKey, ConcurrentDictionary<TKey, TValue>)
  fullName: Xunit.Assert.DoesNotContain<TKey, TValue>(TKey, System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>)
  type: Method
  source:
    id: DoesNotContain
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\DictionaryAsserts.cs
    startLine: 221
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a dictionary does not contain a given key.
  example: []
  syntax:
    content: 'public static void DoesNotContain<TKey, TValue>(TKey expected, ConcurrentDictionary<TKey, TValue> collection) where TKey : notnull'
    parameters:
    - id: expected
      type: '{TKey}'
      description: The object expected to be in the collection.
    - id: collection
      type: System.Collections.Concurrent.ConcurrentDictionary{{TKey},{TValue}}
      description: The collection to be inspected.
    typeParameters:
    - id: TKey
      description: The type of the keys of the object to be verified.
    - id: TValue
      description: The type of the values of the object to be verified.
    content.vb: Public Shared Sub DoesNotContain(Of TKey, TValue)(expected As TKey, collection As ConcurrentDictionary(Of TKey, TValue))
  overload: v3.1.0.1:Xunit.Assert.DoesNotContain*
  exceptions:
  - type: Xunit.Sdk.DoesNotContainException
    commentId: T:Xunit.Sdk.DoesNotContainException
    description: Thrown when the object is present in the collection
  nameWithType.vb: Assert.DoesNotContain(Of TKey, TValue)(TKey, ConcurrentDictionary(Of TKey, TValue))
  fullName.vb: Xunit.Assert.DoesNotContain(Of TKey, TValue)(TKey, System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue))
  name.vb: DoesNotContain(Of TKey, TValue)(TKey, ConcurrentDictionary(Of TKey, TValue))
- uid: v3.1.0.1:Xunit.Assert.DoesNotContain``2(``0,System.Collections.Generic.Dictionary{``0,``1})
  commentId: M:Xunit.Assert.DoesNotContain``2(``0,System.Collections.Generic.Dictionary{``0,``1})
  id: DoesNotContain``2(``0,System.Collections.Generic.Dictionary{``0,``1})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: DoesNotContain<TKey, TValue>(TKey, Dictionary<TKey, TValue>)
  nameWithType: Assert.DoesNotContain<TKey, TValue>(TKey, Dictionary<TKey, TValue>)
  fullName: Xunit.Assert.DoesNotContain<TKey, TValue>(TKey, System.Collections.Generic.Dictionary<TKey, TValue>)
  type: Method
  source:
    id: DoesNotContain
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\DictionaryAsserts.cs
    startLine: 237
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a dictionary does not contain a given key.
  example: []
  syntax:
    content: 'public static void DoesNotContain<TKey, TValue>(TKey expected, Dictionary<TKey, TValue> collection) where TKey : notnull'
    parameters:
    - id: expected
      type: '{TKey}'
      description: The object expected to be in the collection.
    - id: collection
      type: System.Collections.Generic.Dictionary{{TKey},{TValue}}
      description: The collection to be inspected.
    typeParameters:
    - id: TKey
      description: The type of the keys of the object to be verified.
    - id: TValue
      description: The type of the values of the object to be verified.
    content.vb: Public Shared Sub DoesNotContain(Of TKey, TValue)(expected As TKey, collection As Dictionary(Of TKey, TValue))
  overload: v3.1.0.1:Xunit.Assert.DoesNotContain*
  exceptions:
  - type: Xunit.Sdk.DoesNotContainException
    commentId: T:Xunit.Sdk.DoesNotContainException
    description: Thrown when the object is present in the collection
  nameWithType.vb: Assert.DoesNotContain(Of TKey, TValue)(TKey, Dictionary(Of TKey, TValue))
  fullName.vb: Xunit.Assert.DoesNotContain(Of TKey, TValue)(TKey, System.Collections.Generic.Dictionary(Of TKey, TValue))
  name.vb: DoesNotContain(Of TKey, TValue)(TKey, Dictionary(Of TKey, TValue))
- uid: v3.1.0.1:Xunit.Assert.DoesNotContain``2(``0,System.Collections.ObjectModel.ReadOnlyDictionary{``0,``1})
  commentId: M:Xunit.Assert.DoesNotContain``2(``0,System.Collections.ObjectModel.ReadOnlyDictionary{``0,``1})
  id: DoesNotContain``2(``0,System.Collections.ObjectModel.ReadOnlyDictionary{``0,``1})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: DoesNotContain<TKey, TValue>(TKey, ReadOnlyDictionary<TKey, TValue>)
  nameWithType: Assert.DoesNotContain<TKey, TValue>(TKey, ReadOnlyDictionary<TKey, TValue>)
  fullName: Xunit.Assert.DoesNotContain<TKey, TValue>(TKey, System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>)
  type: Method
  source:
    id: DoesNotContain
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\DictionaryAsserts.cs
    startLine: 253
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a dictionary does not contain a given key.
  example: []
  syntax:
    content: 'public static void DoesNotContain<TKey, TValue>(TKey expected, ReadOnlyDictionary<TKey, TValue> collection) where TKey : notnull'
    parameters:
    - id: expected
      type: '{TKey}'
      description: The object expected to be in the collection.
    - id: collection
      type: System.Collections.ObjectModel.ReadOnlyDictionary{{TKey},{TValue}}
      description: The collection to be inspected.
    typeParameters:
    - id: TKey
      description: The type of the keys of the object to be verified.
    - id: TValue
      description: The type of the values of the object to be verified.
    content.vb: Public Shared Sub DoesNotContain(Of TKey, TValue)(expected As TKey, collection As ReadOnlyDictionary(Of TKey, TValue))
  overload: v3.1.0.1:Xunit.Assert.DoesNotContain*
  exceptions:
  - type: Xunit.Sdk.DoesNotContainException
    commentId: T:Xunit.Sdk.DoesNotContainException
    description: Thrown when the object is present in the collection
  nameWithType.vb: Assert.DoesNotContain(Of TKey, TValue)(TKey, ReadOnlyDictionary(Of TKey, TValue))
  fullName.vb: Xunit.Assert.DoesNotContain(Of TKey, TValue)(TKey, System.Collections.ObjectModel.ReadOnlyDictionary(Of TKey, TValue))
  name.vb: DoesNotContain(Of TKey, TValue)(TKey, ReadOnlyDictionary(Of TKey, TValue))
- uid: v3.1.0.1:Xunit.Assert.DoesNotContain``2(``0,System.Collections.Immutable.ImmutableDictionary{``0,``1})
  commentId: M:Xunit.Assert.DoesNotContain``2(``0,System.Collections.Immutable.ImmutableDictionary{``0,``1})
  id: DoesNotContain``2(``0,System.Collections.Immutable.ImmutableDictionary{``0,``1})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: DoesNotContain<TKey, TValue>(TKey, ImmutableDictionary<TKey, TValue>)
  nameWithType: Assert.DoesNotContain<TKey, TValue>(TKey, ImmutableDictionary<TKey, TValue>)
  fullName: Xunit.Assert.DoesNotContain<TKey, TValue>(TKey, System.Collections.Immutable.ImmutableDictionary<TKey, TValue>)
  type: Method
  source:
    id: DoesNotContain
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\DictionaryAsserts.cs
    startLine: 270
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a dictionary does not contain a given key.
  example: []
  syntax:
    content: 'public static void DoesNotContain<TKey, TValue>(TKey expected, ImmutableDictionary<TKey, TValue> collection) where TKey : notnull'
    parameters:
    - id: expected
      type: '{TKey}'
      description: The object expected to be in the collection.
    - id: collection
      type: System.Collections.Immutable.ImmutableDictionary{{TKey},{TValue}}
      description: The collection to be inspected.
    typeParameters:
    - id: TKey
      description: The type of the keys of the object to be verified.
    - id: TValue
      description: The type of the values of the object to be verified.
    content.vb: Public Shared Sub DoesNotContain(Of TKey, TValue)(expected As TKey, collection As ImmutableDictionary(Of TKey, TValue))
  overload: v3.1.0.1:Xunit.Assert.DoesNotContain*
  exceptions:
  - type: Xunit.Sdk.DoesNotContainException
    commentId: T:Xunit.Sdk.DoesNotContainException
    description: Thrown when the object is present in the collection
  nameWithType.vb: Assert.DoesNotContain(Of TKey, TValue)(TKey, ImmutableDictionary(Of TKey, TValue))
  fullName.vb: Xunit.Assert.DoesNotContain(Of TKey, TValue)(TKey, System.Collections.Immutable.ImmutableDictionary(Of TKey, TValue))
  name.vb: DoesNotContain(Of TKey, TValue)(TKey, ImmutableDictionary(Of TKey, TValue))
- uid: v3.1.0.1:Xunit.Assert.Equal``1(``0[],``0[])
  commentId: M:Xunit.Assert.Equal``1(``0[],``0[])
  id: Equal``1(``0[],``0[])
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Equal<T>(T[], T[])
  nameWithType: Assert.Equal<T>(T[], T[])
  fullName: Xunit.Assert.Equal<T>(T[], T[])
  type: Method
  source:
    id: Equal
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\EqualityAsserts.cs
    startLine: 53
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: >-
    Verifies that two arrays of un-managed type T are equal, using Span&lt;T&gt;.SequenceEqual.

    This can be significantly faster than generic enumerables, when the collections are actually

    equal, because the system can optimize packed-memory comparisons for value type arrays.
  remarks: >-
    If <xref href="System.MemoryExtensions.SequenceEqual%60%601(System.Span%7b%60%600%7d%2cSystem.ReadOnlySpan%7b%60%600%7d)" data-throw-if-not-resolved="false"></xref> fails, a call

    to <xref href="v3.1.0.1:Xunit.Assert.Equal%60%601(%60%600%2c%60%600)" data-throw-if-not-resolved="false"></xref> is made, to provide a more meaningful error message.
  example: []
  syntax:
    content: 'public static void Equal<T>(T[] expected, T[] actual) where T : unmanaged, IEquatable<T>'
    parameters:
    - id: expected
      type: '{T}[]'
      description: The expected value
    - id: actual
      type: '{T}[]'
      description: The value to be compared against
    typeParameters:
    - id: T
      description: The type of items whose arrays are to be compared
    content.vb: Public Shared Sub Equal(Of T As {Structure, IEquatable(Of T)})(expected As T(), actual As T())
  overload: v3.1.0.1:Xunit.Assert.Equal*
  nameWithType.vb: Assert.Equal(Of T)(T(), T())
  fullName.vb: Xunit.Assert.Equal(Of T)(T(), T())
  name.vb: Equal(Of T)(T(), T())
- uid: v3.1.0.1:Xunit.Assert.Equal``1(``0,``0)
  commentId: M:Xunit.Assert.Equal``1(``0,``0)
  id: Equal``1(``0,``0)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Equal<T>(T, T)
  nameWithType: Assert.Equal<T>(T, T)
  fullName: Xunit.Assert.Equal<T>(T, T)
  type: Method
  source:
    id: Equal
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\EqualityAsserts.cs
    startLine: 80
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that two objects are equal, using a default comparer.
  example: []
  syntax:
    content: public static void Equal<T>(T expected, T actual)
    parameters:
    - id: expected
      type: '{T}'
      description: The expected value
    - id: actual
      type: '{T}'
      description: The value to be compared against
    typeParameters:
    - id: T
      description: The type of the objects to be compared
    content.vb: Public Shared Sub Equal(Of T)(expected As T, actual As T)
  overload: v3.1.0.1:Xunit.Assert.Equal*
  nameWithType.vb: Assert.Equal(Of T)(T, T)
  fullName.vb: Xunit.Assert.Equal(Of T)(T, T)
  name.vb: Equal(Of T)(T, T)
- uid: v3.1.0.1:Xunit.Assert.Equal``1(``0,``0,System.Func{``0,``0,System.Boolean})
  commentId: M:Xunit.Assert.Equal``1(``0,``0,System.Func{``0,``0,System.Boolean})
  id: Equal``1(``0,``0,System.Func{``0,``0,System.Boolean})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Equal<T>(T, T, Func<T, T, bool>)
  nameWithType: Assert.Equal<T>(T, T, Func<T, T, bool>)
  fullName: Xunit.Assert.Equal<T>(T, T, System.Func<T, T, bool>)
  type: Method
  source:
    id: Equal
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\EqualityAsserts.cs
    startLine: 97
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that two objects are equal, using a custom comparer function.
  example: []
  syntax:
    content: public static void Equal<T>(T expected, T actual, Func<T, T, bool> comparer)
    parameters:
    - id: expected
      type: '{T}'
      description: The expected value
    - id: actual
      type: '{T}'
      description: The value to be compared against
    - id: comparer
      type: System.Func{{T},{T},System.Boolean}
      description: The comparer used to compare the two objects
    typeParameters:
    - id: T
      description: The type of the objects to be compared
    content.vb: Public Shared Sub Equal(Of T)(expected As T, actual As T, comparer As Func(Of T, T, Boolean))
  overload: v3.1.0.1:Xunit.Assert.Equal*
  nameWithType.vb: Assert.Equal(Of T)(T, T, Func(Of T, T, Boolean))
  fullName.vb: Xunit.Assert.Equal(Of T)(T, T, System.Func(Of T, T, Boolean))
  name.vb: Equal(Of T)(T, T, Func(Of T, T, Boolean))
- uid: v3.1.0.1:Xunit.Assert.Equal``1(``0,``0,System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:Xunit.Assert.Equal``1(``0,``0,System.Collections.Generic.IEqualityComparer{``0})
  id: Equal``1(``0,``0,System.Collections.Generic.IEqualityComparer{``0})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Equal<T>(T, T, IEqualityComparer<T>)
  nameWithType: Assert.Equal<T>(T, T, IEqualityComparer<T>)
  fullName: Xunit.Assert.Equal<T>(T, T, System.Collections.Generic.IEqualityComparer<T>)
  type: Method
  source:
    id: Equal
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\EqualityAsserts.cs
    startLine: 115
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that two objects are equal, using a custom equatable comparer.
  example: []
  syntax:
    content: public static void Equal<T>(T expected, T actual, IEqualityComparer<T> comparer)
    parameters:
    - id: expected
      type: '{T}'
      description: The expected value
    - id: actual
      type: '{T}'
      description: The value to be compared against
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{T}}
      description: The comparer used to compare the two objects
    typeParameters:
    - id: T
      description: The type of the objects to be compared
    content.vb: Public Shared Sub Equal(Of T)(expected As T, actual As T, comparer As IEqualityComparer(Of T))
  overload: v3.1.0.1:Xunit.Assert.Equal*
  nameWithType.vb: Assert.Equal(Of T)(T, T, IEqualityComparer(Of T))
  fullName.vb: Xunit.Assert.Equal(Of T)(T, T, System.Collections.Generic.IEqualityComparer(Of T))
  name.vb: Equal(Of T)(T, T, IEqualityComparer(Of T))
- uid: v3.1.0.1:Xunit.Assert.Equal(System.Double,System.Double,System.Int32)
  commentId: M:Xunit.Assert.Equal(System.Double,System.Double,System.Int32)
  id: Equal(System.Double,System.Double,System.Int32)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Equal(double, double, int)
  nameWithType: Assert.Equal(double, double, int)
  fullName: Xunit.Assert.Equal(double, double, int)
  type: Method
  source:
    id: Equal
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\EqualityAsserts.cs
    startLine: 299
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: >-
    Verifies that two <xref href="System.Double" data-throw-if-not-resolved="false"></xref> values are equal, within the number of decimal

    places given by <code class="paramref">precision</code>. The values are rounded before comparison.
  example: []
  syntax:
    content: public static void Equal(double expected, double actual, int precision)
    parameters:
    - id: expected
      type: System.Double
      description: The expected value
    - id: actual
      type: System.Double
      description: The value to be compared against
    - id: precision
      type: System.Int32
      description: 'The number of decimal places (valid values: 0-15)'
    content.vb: Public Shared Sub Equal(expected As Double, actual As Double, precision As Integer)
  overload: v3.1.0.1:Xunit.Assert.Equal*
  nameWithType.vb: Assert.Equal(Double, Double, Integer)
  fullName.vb: Xunit.Assert.Equal(Double, Double, Integer)
  name.vb: Equal(Double, Double, Integer)
- uid: v3.1.0.1:Xunit.Assert.Equal(System.Double,System.Double,System.Int32,System.MidpointRounding)
  commentId: M:Xunit.Assert.Equal(System.Double,System.Double,System.Int32,System.MidpointRounding)
  id: Equal(System.Double,System.Double,System.Int32,System.MidpointRounding)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Equal(double, double, int, MidpointRounding)
  nameWithType: Assert.Equal(double, double, int, MidpointRounding)
  fullName: Xunit.Assert.Equal(double, double, int, System.MidpointRounding)
  type: Method
  source:
    id: Equal
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\EqualityAsserts.cs
    startLine: 324
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: >-
    Verifies that two <xref href="System.Double" data-throw-if-not-resolved="false"></xref> values are equal, within the number of decimal

    places given by <code class="paramref">precision</code>. The values are rounded before comparison.

    The rounding method to use is given by <code class="paramref">rounding</code>
  example: []
  syntax:
    content: public static void Equal(double expected, double actual, int precision, MidpointRounding rounding)
    parameters:
    - id: expected
      type: System.Double
      description: The expected value
    - id: actual
      type: System.Double
      description: The value to be compared against
    - id: precision
      type: System.Int32
      description: 'The number of decimal places (valid values: 0-15)'
    - id: rounding
      type: System.MidpointRounding
      description: Rounding method to use to process a number that is midway between two numbers
    content.vb: Public Shared Sub Equal(expected As Double, actual As Double, precision As Integer, rounding As MidpointRounding)
  overload: v3.1.0.1:Xunit.Assert.Equal*
  nameWithType.vb: Assert.Equal(Double, Double, Integer, MidpointRounding)
  fullName.vb: Xunit.Assert.Equal(Double, Double, Integer, System.MidpointRounding)
  name.vb: Equal(Double, Double, Integer, MidpointRounding)
- uid: v3.1.0.1:Xunit.Assert.Equal(System.Double,System.Double,System.Double)
  commentId: M:Xunit.Assert.Equal(System.Double,System.Double,System.Double)
  id: Equal(System.Double,System.Double,System.Double)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Equal(double, double, double)
  nameWithType: Assert.Equal(double, double, double)
  fullName: Xunit.Assert.Equal(double, double, double)
  type: Method
  source:
    id: Equal
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\EqualityAsserts.cs
    startLine: 348
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: >-
    Verifies that two <xref href="System.Double" data-throw-if-not-resolved="false"></xref> values are equal, within the tolerance given by

    <code class="paramref">tolerance</code> (positive or negative).
  example: []
  syntax:
    content: public static void Equal(double expected, double actual, double tolerance)
    parameters:
    - id: expected
      type: System.Double
      description: The expected value
    - id: actual
      type: System.Double
      description: The value to be compared against
    - id: tolerance
      type: System.Double
      description: The allowed difference between values
    content.vb: Public Shared Sub Equal(expected As Double, actual As Double, tolerance As Double)
  overload: v3.1.0.1:Xunit.Assert.Equal*
  nameWithType.vb: Assert.Equal(Double, Double, Double)
  fullName.vb: Xunit.Assert.Equal(Double, Double, Double)
  name.vb: Equal(Double, Double, Double)
- uid: v3.1.0.1:Xunit.Assert.Equal(System.Single,System.Single,System.Int32)
  commentId: M:Xunit.Assert.Equal(System.Single,System.Single,System.Int32)
  id: Equal(System.Single,System.Single,System.Int32)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Equal(float, float, int)
  nameWithType: Assert.Equal(float, float, int)
  fullName: Xunit.Assert.Equal(float, float, int)
  type: Method
  source:
    id: Equal
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\EqualityAsserts.cs
    startLine: 371
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: >-
    Verifies that two <xref href="System.Single" data-throw-if-not-resolved="false"></xref> values are equal, within the number of decimal

    places given by <code class="paramref">precision</code>. The values are rounded before comparison.
  example: []
  syntax:
    content: public static void Equal(float expected, float actual, int precision)
    parameters:
    - id: expected
      type: System.Single
      description: The expected value
    - id: actual
      type: System.Single
      description: The value to be compared against
    - id: precision
      type: System.Int32
      description: 'The number of decimal places (valid values: 0-15)'
    content.vb: Public Shared Sub Equal(expected As Single, actual As Single, precision As Integer)
  overload: v3.1.0.1:Xunit.Assert.Equal*
  nameWithType.vb: Assert.Equal(Single, Single, Integer)
  fullName.vb: Xunit.Assert.Equal(Single, Single, Integer)
  name.vb: Equal(Single, Single, Integer)
- uid: v3.1.0.1:Xunit.Assert.Equal(System.Single,System.Single,System.Int32,System.MidpointRounding)
  commentId: M:Xunit.Assert.Equal(System.Single,System.Single,System.Int32,System.MidpointRounding)
  id: Equal(System.Single,System.Single,System.Int32,System.MidpointRounding)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Equal(float, float, int, MidpointRounding)
  nameWithType: Assert.Equal(float, float, int, MidpointRounding)
  fullName: Xunit.Assert.Equal(float, float, int, System.MidpointRounding)
  type: Method
  source:
    id: Equal
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\EqualityAsserts.cs
    startLine: 396
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: >-
    Verifies that two <xref href="System.Single" data-throw-if-not-resolved="false"></xref> values are equal, within the number of decimal

    places given by <code class="paramref">precision</code>. The values are rounded before comparison.

    The rounding method to use is given by <code class="paramref">rounding</code>
  example: []
  syntax:
    content: public static void Equal(float expected, float actual, int precision, MidpointRounding rounding)
    parameters:
    - id: expected
      type: System.Single
      description: The expected value
    - id: actual
      type: System.Single
      description: The value to be compared against
    - id: precision
      type: System.Int32
      description: 'The number of decimal places (valid values: 0-15)'
    - id: rounding
      type: System.MidpointRounding
      description: Rounding method to use to process a number that is midway between two numbers
    content.vb: Public Shared Sub Equal(expected As Single, actual As Single, precision As Integer, rounding As MidpointRounding)
  overload: v3.1.0.1:Xunit.Assert.Equal*
  nameWithType.vb: Assert.Equal(Single, Single, Integer, MidpointRounding)
  fullName.vb: Xunit.Assert.Equal(Single, Single, Integer, System.MidpointRounding)
  name.vb: Equal(Single, Single, Integer, MidpointRounding)
- uid: v3.1.0.1:Xunit.Assert.Equal(System.Single,System.Single,System.Single)
  commentId: M:Xunit.Assert.Equal(System.Single,System.Single,System.Single)
  id: Equal(System.Single,System.Single,System.Single)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Equal(float, float, float)
  nameWithType: Assert.Equal(float, float, float)
  fullName: Xunit.Assert.Equal(float, float, float)
  type: Method
  source:
    id: Equal
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\EqualityAsserts.cs
    startLine: 420
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: >-
    Verifies that two <xref href="System.Single" data-throw-if-not-resolved="false"></xref> values are equal, within the tolerance given by

    <code class="paramref">tolerance</code> (positive or negative).
  example: []
  syntax:
    content: public static void Equal(float expected, float actual, float tolerance)
    parameters:
    - id: expected
      type: System.Single
      description: The expected value
    - id: actual
      type: System.Single
      description: The value to be compared against
    - id: tolerance
      type: System.Single
      description: The allowed difference between values
    content.vb: Public Shared Sub Equal(expected As Single, actual As Single, tolerance As Single)
  overload: v3.1.0.1:Xunit.Assert.Equal*
  nameWithType.vb: Assert.Equal(Single, Single, Single)
  fullName.vb: Xunit.Assert.Equal(Single, Single, Single)
  name.vb: Equal(Single, Single, Single)
- uid: v3.1.0.1:Xunit.Assert.Equal(System.Decimal,System.Decimal,System.Int32)
  commentId: M:Xunit.Assert.Equal(System.Decimal,System.Decimal,System.Int32)
  id: Equal(System.Decimal,System.Decimal,System.Int32)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Equal(decimal, decimal, int)
  nameWithType: Assert.Equal(decimal, decimal, int)
  fullName: Xunit.Assert.Equal(decimal, decimal, int)
  type: Method
  source:
    id: Equal
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\EqualityAsserts.cs
    startLine: 443
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: >-
    Verifies that two <xref href="System.Decimal" data-throw-if-not-resolved="false"></xref> values are equal, within the number of decimal

    places given by <code class="paramref">precision</code>. The values are rounded before comparison.
  example: []
  syntax:
    content: public static void Equal(decimal expected, decimal actual, int precision)
    parameters:
    - id: expected
      type: System.Decimal
      description: The expected value
    - id: actual
      type: System.Decimal
      description: The value to be compared against
    - id: precision
      type: System.Int32
      description: 'The number of decimal places (valid values: 0-28)'
    content.vb: Public Shared Sub Equal(expected As Decimal, actual As Decimal, precision As Integer)
  overload: v3.1.0.1:Xunit.Assert.Equal*
  nameWithType.vb: Assert.Equal(Decimal, Decimal, Integer)
  fullName.vb: Xunit.Assert.Equal(Decimal, Decimal, Integer)
  name.vb: Equal(Decimal, Decimal, Integer)
- uid: v3.1.0.1:Xunit.Assert.Equal(System.DateTime,System.DateTime)
  commentId: M:Xunit.Assert.Equal(System.DateTime,System.DateTime)
  id: Equal(System.DateTime,System.DateTime)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Equal(DateTime, DateTime)
  nameWithType: Assert.Equal(DateTime, DateTime)
  fullName: Xunit.Assert.Equal(System.DateTime, System.DateTime)
  type: Method
  source:
    id: Equal
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\EqualityAsserts.cs
    startLine: 463
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that two <xref href="System.DateTime" data-throw-if-not-resolved="false"></xref> values are equal.
  example: []
  syntax:
    content: public static void Equal(DateTime expected, DateTime actual)
    parameters:
    - id: expected
      type: System.DateTime
      description: The expected value
    - id: actual
      type: System.DateTime
      description: The value to be compared against
    content.vb: Public Shared Sub Equal(expected As Date, actual As Date)
  overload: v3.1.0.1:Xunit.Assert.Equal*
  nameWithType.vb: Assert.Equal(Date, Date)
  fullName.vb: Xunit.Assert.Equal(Date, Date)
  name.vb: Equal(Date, Date)
- uid: v3.1.0.1:Xunit.Assert.Equal(System.DateTime,System.DateTime,System.TimeSpan)
  commentId: M:Xunit.Assert.Equal(System.DateTime,System.DateTime,System.TimeSpan)
  id: Equal(System.DateTime,System.DateTime,System.TimeSpan)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Equal(DateTime, DateTime, TimeSpan)
  nameWithType: Assert.Equal(DateTime, DateTime, TimeSpan)
  fullName: Xunit.Assert.Equal(System.DateTime, System.DateTime, System.TimeSpan)
  type: Method
  source:
    id: Equal
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\EqualityAsserts.cs
    startLine: 475
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: >-
    Verifies that two <xref href="System.DateTime" data-throw-if-not-resolved="false"></xref> values are equal, within the precision

    given by <code class="paramref">precision</code>.
  example: []
  syntax:
    content: public static void Equal(DateTime expected, DateTime actual, TimeSpan precision)
    parameters:
    - id: expected
      type: System.DateTime
      description: The expected value
    - id: actual
      type: System.DateTime
      description: The value to be compared against
    - id: precision
      type: System.TimeSpan
      description: The allowed difference in time where the two dates are considered equal
    content.vb: Public Shared Sub Equal(expected As Date, actual As Date, precision As TimeSpan)
  overload: v3.1.0.1:Xunit.Assert.Equal*
  nameWithType.vb: Assert.Equal(Date, Date, TimeSpan)
  fullName.vb: Xunit.Assert.Equal(Date, Date, System.TimeSpan)
  name.vb: Equal(Date, Date, TimeSpan)
- uid: v3.1.0.1:Xunit.Assert.Equal(System.DateTimeOffset,System.DateTimeOffset)
  commentId: M:Xunit.Assert.Equal(System.DateTimeOffset,System.DateTimeOffset)
  id: Equal(System.DateTimeOffset,System.DateTimeOffset)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Equal(DateTimeOffset, DateTimeOffset)
  nameWithType: Assert.Equal(DateTimeOffset, DateTimeOffset)
  fullName: Xunit.Assert.Equal(System.DateTimeOffset, System.DateTimeOffset)
  type: Method
  source:
    id: Equal
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\EqualityAsserts.cs
    startLine: 497
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that two <xref href="System.DateTimeOffset" data-throw-if-not-resolved="false"></xref> values are equal.
  example: []
  syntax:
    content: public static void Equal(DateTimeOffset expected, DateTimeOffset actual)
    parameters:
    - id: expected
      type: System.DateTimeOffset
      description: The expected value
    - id: actual
      type: System.DateTimeOffset
      description: The value to be compared against
    content.vb: Public Shared Sub Equal(expected As DateTimeOffset, actual As DateTimeOffset)
  overload: v3.1.0.1:Xunit.Assert.Equal*
- uid: v3.1.0.1:Xunit.Assert.Equal(System.DateTimeOffset,System.DateTimeOffset,System.TimeSpan)
  commentId: M:Xunit.Assert.Equal(System.DateTimeOffset,System.DateTimeOffset,System.TimeSpan)
  id: Equal(System.DateTimeOffset,System.DateTimeOffset,System.TimeSpan)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Equal(DateTimeOffset, DateTimeOffset, TimeSpan)
  nameWithType: Assert.Equal(DateTimeOffset, DateTimeOffset, TimeSpan)
  fullName: Xunit.Assert.Equal(System.DateTimeOffset, System.DateTimeOffset, System.TimeSpan)
  type: Method
  source:
    id: Equal
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\EqualityAsserts.cs
    startLine: 509
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: >-
    Verifies that two <xref href="System.DateTimeOffset" data-throw-if-not-resolved="false"></xref> values are equal, within the precision

    given by <code class="paramref">precision</code>.
  example: []
  syntax:
    content: public static void Equal(DateTimeOffset expected, DateTimeOffset actual, TimeSpan precision)
    parameters:
    - id: expected
      type: System.DateTimeOffset
      description: The expected value
    - id: actual
      type: System.DateTimeOffset
      description: The value to be compared against
    - id: precision
      type: System.TimeSpan
      description: The allowed difference in time where the two dates are considered equal
    content.vb: Public Shared Sub Equal(expected As DateTimeOffset, actual As DateTimeOffset, precision As TimeSpan)
  overload: v3.1.0.1:Xunit.Assert.Equal*
- uid: v3.1.0.1:Xunit.Assert.NotEqual``1(``0[],``0[])
  commentId: M:Xunit.Assert.NotEqual``1(``0[],``0[])
  id: NotEqual``1(``0[],``0[])
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: NotEqual<T>(T[], T[])
  nameWithType: Assert.NotEqual<T>(T[], T[])
  fullName: Xunit.Assert.NotEqual<T>(T[], T[])
  type: Method
  source:
    id: NotEqual
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\EqualityAsserts.cs
    startLine: 533
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that two arrays of un-managed type T are not equal, using Span&lt;T&gt;.SequenceEqual.
  example: []
  syntax:
    content: 'public static void NotEqual<T>(T[] expected, T[] actual) where T : unmanaged, IEquatable<T>'
    parameters:
    - id: expected
      type: '{T}[]'
      description: The expected value
    - id: actual
      type: '{T}[]'
      description: The value to be compared against
    typeParameters:
    - id: T
      description: The type of items whose arrays are to be compared
    content.vb: Public Shared Sub NotEqual(Of T As {Structure, IEquatable(Of T)})(expected As T(), actual As T())
  overload: v3.1.0.1:Xunit.Assert.NotEqual*
  nameWithType.vb: Assert.NotEqual(Of T)(T(), T())
  fullName.vb: Xunit.Assert.NotEqual(Of T)(T(), T())
  name.vb: NotEqual(Of T)(T(), T())
- uid: v3.1.0.1:Xunit.Assert.NotEqual``1(``0,``0)
  commentId: M:Xunit.Assert.NotEqual``1(``0,``0)
  id: NotEqual``1(``0,``0)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: NotEqual<T>(T, T)
  nameWithType: Assert.NotEqual<T>(T, T)
  fullName: Xunit.Assert.NotEqual<T>(T, T)
  type: Method
  source:
    id: NotEqual
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\EqualityAsserts.cs
    startLine: 560
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that two objects are not equal, using a default comparer.
  example: []
  syntax:
    content: public static void NotEqual<T>(T expected, T actual)
    parameters:
    - id: expected
      type: '{T}'
      description: The expected object
    - id: actual
      type: '{T}'
      description: The actual object
    typeParameters:
    - id: T
      description: The type of the objects to be compared
    content.vb: Public Shared Sub NotEqual(Of T)(expected As T, actual As T)
  overload: v3.1.0.1:Xunit.Assert.NotEqual*
  nameWithType.vb: Assert.NotEqual(Of T)(T, T)
  fullName.vb: Xunit.Assert.NotEqual(Of T)(T, T)
  name.vb: NotEqual(Of T)(T, T)
- uid: v3.1.0.1:Xunit.Assert.NotEqual``1(``0,``0,System.Func{``0,``0,System.Boolean})
  commentId: M:Xunit.Assert.NotEqual``1(``0,``0,System.Func{``0,``0,System.Boolean})
  id: NotEqual``1(``0,``0,System.Func{``0,``0,System.Boolean})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: NotEqual<T>(T, T, Func<T, T, bool>)
  nameWithType: Assert.NotEqual<T>(T, T, Func<T, T, bool>)
  fullName: Xunit.Assert.NotEqual<T>(T, T, System.Func<T, T, bool>)
  type: Method
  source:
    id: NotEqual
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\EqualityAsserts.cs
    startLine: 577
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that two objects are not equal, using a custom equality comparer function.
  example: []
  syntax:
    content: public static void NotEqual<T>(T expected, T actual, Func<T, T, bool> comparer)
    parameters:
    - id: expected
      type: '{T}'
      description: The expected object
    - id: actual
      type: '{T}'
      description: The actual object
    - id: comparer
      type: System.Func{{T},{T},System.Boolean}
      description: The comparer used to examine the objects
    typeParameters:
    - id: T
      description: The type of the objects to be compared
    content.vb: Public Shared Sub NotEqual(Of T)(expected As T, actual As T, comparer As Func(Of T, T, Boolean))
  overload: v3.1.0.1:Xunit.Assert.NotEqual*
  nameWithType.vb: Assert.NotEqual(Of T)(T, T, Func(Of T, T, Boolean))
  fullName.vb: Xunit.Assert.NotEqual(Of T)(T, T, System.Func(Of T, T, Boolean))
  name.vb: NotEqual(Of T)(T, T, Func(Of T, T, Boolean))
- uid: v3.1.0.1:Xunit.Assert.NotEqual``1(``0,``0,System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:Xunit.Assert.NotEqual``1(``0,``0,System.Collections.Generic.IEqualityComparer{``0})
  id: NotEqual``1(``0,``0,System.Collections.Generic.IEqualityComparer{``0})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: NotEqual<T>(T, T, IEqualityComparer<T>)
  nameWithType: Assert.NotEqual<T>(T, T, IEqualityComparer<T>)
  fullName: Xunit.Assert.NotEqual<T>(T, T, System.Collections.Generic.IEqualityComparer<T>)
  type: Method
  source:
    id: NotEqual
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\EqualityAsserts.cs
    startLine: 595
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that two objects are not equal, using a custom equality comparer.
  example: []
  syntax:
    content: public static void NotEqual<T>(T expected, T actual, IEqualityComparer<T> comparer)
    parameters:
    - id: expected
      type: '{T}'
      description: The expected object
    - id: actual
      type: '{T}'
      description: The actual object
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{T}}
      description: The comparer used to examine the objects
    typeParameters:
    - id: T
      description: The type of the objects to be compared
    content.vb: Public Shared Sub NotEqual(Of T)(expected As T, actual As T, comparer As IEqualityComparer(Of T))
  overload: v3.1.0.1:Xunit.Assert.NotEqual*
  nameWithType.vb: Assert.NotEqual(Of T)(T, T, IEqualityComparer(Of T))
  fullName.vb: Xunit.Assert.NotEqual(Of T)(T, T, System.Collections.Generic.IEqualityComparer(Of T))
  name.vb: NotEqual(Of T)(T, T, IEqualityComparer(Of T))
- uid: v3.1.0.1:Xunit.Assert.NotEqual(System.Double,System.Double,System.Int32)
  commentId: M:Xunit.Assert.NotEqual(System.Double,System.Double,System.Int32)
  id: NotEqual(System.Double,System.Double,System.Int32)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: NotEqual(double, double, int)
  nameWithType: Assert.NotEqual(double, double, int)
  fullName: Xunit.Assert.NotEqual(double, double, int)
  type: Method
  source:
    id: NotEqual
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\EqualityAsserts.cs
    startLine: 775
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: >-
    Verifies that two <xref href="System.Double" data-throw-if-not-resolved="false"></xref> values are not equal, within the number of decimal

    places given by <code class="paramref">precision</code>.
  example: []
  syntax:
    content: public static void NotEqual(double expected, double actual, int precision)
    parameters:
    - id: expected
      type: System.Double
      description: The expected value
    - id: actual
      type: System.Double
      description: The value to be compared against
    - id: precision
      type: System.Int32
      description: 'The number of decimal places (valid values: 0-15)'
    content.vb: Public Shared Sub NotEqual(expected As Double, actual As Double, precision As Integer)
  overload: v3.1.0.1:Xunit.Assert.NotEqual*
  nameWithType.vb: Assert.NotEqual(Double, Double, Integer)
  fullName.vb: Xunit.Assert.NotEqual(Double, Double, Integer)
  name.vb: NotEqual(Double, Double, Integer)
- uid: v3.1.0.1:Xunit.Assert.NotEqual(System.Double,System.Double,System.Int32,System.MidpointRounding)
  commentId: M:Xunit.Assert.NotEqual(System.Double,System.Double,System.Int32,System.MidpointRounding)
  id: NotEqual(System.Double,System.Double,System.Int32,System.MidpointRounding)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: NotEqual(double, double, int, MidpointRounding)
  nameWithType: Assert.NotEqual(double, double, int, MidpointRounding)
  fullName: Xunit.Assert.NotEqual(double, double, int, System.MidpointRounding)
  type: Method
  source:
    id: NotEqual
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\EqualityAsserts.cs
    startLine: 800
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: >-
    Verifies that two <xref href="System.Double" data-throw-if-not-resolved="false"></xref> values are not equal, within the number of decimal

    places given by <code class="paramref">precision</code>. The values are rounded before comparison.

    The rounding method to use is given by <code class="paramref">rounding</code>
  example: []
  syntax:
    content: public static void NotEqual(double expected, double actual, int precision, MidpointRounding rounding)
    parameters:
    - id: expected
      type: System.Double
      description: The expected value
    - id: actual
      type: System.Double
      description: The value to be compared against
    - id: precision
      type: System.Int32
      description: 'The number of decimal places (valid values: 0-15)'
    - id: rounding
      type: System.MidpointRounding
      description: Rounding method to use to process a number that is midway between two numbers
    content.vb: Public Shared Sub NotEqual(expected As Double, actual As Double, precision As Integer, rounding As MidpointRounding)
  overload: v3.1.0.1:Xunit.Assert.NotEqual*
  nameWithType.vb: Assert.NotEqual(Double, Double, Integer, MidpointRounding)
  fullName.vb: Xunit.Assert.NotEqual(Double, Double, Integer, System.MidpointRounding)
  name.vb: NotEqual(Double, Double, Integer, MidpointRounding)
- uid: v3.1.0.1:Xunit.Assert.NotEqual(System.Double,System.Double,System.Double)
  commentId: M:Xunit.Assert.NotEqual(System.Double,System.Double,System.Double)
  id: NotEqual(System.Double,System.Double,System.Double)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: NotEqual(double, double, double)
  nameWithType: Assert.NotEqual(double, double, double)
  fullName: Xunit.Assert.NotEqual(double, double, double)
  type: Method
  source:
    id: NotEqual
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\EqualityAsserts.cs
    startLine: 824
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: >-
    Verifies that two <xref href="System.Double" data-throw-if-not-resolved="false"></xref> values are not equal, within the tolerance given by

    <code class="paramref">tolerance</code> (positive or negative).
  example: []
  syntax:
    content: public static void NotEqual(double expected, double actual, double tolerance)
    parameters:
    - id: expected
      type: System.Double
      description: The expected value
    - id: actual
      type: System.Double
      description: The value to be compared against
    - id: tolerance
      type: System.Double
      description: The allowed difference between values
    content.vb: Public Shared Sub NotEqual(expected As Double, actual As Double, tolerance As Double)
  overload: v3.1.0.1:Xunit.Assert.NotEqual*
  nameWithType.vb: Assert.NotEqual(Double, Double, Double)
  fullName.vb: Xunit.Assert.NotEqual(Double, Double, Double)
  name.vb: NotEqual(Double, Double, Double)
- uid: v3.1.0.1:Xunit.Assert.NotEqual(System.Single,System.Single,System.Int32)
  commentId: M:Xunit.Assert.NotEqual(System.Single,System.Single,System.Int32)
  id: NotEqual(System.Single,System.Single,System.Int32)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: NotEqual(float, float, int)
  nameWithType: Assert.NotEqual(float, float, int)
  fullName: Xunit.Assert.NotEqual(float, float, int)
  type: Method
  source:
    id: NotEqual
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\EqualityAsserts.cs
    startLine: 847
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: >-
    Verifies that two <xref href="System.Single" data-throw-if-not-resolved="false"></xref> values are not equal, within the number of decimal

    places given by <code class="paramref">precision</code>.
  example: []
  syntax:
    content: public static void NotEqual(float expected, float actual, int precision)
    parameters:
    - id: expected
      type: System.Single
      description: The expected value
    - id: actual
      type: System.Single
      description: The value to be compared against
    - id: precision
      type: System.Int32
      description: 'The number of decimal places (valid values: 0-15)'
    content.vb: Public Shared Sub NotEqual(expected As Single, actual As Single, precision As Integer)
  overload: v3.1.0.1:Xunit.Assert.NotEqual*
  nameWithType.vb: Assert.NotEqual(Single, Single, Integer)
  fullName.vb: Xunit.Assert.NotEqual(Single, Single, Integer)
  name.vb: NotEqual(Single, Single, Integer)
- uid: v3.1.0.1:Xunit.Assert.NotEqual(System.Single,System.Single,System.Int32,System.MidpointRounding)
  commentId: M:Xunit.Assert.NotEqual(System.Single,System.Single,System.Int32,System.MidpointRounding)
  id: NotEqual(System.Single,System.Single,System.Int32,System.MidpointRounding)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: NotEqual(float, float, int, MidpointRounding)
  nameWithType: Assert.NotEqual(float, float, int, MidpointRounding)
  fullName: Xunit.Assert.NotEqual(float, float, int, System.MidpointRounding)
  type: Method
  source:
    id: NotEqual
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\EqualityAsserts.cs
    startLine: 872
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: >-
    Verifies that two <xref href="System.Single" data-throw-if-not-resolved="false"></xref> values are not equal, within the number of decimal

    places given by <code class="paramref">precision</code>. The values are rounded before comparison.

    The rounding method to use is given by <code class="paramref">rounding</code>
  example: []
  syntax:
    content: public static void NotEqual(float expected, float actual, int precision, MidpointRounding rounding)
    parameters:
    - id: expected
      type: System.Single
      description: The expected value
    - id: actual
      type: System.Single
      description: The value to be compared against
    - id: precision
      type: System.Int32
      description: 'The number of decimal places (valid values: 0-15)'
    - id: rounding
      type: System.MidpointRounding
      description: Rounding method to use to process a number that is midway between two numbers
    content.vb: Public Shared Sub NotEqual(expected As Single, actual As Single, precision As Integer, rounding As MidpointRounding)
  overload: v3.1.0.1:Xunit.Assert.NotEqual*
  nameWithType.vb: Assert.NotEqual(Single, Single, Integer, MidpointRounding)
  fullName.vb: Xunit.Assert.NotEqual(Single, Single, Integer, System.MidpointRounding)
  name.vb: NotEqual(Single, Single, Integer, MidpointRounding)
- uid: v3.1.0.1:Xunit.Assert.NotEqual(System.Single,System.Single,System.Single)
  commentId: M:Xunit.Assert.NotEqual(System.Single,System.Single,System.Single)
  id: NotEqual(System.Single,System.Single,System.Single)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: NotEqual(float, float, float)
  nameWithType: Assert.NotEqual(float, float, float)
  fullName: Xunit.Assert.NotEqual(float, float, float)
  type: Method
  source:
    id: NotEqual
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\EqualityAsserts.cs
    startLine: 896
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: >-
    Verifies that two <xref href="System.Single" data-throw-if-not-resolved="false"></xref> values are not equal, within the tolerance given by

    <code class="paramref">tolerance</code> (positive or negative).
  example: []
  syntax:
    content: public static void NotEqual(float expected, float actual, float tolerance)
    parameters:
    - id: expected
      type: System.Single
      description: The expected value
    - id: actual
      type: System.Single
      description: The value to be compared against
    - id: tolerance
      type: System.Single
      description: The allowed difference between values
    content.vb: Public Shared Sub NotEqual(expected As Single, actual As Single, tolerance As Single)
  overload: v3.1.0.1:Xunit.Assert.NotEqual*
  nameWithType.vb: Assert.NotEqual(Single, Single, Single)
  fullName.vb: Xunit.Assert.NotEqual(Single, Single, Single)
  name.vb: NotEqual(Single, Single, Single)
- uid: v3.1.0.1:Xunit.Assert.NotEqual(System.Decimal,System.Decimal,System.Int32)
  commentId: M:Xunit.Assert.NotEqual(System.Decimal,System.Decimal,System.Int32)
  id: NotEqual(System.Decimal,System.Decimal,System.Int32)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: NotEqual(decimal, decimal, int)
  nameWithType: Assert.NotEqual(decimal, decimal, int)
  fullName: Xunit.Assert.NotEqual(decimal, decimal, int)
  type: Method
  source:
    id: NotEqual
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\EqualityAsserts.cs
    startLine: 919
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: >-
    Verifies that two <xref href="System.Decimal" data-throw-if-not-resolved="false"></xref> values are not equal, within the number of decimal

    places given by <code class="paramref">precision</code>.
  example: []
  syntax:
    content: public static void NotEqual(decimal expected, decimal actual, int precision)
    parameters:
    - id: expected
      type: System.Decimal
      description: The expected value
    - id: actual
      type: System.Decimal
      description: The value to be compared against
    - id: precision
      type: System.Int32
      description: 'The number of decimal places (valid values: 0-28)'
    content.vb: Public Shared Sub NotEqual(expected As Decimal, actual As Decimal, precision As Integer)
  overload: v3.1.0.1:Xunit.Assert.NotEqual*
  nameWithType.vb: Assert.NotEqual(Decimal, Decimal, Integer)
  fullName.vb: Xunit.Assert.NotEqual(Decimal, Decimal, Integer)
  name.vb: NotEqual(Decimal, Decimal, Integer)
- uid: v3.1.0.1:Xunit.Assert.NotStrictEqual``1(``0,``0)
  commentId: M:Xunit.Assert.NotStrictEqual``1(``0,``0)
  id: NotStrictEqual``1(``0,``0)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: NotStrictEqual<T>(T, T)
  nameWithType: Assert.NotStrictEqual<T>(T, T)
  fullName: Xunit.Assert.NotStrictEqual<T>(T, T)
  type: Method
  source:
    id: NotStrictEqual
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\EqualityAsserts.cs
    startLine: 940
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that two objects are strictly not equal, using the type's default comparer.
  example: []
  syntax:
    content: public static void NotStrictEqual<T>(T expected, T actual)
    parameters:
    - id: expected
      type: '{T}'
      description: The expected object
    - id: actual
      type: '{T}'
      description: The actual object
    typeParameters:
    - id: T
      description: The type of the objects to be compared
    content.vb: Public Shared Sub NotStrictEqual(Of T)(expected As T, actual As T)
  overload: v3.1.0.1:Xunit.Assert.NotStrictEqual*
  nameWithType.vb: Assert.NotStrictEqual(Of T)(T, T)
  fullName.vb: Xunit.Assert.NotStrictEqual(Of T)(T, T)
  name.vb: NotStrictEqual(Of T)(T, T)
- uid: v3.1.0.1:Xunit.Assert.StrictEqual``1(``0,``0)
  commentId: M:Xunit.Assert.StrictEqual``1(``0,``0)
  id: StrictEqual``1(``0,``0)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: StrictEqual<T>(T, T)
  nameWithType: Assert.StrictEqual<T>(T, T)
  fullName: Xunit.Assert.StrictEqual<T>(T, T)
  type: Method
  source:
    id: StrictEqual
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\EqualityAsserts.cs
    startLine: 964
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that two objects are strictly equal, using the type's default comparer.
  example: []
  syntax:
    content: public static void StrictEqual<T>(T expected, T actual)
    parameters:
    - id: expected
      type: '{T}'
      description: The expected value
    - id: actual
      type: '{T}'
      description: The value to be compared against
    typeParameters:
    - id: T
      description: The type of the objects to be compared
    content.vb: Public Shared Sub StrictEqual(Of T)(expected As T, actual As T)
  overload: v3.1.0.1:Xunit.Assert.StrictEqual*
  nameWithType.vb: Assert.StrictEqual(Of T)(T, T)
  fullName.vb: Xunit.Assert.StrictEqual(Of T)(T, T)
  name.vb: StrictEqual(Of T)(T, T)
- uid: v3.1.0.1:Xunit.Assert.Equivalent(System.Object,System.Object,System.Boolean)
  commentId: M:Xunit.Assert.Equivalent(System.Object,System.Object,System.Boolean)
  id: Equivalent(System.Object,System.Object,System.Boolean)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Equivalent(object?, object?, bool)
  nameWithType: Assert.Equivalent(object?, object?, bool)
  fullName: Xunit.Assert.Equivalent(object?, object?, bool)
  type: Method
  source:
    id: Equivalent
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\EquivalenceAsserts.cs
    startLine: 31
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: >-
    Verifies that two objects are equivalent, using a default comparer. This comparison is done

    without regard to type, and only inspects public property and field values for individual

    equality. Deep equivalence tests (meaning, property or fields which are themselves complex

    types) are supported. With strict mode off, object comparison allows <code class="paramref">actual</code>

    to have extra public members that aren't part of <code class="paramref">expected</code>, and collection

    comparison allows <code class="paramref">actual</code> to have more data in it than is present in

    <code class="paramref">expected</code>; with strict mode on, those rules are tightened to require exact

    member list (for objects) or data (for collections).
  example: []
  syntax:
    content: public static void Equivalent(object? expected, object? actual, bool strict = false)
    parameters:
    - id: expected
      type: System.Object
      description: The expected value
    - id: actual
      type: System.Object
      description: The actual value
    - id: strict
      type: System.Boolean
      description: A flag which enables strict comparison mode
    content.vb: Public Shared Sub Equivalent(expected As Object, actual As Object, strict As Boolean = False)
  overload: v3.1.0.1:Xunit.Assert.Equivalent*
  nameWithType.vb: Assert.Equivalent(Object, Object, Boolean)
  fullName.vb: Xunit.Assert.Equivalent(Object, Object, Boolean)
  name.vb: Equivalent(Object, Object, Boolean)
- uid: v3.1.0.1:Xunit.Assert.Raises(System.Action{System.Action},System.Action{System.Action},System.Action)
  commentId: M:Xunit.Assert.Raises(System.Action{System.Action},System.Action{System.Action},System.Action)
  id: Raises(System.Action{System.Action},System.Action{System.Action},System.Action)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Raises(Action<Action>, Action<Action>, Action)
  nameWithType: Assert.Raises(Action<Action>, Action<Action>, Action)
  fullName: Xunit.Assert.Raises(System.Action<System.Action>, System.Action<System.Action>, System.Action)
  type: Method
  source:
    id: Raises
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\EventAsserts.cs
    startLine: 41
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that an event is raised.
  example: []
  syntax:
    content: public static void Raises(Action<Action> attach, Action<Action> detach, Action testCode)
    parameters:
    - id: attach
      type: System.Action{System.Action}
      description: Code to attach the event handler
    - id: detach
      type: System.Action{System.Action}
      description: Code to detach the event handler
    - id: testCode
      type: System.Action
      description: A delegate to the code to be tested
    content.vb: Public Shared Sub Raises(attach As Action(Of Action), detach As Action(Of Action), testCode As Action)
  overload: v3.1.0.1:Xunit.Assert.Raises*
  exceptions:
  - type: Xunit.Sdk.RaisesException
    commentId: T:Xunit.Sdk.RaisesException
    description: Thrown when the expected event was not raised.
  nameWithType.vb: Assert.Raises(Action(Of Action), Action(Of Action), Action)
  fullName.vb: Xunit.Assert.Raises(System.Action(Of System.Action), System.Action(Of System.Action), System.Action)
  name.vb: Raises(Action(Of Action), Action(Of Action), Action)
- uid: v3.1.0.1:Xunit.Assert.Raises``1(System.Action{System.Action{``0}},System.Action{System.Action{``0}},System.Action)
  commentId: M:Xunit.Assert.Raises``1(System.Action{System.Action{``0}},System.Action{System.Action{``0}},System.Action)
  id: Raises``1(System.Action{System.Action{``0}},System.Action{System.Action{``0}},System.Action)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Raises<T>(Action<Action<T>>, Action<Action<T>>, Action)
  nameWithType: Assert.Raises<T>(Action<Action<T>>, Action<Action<T>>, Action)
  fullName: Xunit.Assert.Raises<T>(System.Action<System.Action<T>>, System.Action<System.Action<T>>, System.Action)
  type: Method
  source:
    id: Raises
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\EventAsserts.cs
    startLine: 59
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that an event with the exact event args is raised.
  example: []
  syntax:
    content: public static Assert.RaisedEvent<T> Raises<T>(Action<Action<T>> attach, Action<Action<T>> detach, Action testCode)
    parameters:
    - id: attach
      type: System.Action{System.Action{{T}}}
      description: Code to attach the event handler
    - id: detach
      type: System.Action{System.Action{{T}}}
      description: Code to detach the event handler
    - id: testCode
      type: System.Action
      description: A delegate to the code to be tested
    typeParameters:
    - id: T
      description: The type of the event arguments to expect
    return:
      type: Xunit.Assert.RaisedEvent{{T}}
      description: The event sender and arguments wrapped in an object
    content.vb: Public Shared Function Raises(Of T)(attach As Action(Of Action(Of T)), detach As Action(Of Action(Of T)), testCode As Action) As Assert.RaisedEvent(Of T)
  overload: v3.1.0.1:Xunit.Assert.Raises*
  exceptions:
  - type: Xunit.Sdk.RaisesException
    commentId: T:Xunit.Sdk.RaisesException
    description: Thrown when the expected event was not raised.
  nameWithType.vb: Assert.Raises(Of T)(Action(Of Action(Of T)), Action(Of Action(Of T)), Action)
  fullName.vb: Xunit.Assert.Raises(Of T)(System.Action(Of System.Action(Of T)), System.Action(Of System.Action(Of T)), System.Action)
  name.vb: Raises(Of T)(Action(Of Action(Of T)), Action(Of Action(Of T)), Action)
- uid: v3.1.0.1:Xunit.Assert.Raises``1(System.Action{System.EventHandler{``0}},System.Action{System.EventHandler{``0}},System.Action)
  commentId: M:Xunit.Assert.Raises``1(System.Action{System.EventHandler{``0}},System.Action{System.EventHandler{``0}},System.Action)
  id: Raises``1(System.Action{System.EventHandler{``0}},System.Action{System.EventHandler{``0}},System.Action)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Raises<T>(Action<EventHandler<T>>, Action<EventHandler<T>>, Action)
  nameWithType: Assert.Raises<T>(Action<EventHandler<T>>, Action<EventHandler<T>>, Action)
  fullName: Xunit.Assert.Raises<T>(System.Action<System.EventHandler<T>>, System.Action<System.EventHandler<T>>, System.Action)
  type: Method
  source:
    id: Raises
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\EventAsserts.cs
    startLine: 84
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that an event with the exact event args is raised.
  example: []
  syntax:
    content: public static Assert.RaisedEvent<T> Raises<T>(Action<EventHandler<T>> attach, Action<EventHandler<T>> detach, Action testCode)
    parameters:
    - id: attach
      type: System.Action{System.EventHandler{{T}}}
      description: Code to attach the event handler
    - id: detach
      type: System.Action{System.EventHandler{{T}}}
      description: Code to detach the event handler
    - id: testCode
      type: System.Action
      description: A delegate to the code to be tested
    typeParameters:
    - id: T
      description: The type of the event arguments to expect
    return:
      type: Xunit.Assert.RaisedEvent{{T}}
      description: The event sender and arguments wrapped in an object
    content.vb: Public Shared Function Raises(Of T)(attach As Action(Of EventHandler(Of T)), detach As Action(Of EventHandler(Of T)), testCode As Action) As Assert.RaisedEvent(Of T)
  overload: v3.1.0.1:Xunit.Assert.Raises*
  exceptions:
  - type: Xunit.Sdk.RaisesException
    commentId: T:Xunit.Sdk.RaisesException
    description: Thrown when the expected event was not raised.
  nameWithType.vb: Assert.Raises(Of T)(Action(Of EventHandler(Of T)), Action(Of EventHandler(Of T)), Action)
  fullName.vb: Xunit.Assert.Raises(Of T)(System.Action(Of System.EventHandler(Of T)), System.Action(Of System.EventHandler(Of T)), System.Action)
  name.vb: Raises(Of T)(Action(Of EventHandler(Of T)), Action(Of EventHandler(Of T)), Action)
- uid: v3.1.0.1:Xunit.Assert.Raises``1(System.Func{Xunit.Assert.RaisedEvent{``0}},System.Action,System.Action,System.Action)
  commentId: M:Xunit.Assert.Raises``1(System.Func{Xunit.Assert.RaisedEvent{``0}},System.Action,System.Action,System.Action)
  id: Raises``1(System.Func{Xunit.Assert.RaisedEvent{``0}},System.Action,System.Action,System.Action)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Raises<T>(Func<RaisedEvent<T>?>, Action, Action, Action)
  nameWithType: Assert.Raises<T>(Func<Assert.RaisedEvent<T>?>, Action, Action, Action)
  fullName: Xunit.Assert.Raises<T>(System.Func<Xunit.Assert.RaisedEvent<T>?>, System.Action, System.Action, System.Action)
  type: Method
  source:
    id: Raises
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\EventAsserts.cs
    startLine: 110
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that an event with the exact event args is raised.
  example: []
  syntax:
    content: public static Assert.RaisedEvent<T> Raises<T>(Func<Assert.RaisedEvent<T>?> handler, Action attach, Action detach, Action testCode)
    parameters:
    - id: handler
      type: System.Func{Xunit.Assert.RaisedEvent{{T}}}
      description: Code returning the raised event
    - id: attach
      type: System.Action
      description: Code to attach the event handler
    - id: detach
      type: System.Action
      description: Code to detach the event handler
    - id: testCode
      type: System.Action
      description: A delegate to the code to be tested
    typeParameters:
    - id: T
      description: The type of the event arguments to expect
    return:
      type: Xunit.Assert.RaisedEvent{{T}}
      description: The event sender and arguments wrapped in an object
    content.vb: Public Shared Function Raises(Of T)(handler As Func(Of Assert.RaisedEvent(Of T)), attach As Action, detach As Action, testCode As Action) As Assert.RaisedEvent(Of T)
  overload: v3.1.0.1:Xunit.Assert.Raises*
  exceptions:
  - type: Xunit.Sdk.RaisesException
    commentId: T:Xunit.Sdk.RaisesException
    description: Thrown when the expected event was not raised.
  nameWithType.vb: Assert.Raises(Of T)(Func(Of Assert.RaisedEvent(Of T)), Action, Action, Action)
  fullName.vb: Xunit.Assert.Raises(Of T)(System.Func(Of Xunit.Assert.RaisedEvent(Of T)), System.Action, System.Action, System.Action)
  name.vb: Raises(Of T)(Func(Of RaisedEvent(Of T)), Action, Action, Action)
- uid: v3.1.0.1:Xunit.Assert.RaisesAny(System.Action{System.EventHandler},System.Action{System.EventHandler},System.Action)
  commentId: M:Xunit.Assert.RaisesAny(System.Action{System.EventHandler},System.Action{System.EventHandler},System.Action)
  id: RaisesAny(System.Action{System.EventHandler},System.Action{System.EventHandler},System.Action)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: RaisesAny(Action<EventHandler>, Action<EventHandler>, Action)
  nameWithType: Assert.RaisesAny(Action<EventHandler>, Action<EventHandler>, Action)
  fullName: Xunit.Assert.RaisesAny(System.Action<System.EventHandler>, System.Action<System.EventHandler>, System.Action)
  type: Method
  source:
    id: RaisesAny
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\EventAsserts.cs
    startLine: 139
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that an event is raised.
  example: []
  syntax:
    content: public static Assert.RaisedEvent<EventArgs> RaisesAny(Action<EventHandler> attach, Action<EventHandler> detach, Action testCode)
    parameters:
    - id: attach
      type: System.Action{System.EventHandler}
      description: Code to attach the event handler
    - id: detach
      type: System.Action{System.EventHandler}
      description: Code to detach the event handler
    - id: testCode
      type: System.Action
      description: A delegate to the code to be tested
    return:
      type: Xunit.Assert.RaisedEvent{System.EventArgs}
      description: The event sender and arguments wrapped in an object
    content.vb: Public Shared Function RaisesAny(attach As Action(Of EventHandler), detach As Action(Of EventHandler), testCode As Action) As Assert.RaisedEvent(Of EventArgs)
  overload: v3.1.0.1:Xunit.Assert.RaisesAny*
  exceptions:
  - type: Xunit.Sdk.RaisesException
    commentId: T:Xunit.Sdk.RaisesException
    description: Thrown when the expected event was not raised.
  nameWithType.vb: Assert.RaisesAny(Action(Of EventHandler), Action(Of EventHandler), Action)
  fullName.vb: Xunit.Assert.RaisesAny(System.Action(Of System.EventHandler), System.Action(Of System.EventHandler), System.Action)
  name.vb: RaisesAny(Action(Of EventHandler), Action(Of EventHandler), Action)
- uid: v3.1.0.1:Xunit.Assert.RaisesAny``1(System.Action{System.Action{``0}},System.Action{System.Action{``0}},System.Action)
  commentId: M:Xunit.Assert.RaisesAny``1(System.Action{System.Action{``0}},System.Action{System.Action{``0}},System.Action)
  id: RaisesAny``1(System.Action{System.Action{``0}},System.Action{System.Action{``0}},System.Action)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: RaisesAny<T>(Action<Action<T>>, Action<Action<T>>, Action)
  nameWithType: Assert.RaisesAny<T>(Action<Action<T>>, Action<Action<T>>, Action)
  fullName: Xunit.Assert.RaisesAny<T>(System.Action<System.Action<T>>, System.Action<System.Action<T>>, System.Action)
  type: Method
  source:
    id: RaisesAny
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\EventAsserts.cs
    startLine: 161
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that an event with the exact or a derived event args is raised.
  example: []
  syntax:
    content: public static Assert.RaisedEvent<T> RaisesAny<T>(Action<Action<T>> attach, Action<Action<T>> detach, Action testCode)
    parameters:
    - id: attach
      type: System.Action{System.Action{{T}}}
      description: Code to attach the event handler
    - id: detach
      type: System.Action{System.Action{{T}}}
      description: Code to detach the event handler
    - id: testCode
      type: System.Action
      description: A delegate to the code to be tested
    typeParameters:
    - id: T
      description: The type of the event arguments to expect
    return:
      type: Xunit.Assert.RaisedEvent{{T}}
      description: The event sender and arguments wrapped in an object
    content.vb: Public Shared Function RaisesAny(Of T)(attach As Action(Of Action(Of T)), detach As Action(Of Action(Of T)), testCode As Action) As Assert.RaisedEvent(Of T)
  overload: v3.1.0.1:Xunit.Assert.RaisesAny*
  exceptions:
  - type: Xunit.Sdk.RaisesException
    commentId: T:Xunit.Sdk.RaisesException
    description: Thrown when the expected event was not raised.
  nameWithType.vb: Assert.RaisesAny(Of T)(Action(Of Action(Of T)), Action(Of Action(Of T)), Action)
  fullName.vb: Xunit.Assert.RaisesAny(Of T)(System.Action(Of System.Action(Of T)), System.Action(Of System.Action(Of T)), System.Action)
  name.vb: RaisesAny(Of T)(Action(Of Action(Of T)), Action(Of Action(Of T)), Action)
- uid: v3.1.0.1:Xunit.Assert.RaisesAny``1(System.Action{System.EventHandler{``0}},System.Action{System.EventHandler{``0}},System.Action)
  commentId: M:Xunit.Assert.RaisesAny``1(System.Action{System.EventHandler{``0}},System.Action{System.EventHandler{``0}},System.Action)
  id: RaisesAny``1(System.Action{System.EventHandler{``0}},System.Action{System.EventHandler{``0}},System.Action)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: RaisesAny<T>(Action<EventHandler<T>>, Action<EventHandler<T>>, Action)
  nameWithType: Assert.RaisesAny<T>(Action<EventHandler<T>>, Action<EventHandler<T>>, Action)
  fullName: Xunit.Assert.RaisesAny<T>(System.Action<System.EventHandler<T>>, System.Action<System.EventHandler<T>>, System.Action)
  type: Method
  source:
    id: RaisesAny
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\EventAsserts.cs
    startLine: 183
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that an event with the exact or a derived event args is raised.
  example: []
  syntax:
    content: public static Assert.RaisedEvent<T> RaisesAny<T>(Action<EventHandler<T>> attach, Action<EventHandler<T>> detach, Action testCode)
    parameters:
    - id: attach
      type: System.Action{System.EventHandler{{T}}}
      description: Code to attach the event handler
    - id: detach
      type: System.Action{System.EventHandler{{T}}}
      description: Code to detach the event handler
    - id: testCode
      type: System.Action
      description: A delegate to the code to be tested
    typeParameters:
    - id: T
      description: The type of the event arguments to expect
    return:
      type: Xunit.Assert.RaisedEvent{{T}}
      description: The event sender and arguments wrapped in an object
    content.vb: Public Shared Function RaisesAny(Of T)(attach As Action(Of EventHandler(Of T)), detach As Action(Of EventHandler(Of T)), testCode As Action) As Assert.RaisedEvent(Of T)
  overload: v3.1.0.1:Xunit.Assert.RaisesAny*
  exceptions:
  - type: Xunit.Sdk.RaisesException
    commentId: T:Xunit.Sdk.RaisesException
    description: Thrown when the expected event was not raised.
  nameWithType.vb: Assert.RaisesAny(Of T)(Action(Of EventHandler(Of T)), Action(Of EventHandler(Of T)), Action)
  fullName.vb: Xunit.Assert.RaisesAny(Of T)(System.Action(Of System.EventHandler(Of T)), System.Action(Of System.EventHandler(Of T)), System.Action)
  name.vb: RaisesAny(Of T)(Action(Of EventHandler(Of T)), Action(Of EventHandler(Of T)), Action)
- uid: v3.1.0.1:Xunit.Assert.RaisesAnyAsync(System.Action{System.EventHandler},System.Action{System.EventHandler},System.Func{System.Threading.Tasks.Task})
  commentId: M:Xunit.Assert.RaisesAnyAsync(System.Action{System.EventHandler},System.Action{System.EventHandler},System.Func{System.Threading.Tasks.Task})
  id: RaisesAnyAsync(System.Action{System.EventHandler},System.Action{System.EventHandler},System.Func{System.Threading.Tasks.Task})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: RaisesAnyAsync(Action<EventHandler>, Action<EventHandler>, Func<Task>)
  nameWithType: Assert.RaisesAnyAsync(Action<EventHandler>, Action<EventHandler>, Func<Task>)
  fullName: Xunit.Assert.RaisesAnyAsync(System.Action<System.EventHandler>, System.Action<System.EventHandler>, System.Func<System.Threading.Tasks.Task>)
  type: Method
  source:
    id: RaisesAnyAsync
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\EventAsserts.cs
    startLine: 204
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that an event is raised.
  example: []
  syntax:
    content: public static Task<Assert.RaisedEvent<EventArgs>> RaisesAnyAsync(Action<EventHandler> attach, Action<EventHandler> detach, Func<Task> testCode)
    parameters:
    - id: attach
      type: System.Action{System.EventHandler}
      description: Code to attach the event handler
    - id: detach
      type: System.Action{System.EventHandler}
      description: Code to detach the event handler
    - id: testCode
      type: System.Func{System.Threading.Tasks.Task}
      description: A delegate to the code to be tested
    return:
      type: System.Threading.Tasks.Task{Xunit.Assert.RaisedEvent{System.EventArgs}}
      description: The event sender and arguments wrapped in an object
    content.vb: Public Shared Function RaisesAnyAsync(attach As Action(Of EventHandler), detach As Action(Of EventHandler), testCode As Func(Of Task)) As Task(Of Assert.RaisedEvent(Of EventArgs))
  overload: v3.1.0.1:Xunit.Assert.RaisesAnyAsync*
  exceptions:
  - type: Xunit.Sdk.RaisesException
    commentId: T:Xunit.Sdk.RaisesException
    description: Thrown when the expected event was not raised.
  nameWithType.vb: Assert.RaisesAnyAsync(Action(Of EventHandler), Action(Of EventHandler), Func(Of Task))
  fullName.vb: Xunit.Assert.RaisesAnyAsync(System.Action(Of System.EventHandler), System.Action(Of System.EventHandler), System.Func(Of System.Threading.Tasks.Task))
  name.vb: RaisesAnyAsync(Action(Of EventHandler), Action(Of EventHandler), Func(Of Task))
- uid: v3.1.0.1:Xunit.Assert.RaisesAnyAsync``1(System.Action{System.Action{``0}},System.Action{System.Action{``0}},System.Func{System.Threading.Tasks.Task})
  commentId: M:Xunit.Assert.RaisesAnyAsync``1(System.Action{System.Action{``0}},System.Action{System.Action{``0}},System.Func{System.Threading.Tasks.Task})
  id: RaisesAnyAsync``1(System.Action{System.Action{``0}},System.Action{System.Action{``0}},System.Func{System.Threading.Tasks.Task})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: RaisesAnyAsync<T>(Action<Action<T>>, Action<Action<T>>, Func<Task>)
  nameWithType: Assert.RaisesAnyAsync<T>(Action<Action<T>>, Action<Action<T>>, Func<Task>)
  fullName: Xunit.Assert.RaisesAnyAsync<T>(System.Action<System.Action<T>>, System.Action<System.Action<T>>, System.Func<System.Threading.Tasks.Task>)
  type: Method
  source:
    id: RaisesAnyAsync
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\EventAsserts.cs
    startLine: 226
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that an event with the exact or a derived event args is raised.
  example: []
  syntax:
    content: public static Task<Assert.RaisedEvent<T>> RaisesAnyAsync<T>(Action<Action<T>> attach, Action<Action<T>> detach, Func<Task> testCode)
    parameters:
    - id: attach
      type: System.Action{System.Action{{T}}}
      description: Code to attach the event handler
    - id: detach
      type: System.Action{System.Action{{T}}}
      description: Code to detach the event handler
    - id: testCode
      type: System.Func{System.Threading.Tasks.Task}
      description: A delegate to the code to be tested
    typeParameters:
    - id: T
      description: The type of the event arguments to expect
    return:
      type: System.Threading.Tasks.Task{Xunit.Assert.RaisedEvent{{T}}}
      description: The event sender and arguments wrapped in an object
    content.vb: Public Shared Function RaisesAnyAsync(Of T)(attach As Action(Of Action(Of T)), detach As Action(Of Action(Of T)), testCode As Func(Of Task)) As Task(Of Assert.RaisedEvent(Of T))
  overload: v3.1.0.1:Xunit.Assert.RaisesAnyAsync*
  exceptions:
  - type: Xunit.Sdk.RaisesException
    commentId: T:Xunit.Sdk.RaisesException
    description: Thrown when the expected event was not raised.
  nameWithType.vb: Assert.RaisesAnyAsync(Of T)(Action(Of Action(Of T)), Action(Of Action(Of T)), Func(Of Task))
  fullName.vb: Xunit.Assert.RaisesAnyAsync(Of T)(System.Action(Of System.Action(Of T)), System.Action(Of System.Action(Of T)), System.Func(Of System.Threading.Tasks.Task))
  name.vb: RaisesAnyAsync(Of T)(Action(Of Action(Of T)), Action(Of Action(Of T)), Func(Of Task))
- uid: v3.1.0.1:Xunit.Assert.RaisesAnyAsync``1(System.Action{System.EventHandler{``0}},System.Action{System.EventHandler{``0}},System.Func{System.Threading.Tasks.Task})
  commentId: M:Xunit.Assert.RaisesAnyAsync``1(System.Action{System.EventHandler{``0}},System.Action{System.EventHandler{``0}},System.Func{System.Threading.Tasks.Task})
  id: RaisesAnyAsync``1(System.Action{System.EventHandler{``0}},System.Action{System.EventHandler{``0}},System.Func{System.Threading.Tasks.Task})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: RaisesAnyAsync<T>(Action<EventHandler<T>>, Action<EventHandler<T>>, Func<Task>)
  nameWithType: Assert.RaisesAnyAsync<T>(Action<EventHandler<T>>, Action<EventHandler<T>>, Func<Task>)
  fullName: Xunit.Assert.RaisesAnyAsync<T>(System.Action<System.EventHandler<T>>, System.Action<System.EventHandler<T>>, System.Func<System.Threading.Tasks.Task>)
  type: Method
  source:
    id: RaisesAnyAsync
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\EventAsserts.cs
    startLine: 248
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that an event with the exact or a derived event args is raised.
  example: []
  syntax:
    content: public static Task<Assert.RaisedEvent<T>> RaisesAnyAsync<T>(Action<EventHandler<T>> attach, Action<EventHandler<T>> detach, Func<Task> testCode)
    parameters:
    - id: attach
      type: System.Action{System.EventHandler{{T}}}
      description: Code to attach the event handler
    - id: detach
      type: System.Action{System.EventHandler{{T}}}
      description: Code to detach the event handler
    - id: testCode
      type: System.Func{System.Threading.Tasks.Task}
      description: A delegate to the code to be tested
    typeParameters:
    - id: T
      description: The type of the event arguments to expect
    return:
      type: System.Threading.Tasks.Task{Xunit.Assert.RaisedEvent{{T}}}
      description: The event sender and arguments wrapped in an object
    content.vb: Public Shared Function RaisesAnyAsync(Of T)(attach As Action(Of EventHandler(Of T)), detach As Action(Of EventHandler(Of T)), testCode As Func(Of Task)) As Task(Of Assert.RaisedEvent(Of T))
  overload: v3.1.0.1:Xunit.Assert.RaisesAnyAsync*
  exceptions:
  - type: Xunit.Sdk.RaisesException
    commentId: T:Xunit.Sdk.RaisesException
    description: Thrown when the expected event was not raised.
  nameWithType.vb: Assert.RaisesAnyAsync(Of T)(Action(Of EventHandler(Of T)), Action(Of EventHandler(Of T)), Func(Of Task))
  fullName.vb: Xunit.Assert.RaisesAnyAsync(Of T)(System.Action(Of System.EventHandler(Of T)), System.Action(Of System.EventHandler(Of T)), System.Func(Of System.Threading.Tasks.Task))
  name.vb: RaisesAnyAsync(Of T)(Action(Of EventHandler(Of T)), Action(Of EventHandler(Of T)), Func(Of Task))
- uid: v3.1.0.1:Xunit.Assert.RaisesAsync(System.Action{System.Action},System.Action{System.Action},System.Func{System.Threading.Tasks.Task})
  commentId: M:Xunit.Assert.RaisesAsync(System.Action{System.Action},System.Action{System.Action},System.Func{System.Threading.Tasks.Task})
  id: RaisesAsync(System.Action{System.Action},System.Action{System.Action},System.Func{System.Threading.Tasks.Task})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: RaisesAsync(Action<Action>, Action<Action>, Func<Task>)
  nameWithType: Assert.RaisesAsync(Action<Action>, Action<Action>, Func<Task>)
  fullName: Xunit.Assert.RaisesAsync(System.Action<System.Action>, System.Action<System.Action>, System.Func<System.Threading.Tasks.Task>)
  type: Method
  source:
    id: RaisesAsync
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\EventAsserts.cs
    startLine: 269
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that an event is raised.
  example: []
  syntax:
    content: public static Task RaisesAsync(Action<Action> attach, Action<Action> detach, Func<Task> testCode)
    parameters:
    - id: attach
      type: System.Action{System.Action}
      description: Code to attach the event handler
    - id: detach
      type: System.Action{System.Action}
      description: Code to detach the event handler
    - id: testCode
      type: System.Func{System.Threading.Tasks.Task}
      description: A delegate to the code to be tested
    return:
      type: System.Threading.Tasks.Task
      description: The event sender and arguments wrapped in an object
    content.vb: Public Shared Function RaisesAsync(attach As Action(Of Action), detach As Action(Of Action), testCode As Func(Of Task)) As Task
  overload: v3.1.0.1:Xunit.Assert.RaisesAsync*
  exceptions:
  - type: Xunit.Sdk.RaisesException
    commentId: T:Xunit.Sdk.RaisesException
    description: Thrown when the expected event was not raised.
  nameWithType.vb: Assert.RaisesAsync(Action(Of Action), Action(Of Action), Func(Of Task))
  fullName.vb: Xunit.Assert.RaisesAsync(System.Action(Of System.Action), System.Action(Of System.Action), System.Func(Of System.Threading.Tasks.Task))
  name.vb: RaisesAsync(Action(Of Action), Action(Of Action), Func(Of Task))
- uid: v3.1.0.1:Xunit.Assert.RaisesAsync``1(System.Action{System.Action{``0}},System.Action{System.Action{``0}},System.Func{System.Threading.Tasks.Task})
  commentId: M:Xunit.Assert.RaisesAsync``1(System.Action{System.Action{``0}},System.Action{System.Action{``0}},System.Func{System.Threading.Tasks.Task})
  id: RaisesAsync``1(System.Action{System.Action{``0}},System.Action{System.Action{``0}},System.Func{System.Threading.Tasks.Task})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: RaisesAsync<T>(Action<Action<T>>, Action<Action<T>>, Func<Task>)
  nameWithType: Assert.RaisesAsync<T>(Action<Action<T>>, Action<Action<T>>, Func<Task>)
  fullName: Xunit.Assert.RaisesAsync<T>(System.Action<System.Action<T>>, System.Action<System.Action<T>>, System.Func<System.Threading.Tasks.Task>)
  type: Method
  source:
    id: RaisesAsync
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\EventAsserts.cs
    startLine: 287
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that an event with the exact event args (and not a derived type) is raised.
  example: []
  syntax:
    content: public static Task<Assert.RaisedEvent<T>> RaisesAsync<T>(Action<Action<T>> attach, Action<Action<T>> detach, Func<Task> testCode)
    parameters:
    - id: attach
      type: System.Action{System.Action{{T}}}
      description: Code to attach the event handler
    - id: detach
      type: System.Action{System.Action{{T}}}
      description: Code to detach the event handler
    - id: testCode
      type: System.Func{System.Threading.Tasks.Task}
      description: A delegate to the code to be tested
    typeParameters:
    - id: T
      description: The type of the event arguments to expect
    return:
      type: System.Threading.Tasks.Task{Xunit.Assert.RaisedEvent{{T}}}
      description: The event sender and arguments wrapped in an object
    content.vb: Public Shared Function RaisesAsync(Of T)(attach As Action(Of Action(Of T)), detach As Action(Of Action(Of T)), testCode As Func(Of Task)) As Task(Of Assert.RaisedEvent(Of T))
  overload: v3.1.0.1:Xunit.Assert.RaisesAsync*
  exceptions:
  - type: Xunit.Sdk.RaisesException
    commentId: T:Xunit.Sdk.RaisesException
    description: Thrown when the expected event was not raised.
  nameWithType.vb: Assert.RaisesAsync(Of T)(Action(Of Action(Of T)), Action(Of Action(Of T)), Func(Of Task))
  fullName.vb: Xunit.Assert.RaisesAsync(Of T)(System.Action(Of System.Action(Of T)), System.Action(Of System.Action(Of T)), System.Func(Of System.Threading.Tasks.Task))
  name.vb: RaisesAsync(Of T)(Action(Of Action(Of T)), Action(Of Action(Of T)), Func(Of Task))
- uid: v3.1.0.1:Xunit.Assert.RaisesAsync``1(System.Action{System.EventHandler{``0}},System.Action{System.EventHandler{``0}},System.Func{System.Threading.Tasks.Task})
  commentId: M:Xunit.Assert.RaisesAsync``1(System.Action{System.EventHandler{``0}},System.Action{System.EventHandler{``0}},System.Func{System.Threading.Tasks.Task})
  id: RaisesAsync``1(System.Action{System.EventHandler{``0}},System.Action{System.EventHandler{``0}},System.Func{System.Threading.Tasks.Task})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: RaisesAsync<T>(Action<EventHandler<T>>, Action<EventHandler<T>>, Func<Task>)
  nameWithType: Assert.RaisesAsync<T>(Action<EventHandler<T>>, Action<EventHandler<T>>, Func<Task>)
  fullName: Xunit.Assert.RaisesAsync<T>(System.Action<System.EventHandler<T>>, System.Action<System.EventHandler<T>>, System.Func<System.Threading.Tasks.Task>)
  type: Method
  source:
    id: RaisesAsync
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\EventAsserts.cs
    startLine: 312
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that an event with the exact event args (and not a derived type) is raised.
  example: []
  syntax:
    content: public static Task<Assert.RaisedEvent<T>> RaisesAsync<T>(Action<EventHandler<T>> attach, Action<EventHandler<T>> detach, Func<Task> testCode)
    parameters:
    - id: attach
      type: System.Action{System.EventHandler{{T}}}
      description: Code to attach the event handler
    - id: detach
      type: System.Action{System.EventHandler{{T}}}
      description: Code to detach the event handler
    - id: testCode
      type: System.Func{System.Threading.Tasks.Task}
      description: A delegate to the code to be tested
    typeParameters:
    - id: T
      description: The type of the event arguments to expect
    return:
      type: System.Threading.Tasks.Task{Xunit.Assert.RaisedEvent{{T}}}
      description: The event sender and arguments wrapped in an object
    content.vb: Public Shared Function RaisesAsync(Of T)(attach As Action(Of EventHandler(Of T)), detach As Action(Of EventHandler(Of T)), testCode As Func(Of Task)) As Task(Of Assert.RaisedEvent(Of T))
  overload: v3.1.0.1:Xunit.Assert.RaisesAsync*
  exceptions:
  - type: Xunit.Sdk.RaisesException
    commentId: T:Xunit.Sdk.RaisesException
    description: Thrown when the expected event was not raised.
  nameWithType.vb: Assert.RaisesAsync(Of T)(Action(Of EventHandler(Of T)), Action(Of EventHandler(Of T)), Func(Of Task))
  fullName.vb: Xunit.Assert.RaisesAsync(Of T)(System.Action(Of System.EventHandler(Of T)), System.Action(Of System.EventHandler(Of T)), System.Func(Of System.Threading.Tasks.Task))
  name.vb: RaisesAsync(Of T)(Action(Of EventHandler(Of T)), Action(Of EventHandler(Of T)), Func(Of Task))
- uid: v3.1.0.1:Xunit.Assert.Throws(System.Type,System.Action)
  commentId: M:Xunit.Assert.Throws(System.Type,System.Action)
  id: Throws(System.Type,System.Action)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Throws(Type, Action)
  nameWithType: Assert.Throws(Type, Action)
  fullName: Xunit.Assert.Throws(System.Type, System.Action)
  type: Method
  source:
    id: Throws
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\ExceptionAsserts.cs
    startLine: 55
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that the exact exception is thrown (and not a derived exception type).
  example: []
  syntax:
    content: public static Exception Throws(Type exceptionType, Action testCode)
    parameters:
    - id: exceptionType
      type: System.Type
      description: The type of the exception expected to be thrown
    - id: testCode
      type: System.Action
      description: A delegate to the code to be tested
    return:
      type: System.Exception
      description: The exception that was thrown, when successful
    content.vb: Public Shared Function Throws(exceptionType As Type, testCode As Action) As Exception
  overload: v3.1.0.1:Xunit.Assert.Throws*
- uid: v3.1.0.1:Xunit.Assert.Throws(System.Type,System.Func{System.Object})
  commentId: M:Xunit.Assert.Throws(System.Type,System.Func{System.Object})
  id: Throws(System.Type,System.Func{System.Object})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Throws(Type, Func<object?>)
  nameWithType: Assert.Throws(Type, Func<object?>)
  fullName: Xunit.Assert.Throws(System.Type, System.Func<object?>)
  type: Method
  source:
    id: Throws
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\ExceptionAsserts.cs
    startLine: 67
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: >-
    Verifies that the exact exception is thrown (and not a derived exception type).

    Generally used to test property accessors.
  example: []
  syntax:
    content: public static Exception Throws(Type exceptionType, Func<object?> testCode)
    parameters:
    - id: exceptionType
      type: System.Type
      description: The type of the exception expected to be thrown
    - id: testCode
      type: System.Func{System.Object}
      description: A delegate to the code to be tested
    return:
      type: System.Exception
      description: The exception that was thrown, when successful
    content.vb: Public Shared Function Throws(exceptionType As Type, testCode As Func(Of Object)) As Exception
  overload: v3.1.0.1:Xunit.Assert.Throws*
  nameWithType.vb: Assert.Throws(Type, Func(Of Object))
  fullName.vb: Xunit.Assert.Throws(System.Type, System.Func(Of Object))
  name.vb: Throws(Type, Func(Of Object))
- uid: v3.1.0.1:Xunit.Assert.Throws``1(System.Action)
  commentId: M:Xunit.Assert.Throws``1(System.Action)
  id: Throws``1(System.Action)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Throws<T>(Action)
  nameWithType: Assert.Throws<T>(Action)
  fullName: Xunit.Assert.Throws<T>(System.Action)
  type: Method
  source:
    id: Throws
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\ExceptionAsserts.cs
    startLine: 92
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that the exact exception is thrown (and not a derived exception type).
  example: []
  syntax:
    content: 'public static T Throws<T>(Action testCode) where T : Exception'
    parameters:
    - id: testCode
      type: System.Action
      description: A delegate to the code to be tested
    typeParameters:
    - id: T
      description: The type of the exception expected to be thrown
    return:
      type: '{T}'
      description: The exception that was thrown, when successful
    content.vb: Public Shared Function Throws(Of T As Exception)(testCode As Action) As T
  overload: v3.1.0.1:Xunit.Assert.Throws*
  nameWithType.vb: Assert.Throws(Of T)(Action)
  fullName.vb: Xunit.Assert.Throws(Of T)(System.Action)
  name.vb: Throws(Of T)(Action)
- uid: v3.1.0.1:Xunit.Assert.Throws``1(System.Func{System.Object})
  commentId: M:Xunit.Assert.Throws``1(System.Func{System.Object})
  id: Throws``1(System.Func{System.Object})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Throws<T>(Func<object?>)
  nameWithType: Assert.Throws<T>(Func<object?>)
  fullName: Xunit.Assert.Throws<T>(System.Func<object?>)
  type: Method
  source:
    id: Throws
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\ExceptionAsserts.cs
    startLine: 106
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: >-
    Verifies that the exact exception is thrown (and not a derived exception type).

    Generally used to test property accessors.
  example: []
  syntax:
    content: 'public static T Throws<T>(Func<object?> testCode) where T : Exception'
    parameters:
    - id: testCode
      type: System.Func{System.Object}
      description: A delegate to the code to be tested
    typeParameters:
    - id: T
      description: The type of the exception expected to be thrown
    return:
      type: '{T}'
      description: The exception that was thrown, when successful
    content.vb: Public Shared Function Throws(Of T As Exception)(testCode As Func(Of Object)) As T
  overload: v3.1.0.1:Xunit.Assert.Throws*
  nameWithType.vb: Assert.Throws(Of T)(Func(Of Object))
  fullName.vb: Xunit.Assert.Throws(Of T)(System.Func(Of Object))
  name.vb: Throws(Of T)(Func(Of Object))
- uid: v3.1.0.1:Xunit.Assert.Throws``1(System.String,System.Action)
  commentId: M:Xunit.Assert.Throws``1(System.String,System.Action)
  id: Throws``1(System.String,System.Action)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Throws<T>(string?, Action)
  nameWithType: Assert.Throws<T>(string?, Action)
  fullName: Xunit.Assert.Throws<T>(string?, System.Action)
  type: Method
  source:
    id: Throws
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\ExceptionAsserts.cs
    startLine: 131
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: >-
    Verifies that the exact exception is thrown (and not a derived exception type), where the exception

    derives from <xref href="System.ArgumentException" data-throw-if-not-resolved="false"></xref> and has the given parameter name.
  example: []
  syntax:
    content: 'public static T Throws<T>(string? paramName, Action testCode) where T : ArgumentException'
    parameters:
    - id: paramName
      type: System.String
      description: The parameter name that is expected to be in the exception
    - id: testCode
      type: System.Action
      description: A delegate to the code to be tested
    typeParameters:
    - id: T
    return:
      type: '{T}'
      description: The exception that was thrown, when successful
    content.vb: Public Shared Function Throws(Of T As ArgumentException)(paramName As String, testCode As Action) As T
  overload: v3.1.0.1:Xunit.Assert.Throws*
  nameWithType.vb: Assert.Throws(Of T)(String, Action)
  fullName.vb: Xunit.Assert.Throws(Of T)(String, System.Action)
  name.vb: Throws(Of T)(String, Action)
- uid: v3.1.0.1:Xunit.Assert.Throws``1(System.String,System.Func{System.Object})
  commentId: M:Xunit.Assert.Throws``1(System.String,System.Func{System.Object})
  id: Throws``1(System.String,System.Func{System.Object})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Throws<T>(string?, Func<object?>)
  nameWithType: Assert.Throws<T>(string?, Func<object?>)
  fullName: Xunit.Assert.Throws<T>(string?, System.Func<object?>)
  type: Method
  source:
    id: Throws
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\ExceptionAsserts.cs
    startLine: 155
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: >-
    Verifies that the exact exception is thrown (and not a derived exception type), where the exception

    derives from <xref href="System.ArgumentException" data-throw-if-not-resolved="false"></xref> and has the given parameter name.
  example: []
  syntax:
    content: 'public static T Throws<T>(string? paramName, Func<object?> testCode) where T : ArgumentException'
    parameters:
    - id: paramName
      type: System.String
      description: The parameter name that is expected to be in the exception
    - id: testCode
      type: System.Func{System.Object}
      description: A delegate to the code to be tested
    typeParameters:
    - id: T
    return:
      type: '{T}'
      description: The exception that was thrown, when successful
    content.vb: Public Shared Function Throws(Of T As ArgumentException)(paramName As String, testCode As Func(Of Object)) As T
  overload: v3.1.0.1:Xunit.Assert.Throws*
  nameWithType.vb: Assert.Throws(Of T)(String, Func(Of Object))
  fullName.vb: Xunit.Assert.Throws(Of T)(String, System.Func(Of Object))
  name.vb: Throws(Of T)(String, Func(Of Object))
- uid: v3.1.0.1:Xunit.Assert.ThrowsAny``1(System.Action)
  commentId: M:Xunit.Assert.ThrowsAny``1(System.Action)
  id: ThrowsAny``1(System.Action)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: ThrowsAny<T>(Action)
  nameWithType: Assert.ThrowsAny<T>(Action)
  fullName: Xunit.Assert.ThrowsAny<T>(System.Action)
  type: Method
  source:
    id: ThrowsAny
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\ExceptionAsserts.cs
    startLine: 213
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that the exact exception or a derived exception type is thrown.
  example: []
  syntax:
    content: 'public static T ThrowsAny<T>(Action testCode) where T : Exception'
    parameters:
    - id: testCode
      type: System.Action
      description: A delegate to the code to be tested
    typeParameters:
    - id: T
      description: The type of the exception expected to be thrown
    return:
      type: '{T}'
      description: The exception that was thrown, when successful
    content.vb: Public Shared Function ThrowsAny(Of T As Exception)(testCode As Action) As T
  overload: v3.1.0.1:Xunit.Assert.ThrowsAny*
  nameWithType.vb: Assert.ThrowsAny(Of T)(Action)
  fullName.vb: Xunit.Assert.ThrowsAny(Of T)(System.Action)
  name.vb: ThrowsAny(Of T)(Action)
- uid: v3.1.0.1:Xunit.Assert.ThrowsAny``1(System.Func{System.Object})
  commentId: M:Xunit.Assert.ThrowsAny``1(System.Func{System.Object})
  id: ThrowsAny``1(System.Func{System.Object})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: ThrowsAny<T>(Func<object?>)
  nameWithType: Assert.ThrowsAny<T>(Func<object?>)
  fullName: Xunit.Assert.ThrowsAny<T>(System.Func<object?>)
  type: Method
  source:
    id: ThrowsAny
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\ExceptionAsserts.cs
    startLine: 225
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: >-
    Verifies that the exact exception or a derived exception type is thrown.

    Generally used to test property accessors.
  example: []
  syntax:
    content: 'public static T ThrowsAny<T>(Func<object?> testCode) where T : Exception'
    parameters:
    - id: testCode
      type: System.Func{System.Object}
      description: A delegate to the code to be tested
    typeParameters:
    - id: T
      description: The type of the exception expected to be thrown
    return:
      type: '{T}'
      description: The exception that was thrown, when successful
    content.vb: Public Shared Function ThrowsAny(Of T As Exception)(testCode As Func(Of Object)) As T
  overload: v3.1.0.1:Xunit.Assert.ThrowsAny*
  nameWithType.vb: Assert.ThrowsAny(Of T)(Func(Of Object))
  fullName.vb: Xunit.Assert.ThrowsAny(Of T)(System.Func(Of Object))
  name.vb: ThrowsAny(Of T)(Func(Of Object))
- uid: v3.1.0.1:Xunit.Assert.ThrowsAnyAsync``1(System.Func{System.Threading.Tasks.Task})
  commentId: M:Xunit.Assert.ThrowsAnyAsync``1(System.Func{System.Threading.Tasks.Task})
  id: ThrowsAnyAsync``1(System.Func{System.Threading.Tasks.Task})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: ThrowsAnyAsync<T>(Func<Task>)
  nameWithType: Assert.ThrowsAnyAsync<T>(Func<Task>)
  fullName: Xunit.Assert.ThrowsAnyAsync<T>(System.Func<System.Threading.Tasks.Task>)
  type: Method
  source:
    id: ThrowsAnyAsync
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\ExceptionAsserts.cs
    startLine: 247
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that the exact exception or a derived exception type is thrown.
  example: []
  syntax:
    content: 'public static Task<T> ThrowsAnyAsync<T>(Func<Task> testCode) where T : Exception'
    parameters:
    - id: testCode
      type: System.Func{System.Threading.Tasks.Task}
      description: A delegate to the task to be tested
    typeParameters:
    - id: T
      description: The type of the exception expected to be thrown
    return:
      type: System.Threading.Tasks.Task{{T}}
      description: The exception that was thrown, when successful
    content.vb: Public Shared Function ThrowsAnyAsync(Of T As Exception)(testCode As Func(Of Task)) As Task(Of T)
  overload: v3.1.0.1:Xunit.Assert.ThrowsAnyAsync*
  nameWithType.vb: Assert.ThrowsAnyAsync(Of T)(Func(Of Task))
  fullName.vb: Xunit.Assert.ThrowsAnyAsync(Of T)(System.Func(Of System.Threading.Tasks.Task))
  name.vb: ThrowsAnyAsync(Of T)(Func(Of Task))
- uid: v3.1.0.1:Xunit.Assert.ThrowsAsync(System.Type,System.Func{System.Threading.Tasks.Task})
  commentId: M:Xunit.Assert.ThrowsAsync(System.Type,System.Func{System.Threading.Tasks.Task})
  id: ThrowsAsync(System.Type,System.Func{System.Threading.Tasks.Task})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: ThrowsAsync(Type, Func<Task>)
  nameWithType: Assert.ThrowsAsync(Type, Func<Task>)
  fullName: Xunit.Assert.ThrowsAsync(System.Type, System.Func<System.Threading.Tasks.Task>)
  type: Method
  source:
    id: ThrowsAsync
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\ExceptionAsserts.cs
    startLine: 257
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that the exact exception is thrown (and not a derived exception type).
  example: []
  syntax:
    content: public static Task<Exception> ThrowsAsync(Type exceptionType, Func<Task> testCode)
    parameters:
    - id: exceptionType
      type: System.Type
      description: The type of the exception expected to be thrown
    - id: testCode
      type: System.Func{System.Threading.Tasks.Task}
      description: A delegate to the task to be tested
    return:
      type: System.Threading.Tasks.Task{System.Exception}
      description: The exception that was thrown, when successful
    content.vb: Public Shared Function ThrowsAsync(exceptionType As Type, testCode As Func(Of Task)) As Task(Of Exception)
  overload: v3.1.0.1:Xunit.Assert.ThrowsAsync*
  nameWithType.vb: Assert.ThrowsAsync(Type, Func(Of Task))
  fullName.vb: Xunit.Assert.ThrowsAsync(System.Type, System.Func(Of System.Threading.Tasks.Task))
  name.vb: ThrowsAsync(Type, Func(Of Task))
- uid: v3.1.0.1:Xunit.Assert.ThrowsAsync``1(System.Func{System.Threading.Tasks.Task})
  commentId: M:Xunit.Assert.ThrowsAsync``1(System.Func{System.Threading.Tasks.Task})
  id: ThrowsAsync``1(System.Func{System.Threading.Tasks.Task})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: ThrowsAsync<T>(Func<Task>)
  nameWithType: Assert.ThrowsAsync<T>(Func<Task>)
  fullName: Xunit.Assert.ThrowsAsync<T>(System.Func<System.Threading.Tasks.Task>)
  type: Method
  source:
    id: ThrowsAsync
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\ExceptionAsserts.cs
    startLine: 268
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that the exact exception is thrown (and not a derived exception type).
  example: []
  syntax:
    content: 'public static Task<T> ThrowsAsync<T>(Func<Task> testCode) where T : Exception'
    parameters:
    - id: testCode
      type: System.Func{System.Threading.Tasks.Task}
      description: A delegate to the task to be tested
    typeParameters:
    - id: T
      description: The type of the exception expected to be thrown
    return:
      type: System.Threading.Tasks.Task{{T}}
      description: The exception that was thrown, when successful
    content.vb: Public Shared Function ThrowsAsync(Of T As Exception)(testCode As Func(Of Task)) As Task(Of T)
  overload: v3.1.0.1:Xunit.Assert.ThrowsAsync*
  nameWithType.vb: Assert.ThrowsAsync(Of T)(Func(Of Task))
  fullName.vb: Xunit.Assert.ThrowsAsync(Of T)(System.Func(Of System.Threading.Tasks.Task))
  name.vb: ThrowsAsync(Of T)(Func(Of Task))
- uid: v3.1.0.1:Xunit.Assert.ThrowsAsync``1(System.String,System.Func{System.Threading.Tasks.Task})
  commentId: M:Xunit.Assert.ThrowsAsync``1(System.String,System.Func{System.Threading.Tasks.Task})
  id: ThrowsAsync``1(System.String,System.Func{System.Threading.Tasks.Task})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: ThrowsAsync<T>(string?, Func<Task>)
  nameWithType: Assert.ThrowsAsync<T>(string?, Func<Task>)
  fullName: Xunit.Assert.ThrowsAsync<T>(string?, System.Func<System.Threading.Tasks.Task>)
  type: Method
  source:
    id: ThrowsAsync
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\ExceptionAsserts.cs
    startLine: 281
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: >-
    Verifies that the exact exception is thrown (and not a derived exception type), where the exception

    derives from <xref href="System.ArgumentException" data-throw-if-not-resolved="false"></xref> and has the given parameter name.
  example: []
  syntax:
    content: 'public static Task<T> ThrowsAsync<T>(string? paramName, Func<Task> testCode) where T : ArgumentException'
    parameters:
    - id: paramName
      type: System.String
      description: The parameter name that is expected to be in the exception
    - id: testCode
      type: System.Func{System.Threading.Tasks.Task}
      description: A delegate to the task to be tested
    typeParameters:
    - id: T
    return:
      type: System.Threading.Tasks.Task{{T}}
      description: The exception that was thrown, when successful
    content.vb: Public Shared Function ThrowsAsync(Of T As ArgumentException)(paramName As String, testCode As Func(Of Task)) As Task(Of T)
  overload: v3.1.0.1:Xunit.Assert.ThrowsAsync*
  nameWithType.vb: Assert.ThrowsAsync(Of T)(String, Func(Of Task))
  fullName.vb: Xunit.Assert.ThrowsAsync(Of T)(String, System.Func(Of System.Threading.Tasks.Task))
  name.vb: ThrowsAsync(Of T)(String, Func(Of Task))
- uid: v3.1.0.1:Xunit.Assert.Fail(System.String)
  commentId: M:Xunit.Assert.Fail(System.String)
  id: Fail(System.String)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Fail(string?)
  nameWithType: Assert.Fail(string?)
  fullName: Xunit.Assert.Fail(string?)
  type: Method
  source:
    id: Fail
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\FailAsserts.cs
    startLine: 31
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Indicates that the test should immediately fail.
  example: []
  syntax:
    content: public static void Fail(string? message = null)
    parameters:
    - id: message
      type: System.String
      description: The optional failure message
    content.vb: Public Shared Sub Fail(message As String = Nothing)
  overload: v3.1.0.1:Xunit.Assert.Fail*
  nameWithType.vb: Assert.Fail(String)
  fullName.vb: Xunit.Assert.Fail(String)
  name.vb: Fail(String)
- uid: v3.1.0.1:Xunit.Assert.NotSame(System.Object,System.Object)
  commentId: M:Xunit.Assert.NotSame(System.Object,System.Object)
  id: NotSame(System.Object,System.Object)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: NotSame(object?, object?)
  nameWithType: Assert.NotSame(object?, object?)
  fullName: Xunit.Assert.NotSame(object?, object?)
  type: Method
  source:
    id: NotSame
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\IdentityAsserts.cs
    startLine: 24
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that two objects are not the same instance.
  example: []
  syntax:
    content: public static void NotSame(object? expected, object? actual)
    parameters:
    - id: expected
      type: System.Object
      description: The expected object instance
    - id: actual
      type: System.Object
      description: The actual object instance
    content.vb: Public Shared Sub NotSame(expected As Object, actual As Object)
  overload: v3.1.0.1:Xunit.Assert.NotSame*
  exceptions:
  - type: Xunit.Sdk.NotSameException
    commentId: T:Xunit.Sdk.NotSameException
    description: Thrown when the objects are the same instance
  nameWithType.vb: Assert.NotSame(Object, Object)
  fullName.vb: Xunit.Assert.NotSame(Object, Object)
  name.vb: NotSame(Object, Object)
- uid: v3.1.0.1:Xunit.Assert.Same(System.Object,System.Object)
  commentId: M:Xunit.Assert.Same(System.Object,System.Object)
  id: Same(System.Object,System.Object)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Same(object?, object?)
  nameWithType: Assert.Same(object?, object?)
  fullName: Xunit.Assert.Same(object?, object?)
  type: Method
  source:
    id: Same
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\IdentityAsserts.cs
    startLine: 43
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that two objects are the same instance.
  example: []
  syntax:
    content: public static void Same(object? expected, object? actual)
    parameters:
    - id: expected
      type: System.Object
      description: The expected object instance
    - id: actual
      type: System.Object
      description: The actual object instance
    content.vb: Public Shared Sub Same(expected As Object, actual As Object)
  overload: v3.1.0.1:Xunit.Assert.Same*
  exceptions:
  - type: Xunit.Sdk.SameException
    commentId: T:Xunit.Sdk.SameException
    description: Thrown when the objects are not the same instance
  nameWithType.vb: Assert.Same(Object, Object)
  fullName.vb: Xunit.Assert.Same(Object, Object)
  name.vb: Same(Object, Object)
- uid: v3.1.0.1:Xunit.Assert.Contains``1(System.Memory{``0},System.Memory{``0})
  commentId: M:Xunit.Assert.Contains``1(System.Memory{``0},System.Memory{``0})
  id: Contains``1(System.Memory{``0},System.Memory{``0})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Contains<T>(Memory<T>, Memory<T>)
  nameWithType: Assert.Contains<T>(Memory<T>, Memory<T>)
  fullName: Xunit.Assert.Contains<T>(System.Memory<T>, System.Memory<T>)
  type: Method
  source:
    id: Contains
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\MemoryAsserts.cs
    startLine: 36
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a Memory contains a given sub-Memory
  example: []
  syntax:
    content: 'public static void Contains<T>(Memory<T> expectedSubMemory, Memory<T> actualMemory) where T : IEquatable<T>'
    parameters:
    - id: expectedSubMemory
      type: System.Memory{{T}}
      description: The sub-Memory expected to be in the Memory
    - id: actualMemory
      type: System.Memory{{T}}
      description: The Memory to be inspected
    typeParameters:
    - id: T
    content.vb: Public Shared Sub Contains(Of T As IEquatable(Of T))(expectedSubMemory As Memory(Of T), actualMemory As Memory(Of T))
  overload: v3.1.0.1:Xunit.Assert.Contains*
  exceptions:
  - type: Xunit.Sdk.ContainsException
    commentId: T:Xunit.Sdk.ContainsException
    description: Thrown when the sub-Memory is not present inside the Memory
  nameWithType.vb: Assert.Contains(Of T)(Memory(Of T), Memory(Of T))
  fullName.vb: Xunit.Assert.Contains(Of T)(System.Memory(Of T), System.Memory(Of T))
  name.vb: Contains(Of T)(Memory(Of T), Memory(Of T))
- uid: v3.1.0.1:Xunit.Assert.Contains``1(System.Memory{``0},System.ReadOnlyMemory{``0})
  commentId: M:Xunit.Assert.Contains``1(System.Memory{``0},System.ReadOnlyMemory{``0})
  id: Contains``1(System.Memory{``0},System.ReadOnlyMemory{``0})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Contains<T>(Memory<T>, ReadOnlyMemory<T>)
  nameWithType: Assert.Contains<T>(Memory<T>, ReadOnlyMemory<T>)
  fullName: Xunit.Assert.Contains<T>(System.Memory<T>, System.ReadOnlyMemory<T>)
  type: Method
  source:
    id: Contains
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\MemoryAsserts.cs
    startLine: 48
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a Memory contains a given sub-Memory
  example: []
  syntax:
    content: 'public static void Contains<T>(Memory<T> expectedSubMemory, ReadOnlyMemory<T> actualMemory) where T : IEquatable<T>'
    parameters:
    - id: expectedSubMemory
      type: System.Memory{{T}}
      description: The sub-Memory expected to be in the Memory
    - id: actualMemory
      type: System.ReadOnlyMemory{{T}}
      description: The Memory to be inspected
    typeParameters:
    - id: T
    content.vb: Public Shared Sub Contains(Of T As IEquatable(Of T))(expectedSubMemory As Memory(Of T), actualMemory As ReadOnlyMemory(Of T))
  overload: v3.1.0.1:Xunit.Assert.Contains*
  exceptions:
  - type: Xunit.Sdk.ContainsException
    commentId: T:Xunit.Sdk.ContainsException
    description: Thrown when the sub-Memory is not present inside the Memory
  nameWithType.vb: Assert.Contains(Of T)(Memory(Of T), ReadOnlyMemory(Of T))
  fullName.vb: Xunit.Assert.Contains(Of T)(System.Memory(Of T), System.ReadOnlyMemory(Of T))
  name.vb: Contains(Of T)(Memory(Of T), ReadOnlyMemory(Of T))
- uid: v3.1.0.1:Xunit.Assert.Contains``1(System.ReadOnlyMemory{``0},System.Memory{``0})
  commentId: M:Xunit.Assert.Contains``1(System.ReadOnlyMemory{``0},System.Memory{``0})
  id: Contains``1(System.ReadOnlyMemory{``0},System.Memory{``0})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Contains<T>(ReadOnlyMemory<T>, Memory<T>)
  nameWithType: Assert.Contains<T>(ReadOnlyMemory<T>, Memory<T>)
  fullName: Xunit.Assert.Contains<T>(System.ReadOnlyMemory<T>, System.Memory<T>)
  type: Method
  source:
    id: Contains
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\MemoryAsserts.cs
    startLine: 60
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a Memory contains a given sub-Memory
  example: []
  syntax:
    content: 'public static void Contains<T>(ReadOnlyMemory<T> expectedSubMemory, Memory<T> actualMemory) where T : IEquatable<T>'
    parameters:
    - id: expectedSubMemory
      type: System.ReadOnlyMemory{{T}}
      description: The sub-Memory expected to be in the Memory
    - id: actualMemory
      type: System.Memory{{T}}
      description: The Memory to be inspected
    typeParameters:
    - id: T
    content.vb: Public Shared Sub Contains(Of T As IEquatable(Of T))(expectedSubMemory As ReadOnlyMemory(Of T), actualMemory As Memory(Of T))
  overload: v3.1.0.1:Xunit.Assert.Contains*
  exceptions:
  - type: Xunit.Sdk.ContainsException
    commentId: T:Xunit.Sdk.ContainsException
    description: Thrown when the sub-Memory is not present inside the Memory
  nameWithType.vb: Assert.Contains(Of T)(ReadOnlyMemory(Of T), Memory(Of T))
  fullName.vb: Xunit.Assert.Contains(Of T)(System.ReadOnlyMemory(Of T), System.Memory(Of T))
  name.vb: Contains(Of T)(ReadOnlyMemory(Of T), Memory(Of T))
- uid: v3.1.0.1:Xunit.Assert.Contains``1(System.ReadOnlyMemory{``0},System.ReadOnlyMemory{``0})
  commentId: M:Xunit.Assert.Contains``1(System.ReadOnlyMemory{``0},System.ReadOnlyMemory{``0})
  id: Contains``1(System.ReadOnlyMemory{``0},System.ReadOnlyMemory{``0})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Contains<T>(ReadOnlyMemory<T>, ReadOnlyMemory<T>)
  nameWithType: Assert.Contains<T>(ReadOnlyMemory<T>, ReadOnlyMemory<T>)
  fullName: Xunit.Assert.Contains<T>(System.ReadOnlyMemory<T>, System.ReadOnlyMemory<T>)
  type: Method
  source:
    id: Contains
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\MemoryAsserts.cs
    startLine: 72
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a Memory contains a given sub-Memory
  example: []
  syntax:
    content: 'public static void Contains<T>(ReadOnlyMemory<T> expectedSubMemory, ReadOnlyMemory<T> actualMemory) where T : IEquatable<T>'
    parameters:
    - id: expectedSubMemory
      type: System.ReadOnlyMemory{{T}}
      description: The sub-Memory expected to be in the Memory
    - id: actualMemory
      type: System.ReadOnlyMemory{{T}}
      description: The Memory to be inspected
    typeParameters:
    - id: T
    content.vb: Public Shared Sub Contains(Of T As IEquatable(Of T))(expectedSubMemory As ReadOnlyMemory(Of T), actualMemory As ReadOnlyMemory(Of T))
  overload: v3.1.0.1:Xunit.Assert.Contains*
  exceptions:
  - type: Xunit.Sdk.ContainsException
    commentId: T:Xunit.Sdk.ContainsException
    description: Thrown when the sub-Memory is not present inside the Memory
  nameWithType.vb: Assert.Contains(Of T)(ReadOnlyMemory(Of T), ReadOnlyMemory(Of T))
  fullName.vb: Xunit.Assert.Contains(Of T)(System.ReadOnlyMemory(Of T), System.ReadOnlyMemory(Of T))
  name.vb: Contains(Of T)(ReadOnlyMemory(Of T), ReadOnlyMemory(Of T))
- uid: v3.1.0.1:Xunit.Assert.DoesNotContain``1(System.Memory{``0},System.Memory{``0})
  commentId: M:Xunit.Assert.DoesNotContain``1(System.Memory{``0},System.Memory{``0})
  id: DoesNotContain``1(System.Memory{``0},System.Memory{``0})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: DoesNotContain<T>(Memory<T>, Memory<T>)
  nameWithType: Assert.DoesNotContain<T>(Memory<T>, Memory<T>)
  fullName: Xunit.Assert.DoesNotContain<T>(System.Memory<T>, System.Memory<T>)
  type: Method
  source:
    id: DoesNotContain
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\MemoryAsserts.cs
    startLine: 92
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a Memory does not contain a given sub-Memory
  example: []
  syntax:
    content: 'public static void DoesNotContain<T>(Memory<T> expectedSubMemory, Memory<T> actualMemory) where T : IEquatable<T>'
    parameters:
    - id: expectedSubMemory
      type: System.Memory{{T}}
      description: The sub-Memory expected not to be in the Memory
    - id: actualMemory
      type: System.Memory{{T}}
      description: The Memory to be inspected
    typeParameters:
    - id: T
    content.vb: Public Shared Sub DoesNotContain(Of T As IEquatable(Of T))(expectedSubMemory As Memory(Of T), actualMemory As Memory(Of T))
  overload: v3.1.0.1:Xunit.Assert.DoesNotContain*
  exceptions:
  - type: Xunit.Sdk.DoesNotContainException
    commentId: T:Xunit.Sdk.DoesNotContainException
    description: Thrown when the sub-Memory is present inside the Memory
  nameWithType.vb: Assert.DoesNotContain(Of T)(Memory(Of T), Memory(Of T))
  fullName.vb: Xunit.Assert.DoesNotContain(Of T)(System.Memory(Of T), System.Memory(Of T))
  name.vb: DoesNotContain(Of T)(Memory(Of T), Memory(Of T))
- uid: v3.1.0.1:Xunit.Assert.DoesNotContain``1(System.Memory{``0},System.ReadOnlyMemory{``0})
  commentId: M:Xunit.Assert.DoesNotContain``1(System.Memory{``0},System.ReadOnlyMemory{``0})
  id: DoesNotContain``1(System.Memory{``0},System.ReadOnlyMemory{``0})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: DoesNotContain<T>(Memory<T>, ReadOnlyMemory<T>)
  nameWithType: Assert.DoesNotContain<T>(Memory<T>, ReadOnlyMemory<T>)
  fullName: Xunit.Assert.DoesNotContain<T>(System.Memory<T>, System.ReadOnlyMemory<T>)
  type: Method
  source:
    id: DoesNotContain
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\MemoryAsserts.cs
    startLine: 104
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a Memory does not contain a given sub-Memory
  example: []
  syntax:
    content: 'public static void DoesNotContain<T>(Memory<T> expectedSubMemory, ReadOnlyMemory<T> actualMemory) where T : IEquatable<T>'
    parameters:
    - id: expectedSubMemory
      type: System.Memory{{T}}
      description: The sub-Memory expected not to be in the Memory
    - id: actualMemory
      type: System.ReadOnlyMemory{{T}}
      description: The Memory to be inspected
    typeParameters:
    - id: T
    content.vb: Public Shared Sub DoesNotContain(Of T As IEquatable(Of T))(expectedSubMemory As Memory(Of T), actualMemory As ReadOnlyMemory(Of T))
  overload: v3.1.0.1:Xunit.Assert.DoesNotContain*
  exceptions:
  - type: Xunit.Sdk.DoesNotContainException
    commentId: T:Xunit.Sdk.DoesNotContainException
    description: Thrown when the sub-Memory is present inside the Memory
  nameWithType.vb: Assert.DoesNotContain(Of T)(Memory(Of T), ReadOnlyMemory(Of T))
  fullName.vb: Xunit.Assert.DoesNotContain(Of T)(System.Memory(Of T), System.ReadOnlyMemory(Of T))
  name.vb: DoesNotContain(Of T)(Memory(Of T), ReadOnlyMemory(Of T))
- uid: v3.1.0.1:Xunit.Assert.DoesNotContain``1(System.ReadOnlyMemory{``0},System.Memory{``0})
  commentId: M:Xunit.Assert.DoesNotContain``1(System.ReadOnlyMemory{``0},System.Memory{``0})
  id: DoesNotContain``1(System.ReadOnlyMemory{``0},System.Memory{``0})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: DoesNotContain<T>(ReadOnlyMemory<T>, Memory<T>)
  nameWithType: Assert.DoesNotContain<T>(ReadOnlyMemory<T>, Memory<T>)
  fullName: Xunit.Assert.DoesNotContain<T>(System.ReadOnlyMemory<T>, System.Memory<T>)
  type: Method
  source:
    id: DoesNotContain
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\MemoryAsserts.cs
    startLine: 116
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a Memory does not contain a given sub-Memory
  example: []
  syntax:
    content: 'public static void DoesNotContain<T>(ReadOnlyMemory<T> expectedSubMemory, Memory<T> actualMemory) where T : IEquatable<T>'
    parameters:
    - id: expectedSubMemory
      type: System.ReadOnlyMemory{{T}}
      description: The sub-Memory expected not to be in the Memory
    - id: actualMemory
      type: System.Memory{{T}}
      description: The Memory to be inspected
    typeParameters:
    - id: T
    content.vb: Public Shared Sub DoesNotContain(Of T As IEquatable(Of T))(expectedSubMemory As ReadOnlyMemory(Of T), actualMemory As Memory(Of T))
  overload: v3.1.0.1:Xunit.Assert.DoesNotContain*
  exceptions:
  - type: Xunit.Sdk.DoesNotContainException
    commentId: T:Xunit.Sdk.DoesNotContainException
    description: Thrown when the sub-Memory is present inside the Memory
  nameWithType.vb: Assert.DoesNotContain(Of T)(ReadOnlyMemory(Of T), Memory(Of T))
  fullName.vb: Xunit.Assert.DoesNotContain(Of T)(System.ReadOnlyMemory(Of T), System.Memory(Of T))
  name.vb: DoesNotContain(Of T)(ReadOnlyMemory(Of T), Memory(Of T))
- uid: v3.1.0.1:Xunit.Assert.DoesNotContain``1(System.ReadOnlyMemory{``0},System.ReadOnlyMemory{``0})
  commentId: M:Xunit.Assert.DoesNotContain``1(System.ReadOnlyMemory{``0},System.ReadOnlyMemory{``0})
  id: DoesNotContain``1(System.ReadOnlyMemory{``0},System.ReadOnlyMemory{``0})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: DoesNotContain<T>(ReadOnlyMemory<T>, ReadOnlyMemory<T>)
  nameWithType: Assert.DoesNotContain<T>(ReadOnlyMemory<T>, ReadOnlyMemory<T>)
  fullName: Xunit.Assert.DoesNotContain<T>(System.ReadOnlyMemory<T>, System.ReadOnlyMemory<T>)
  type: Method
  source:
    id: DoesNotContain
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\MemoryAsserts.cs
    startLine: 128
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a Memory does not contain a given sub-Memory
  example: []
  syntax:
    content: 'public static void DoesNotContain<T>(ReadOnlyMemory<T> expectedSubMemory, ReadOnlyMemory<T> actualMemory) where T : IEquatable<T>'
    parameters:
    - id: expectedSubMemory
      type: System.ReadOnlyMemory{{T}}
      description: The sub-Memory expected not to be in the Memory
    - id: actualMemory
      type: System.ReadOnlyMemory{{T}}
      description: The Memory to be inspected
    typeParameters:
    - id: T
    content.vb: Public Shared Sub DoesNotContain(Of T As IEquatable(Of T))(expectedSubMemory As ReadOnlyMemory(Of T), actualMemory As ReadOnlyMemory(Of T))
  overload: v3.1.0.1:Xunit.Assert.DoesNotContain*
  exceptions:
  - type: Xunit.Sdk.DoesNotContainException
    commentId: T:Xunit.Sdk.DoesNotContainException
    description: Thrown when the sub-Memory is present inside the Memory
  nameWithType.vb: Assert.DoesNotContain(Of T)(ReadOnlyMemory(Of T), ReadOnlyMemory(Of T))
  fullName.vb: Xunit.Assert.DoesNotContain(Of T)(System.ReadOnlyMemory(Of T), System.ReadOnlyMemory(Of T))
  name.vb: DoesNotContain(Of T)(ReadOnlyMemory(Of T), ReadOnlyMemory(Of T))
- uid: v3.1.0.1:Xunit.Assert.Equal``1(System.Memory{``0},System.Memory{``0})
  commentId: M:Xunit.Assert.Equal``1(System.Memory{``0},System.Memory{``0})
  id: Equal``1(System.Memory{``0},System.Memory{``0})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Equal<T>(Memory<T>, Memory<T>)
  nameWithType: Assert.Equal<T>(Memory<T>, Memory<T>)
  fullName: Xunit.Assert.Equal<T>(System.Memory<T>, System.Memory<T>)
  type: Method
  source:
    id: Equal
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\MemoryAsserts.cs
    startLine: 155
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that two Memory values are equivalent.
  example: []
  syntax:
    content: 'public static void Equal<T>(Memory<T> expectedMemory, Memory<T> actualMemory) where T : IEquatable<T>'
    parameters:
    - id: expectedMemory
      type: System.Memory{{T}}
      description: The expected Memory value.
    - id: actualMemory
      type: System.Memory{{T}}
      description: The actual Memory value.
    typeParameters:
    - id: T
    content.vb: Public Shared Sub Equal(Of T As IEquatable(Of T))(expectedMemory As Memory(Of T), actualMemory As Memory(Of T))
  overload: v3.1.0.1:Xunit.Assert.Equal*
  exceptions:
  - type: Xunit.Sdk.EqualException
    commentId: T:Xunit.Sdk.EqualException
    description: Thrown when the Memory values are not equivalent.
  nameWithType.vb: Assert.Equal(Of T)(Memory(Of T), Memory(Of T))
  fullName.vb: Xunit.Assert.Equal(Of T)(System.Memory(Of T), System.Memory(Of T))
  name.vb: Equal(Of T)(Memory(Of T), Memory(Of T))
- uid: v3.1.0.1:Xunit.Assert.Equal``1(System.Memory{``0},System.ReadOnlyMemory{``0})
  commentId: M:Xunit.Assert.Equal``1(System.Memory{``0},System.ReadOnlyMemory{``0})
  id: Equal``1(System.Memory{``0},System.ReadOnlyMemory{``0})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Equal<T>(Memory<T>, ReadOnlyMemory<T>)
  nameWithType: Assert.Equal<T>(Memory<T>, ReadOnlyMemory<T>)
  fullName: Xunit.Assert.Equal<T>(System.Memory<T>, System.ReadOnlyMemory<T>)
  type: Method
  source:
    id: Equal
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\MemoryAsserts.cs
    startLine: 167
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that two Memory values are equivalent.
  example: []
  syntax:
    content: 'public static void Equal<T>(Memory<T> expectedMemory, ReadOnlyMemory<T> actualMemory) where T : IEquatable<T>'
    parameters:
    - id: expectedMemory
      type: System.Memory{{T}}
      description: The expected Memory value.
    - id: actualMemory
      type: System.ReadOnlyMemory{{T}}
      description: The actual Memory value.
    typeParameters:
    - id: T
    content.vb: Public Shared Sub Equal(Of T As IEquatable(Of T))(expectedMemory As Memory(Of T), actualMemory As ReadOnlyMemory(Of T))
  overload: v3.1.0.1:Xunit.Assert.Equal*
  exceptions:
  - type: Xunit.Sdk.EqualException
    commentId: T:Xunit.Sdk.EqualException
    description: Thrown when the Memory values are not equivalent.
  nameWithType.vb: Assert.Equal(Of T)(Memory(Of T), ReadOnlyMemory(Of T))
  fullName.vb: Xunit.Assert.Equal(Of T)(System.Memory(Of T), System.ReadOnlyMemory(Of T))
  name.vb: Equal(Of T)(Memory(Of T), ReadOnlyMemory(Of T))
- uid: v3.1.0.1:Xunit.Assert.Equal``1(System.ReadOnlyMemory{``0},System.Memory{``0})
  commentId: M:Xunit.Assert.Equal``1(System.ReadOnlyMemory{``0},System.Memory{``0})
  id: Equal``1(System.ReadOnlyMemory{``0},System.Memory{``0})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Equal<T>(ReadOnlyMemory<T>, Memory<T>)
  nameWithType: Assert.Equal<T>(ReadOnlyMemory<T>, Memory<T>)
  fullName: Xunit.Assert.Equal<T>(System.ReadOnlyMemory<T>, System.Memory<T>)
  type: Method
  source:
    id: Equal
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\MemoryAsserts.cs
    startLine: 179
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that two Memory values are equivalent.
  example: []
  syntax:
    content: 'public static void Equal<T>(ReadOnlyMemory<T> expectedMemory, Memory<T> actualMemory) where T : IEquatable<T>'
    parameters:
    - id: expectedMemory
      type: System.ReadOnlyMemory{{T}}
      description: The expected Memory value.
    - id: actualMemory
      type: System.Memory{{T}}
      description: The actual Memory value.
    typeParameters:
    - id: T
    content.vb: Public Shared Sub Equal(Of T As IEquatable(Of T))(expectedMemory As ReadOnlyMemory(Of T), actualMemory As Memory(Of T))
  overload: v3.1.0.1:Xunit.Assert.Equal*
  exceptions:
  - type: Xunit.Sdk.EqualException
    commentId: T:Xunit.Sdk.EqualException
    description: Thrown when the Memory values are not equivalent.
  nameWithType.vb: Assert.Equal(Of T)(ReadOnlyMemory(Of T), Memory(Of T))
  fullName.vb: Xunit.Assert.Equal(Of T)(System.ReadOnlyMemory(Of T), System.Memory(Of T))
  name.vb: Equal(Of T)(ReadOnlyMemory(Of T), Memory(Of T))
- uid: v3.1.0.1:Xunit.Assert.Equal``1(System.ReadOnlyMemory{``0},System.ReadOnlyMemory{``0})
  commentId: M:Xunit.Assert.Equal``1(System.ReadOnlyMemory{``0},System.ReadOnlyMemory{``0})
  id: Equal``1(System.ReadOnlyMemory{``0},System.ReadOnlyMemory{``0})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Equal<T>(ReadOnlyMemory<T>, ReadOnlyMemory<T>)
  nameWithType: Assert.Equal<T>(ReadOnlyMemory<T>, ReadOnlyMemory<T>)
  fullName: Xunit.Assert.Equal<T>(System.ReadOnlyMemory<T>, System.ReadOnlyMemory<T>)
  type: Method
  source:
    id: Equal
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\MemoryAsserts.cs
    startLine: 191
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that two Memory values are equivalent.
  example: []
  syntax:
    content: 'public static void Equal<T>(ReadOnlyMemory<T> expectedMemory, ReadOnlyMemory<T> actualMemory) where T : IEquatable<T>'
    parameters:
    - id: expectedMemory
      type: System.ReadOnlyMemory{{T}}
      description: The expected Memory value.
    - id: actualMemory
      type: System.ReadOnlyMemory{{T}}
      description: The actual Memory value.
    typeParameters:
    - id: T
    content.vb: Public Shared Sub Equal(Of T As IEquatable(Of T))(expectedMemory As ReadOnlyMemory(Of T), actualMemory As ReadOnlyMemory(Of T))
  overload: v3.1.0.1:Xunit.Assert.Equal*
  exceptions:
  - type: Xunit.Sdk.EqualException
    commentId: T:Xunit.Sdk.EqualException
    description: Thrown when the Memory values are not equivalent.
  nameWithType.vb: Assert.Equal(Of T)(ReadOnlyMemory(Of T), ReadOnlyMemory(Of T))
  fullName.vb: Xunit.Assert.Equal(Of T)(System.ReadOnlyMemory(Of T), System.ReadOnlyMemory(Of T))
  name.vb: Equal(Of T)(ReadOnlyMemory(Of T), ReadOnlyMemory(Of T))
- uid: v3.1.0.1:Xunit.Assert.Multiple(System.Action[])
  commentId: M:Xunit.Assert.Multiple(System.Action[])
  id: Multiple(System.Action[])
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Multiple(params Action[])
  nameWithType: Assert.Multiple(params Action[])
  fullName: Xunit.Assert.Multiple(params System.Action[])
  type: Method
  source:
    id: Multiple
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\MultipleAsserts.cs
    startLine: 27
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: >-
    Runs multiple checks, collecting the exceptions from each one, and then bundles all failures

    up into a single assertion failure.
  example: []
  syntax:
    content: public static void Multiple(params Action[] checks)
    parameters:
    - id: checks
      type: System.Action[]
      description: The individual assertions to run, as actions.
    content.vb: Public Shared Sub Multiple(ParamArray checks As Action())
  overload: v3.1.0.1:Xunit.Assert.Multiple*
  nameWithType.vb: Assert.Multiple(ParamArray Action())
  fullName.vb: Xunit.Assert.Multiple(ParamArray System.Action())
  name.vb: Multiple(ParamArray Action())
- uid: v3.1.0.1:Xunit.Assert.NotNull(System.Object)
  commentId: M:Xunit.Assert.NotNull(System.Object)
  id: NotNull(System.Object)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: NotNull(object?)
  nameWithType: Assert.NotNull(object?)
  fullName: Xunit.Assert.NotNull(object?)
  type: Method
  source:
    id: NotNull
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\NullAsserts.cs
    startLine: 30
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that an object reference is not null.
  example: []
  syntax:
    content: public static void NotNull(object? @object)
    parameters:
    - id: object
      type: System.Object
      description: The object to be validated
    content.vb: Public Shared Sub NotNull([object] As Object)
  overload: v3.1.0.1:Xunit.Assert.NotNull*
  exceptions:
  - type: Xunit.Sdk.NotNullException
    commentId: T:Xunit.Sdk.NotNullException
    description: Thrown when the object reference is null
  nameWithType.vb: Assert.NotNull(Object)
  fullName.vb: Xunit.Assert.NotNull(Object)
  name.vb: NotNull(Object)
- uid: v3.1.0.1:Xunit.Assert.NotNull``1(System.Nullable{``0})
  commentId: M:Xunit.Assert.NotNull``1(System.Nullable{``0})
  id: NotNull``1(System.Nullable{``0})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: NotNull<T>(T?)
  nameWithType: Assert.NotNull<T>(T?)
  fullName: Xunit.Assert.NotNull<T>(T?)
  type: Method
  source:
    id: NotNull
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\NullAsserts.cs
    startLine: 47
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a nullable struct value is not null.
  example: []
  syntax:
    content: 'public static T NotNull<T>(T? value) where T : struct'
    parameters:
    - id: value
      type: System.Nullable{{T}}
      description: The value to e validated
    typeParameters:
    - id: T
      description: The type of the struct
    return:
      type: '{T}'
      description: The non-<code>null</code> value
    content.vb: Public Shared Function NotNull(Of T As Structure)(value As T?) As T
  overload: v3.1.0.1:Xunit.Assert.NotNull*
  exceptions:
  - type: Xunit.Sdk.NotNullException
    commentId: T:Xunit.Sdk.NotNullException
    description: Thrown when the value is null
  nameWithType.vb: Assert.NotNull(Of T)(T?)
  fullName.vb: Xunit.Assert.NotNull(Of T)(T?)
  name.vb: NotNull(Of T)(T?)
- uid: v3.1.0.1:Xunit.Assert.Null(System.Object)
  commentId: M:Xunit.Assert.Null(System.Object)
  id: Null(System.Object)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Null(object?)
  nameWithType: Assert.Null(object?)
  fullName: Xunit.Assert.Null(object?)
  type: Method
  source:
    id: "Null"
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\NullAsserts.cs
    startLine: 65
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that an object reference is null.
  example: []
  syntax:
    content: public static void Null(object? @object)
    parameters:
    - id: object
      type: System.Object
      description: The object to be inspected
    content.vb: Public Shared Sub Null([object] As Object)
  overload: v3.1.0.1:Xunit.Assert.Null*
  exceptions:
  - type: Xunit.Sdk.NullException
    commentId: T:Xunit.Sdk.NullException
    description: Thrown when the object reference is not null
  nameWithType.vb: Assert.Null(Object)
  fullName.vb: Xunit.Assert.Null(Object)
  name.vb: Null(Object)
- uid: v3.1.0.1:Xunit.Assert.Null``1(System.Nullable{``0})
  commentId: M:Xunit.Assert.Null``1(System.Nullable{``0})
  id: Null``1(System.Nullable{``0})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Null<T>(T?)
  nameWithType: Assert.Null<T>(T?)
  fullName: Xunit.Assert.Null<T>(T?)
  type: Method
  source:
    id: "Null"
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\NullAsserts.cs
    startLine: 79
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a nullable struct value is null.
  example: []
  syntax:
    content: 'public static void Null<T>(T? value) where T : struct'
    parameters:
    - id: value
      type: System.Nullable{{T}}
      description: The value to be inspected
    typeParameters:
    - id: T
    content.vb: Public Shared Sub Null(Of T As Structure)(value As T?)
  overload: v3.1.0.1:Xunit.Assert.Null*
  exceptions:
  - type: Xunit.Sdk.NullException
    commentId: T:Xunit.Sdk.NullException
    description: Thrown when the value is not null
  nameWithType.vb: Assert.Null(Of T)(T?)
  fullName.vb: Xunit.Assert.Null(Of T)(T?)
  name.vb: Null(Of T)(T?)
- uid: v3.1.0.1:Xunit.Assert.PropertyChanged(System.ComponentModel.INotifyPropertyChanged,System.String,System.Action)
  commentId: M:Xunit.Assert.PropertyChanged(System.ComponentModel.INotifyPropertyChanged,System.String,System.Action)
  id: PropertyChanged(System.ComponentModel.INotifyPropertyChanged,System.String,System.Action)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: PropertyChanged(INotifyPropertyChanged, string, Action)
  nameWithType: Assert.PropertyChanged(INotifyPropertyChanged, string, Action)
  fullName: Xunit.Assert.PropertyChanged(System.ComponentModel.INotifyPropertyChanged, string, System.Action)
  type: Method
  source:
    id: PropertyChanged
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\PropertyAsserts.cs
    startLine: 34
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: >-
    Verifies that the provided object raised <xref href="System.ComponentModel.INotifyPropertyChanged.PropertyChanged" data-throw-if-not-resolved="false"></xref>

    as a result of executing the given test code.
  example: []
  syntax:
    content: public static void PropertyChanged(INotifyPropertyChanged @object, string propertyName, Action testCode)
    parameters:
    - id: object
      type: System.ComponentModel.INotifyPropertyChanged
      description: The object which should raise the notification
    - id: propertyName
      type: System.String
      description: The property name for which the notification should be raised
    - id: testCode
      type: System.Action
      description: The test code which should cause the notification to be raised
    content.vb: Public Shared Sub PropertyChanged([object] As INotifyPropertyChanged, propertyName As String, testCode As Action)
  overload: v3.1.0.1:Xunit.Assert.PropertyChanged*
  exceptions:
  - type: Xunit.Sdk.PropertyChangedException
    commentId: T:Xunit.Sdk.PropertyChangedException
    description: Thrown when the notification is not raised
  nameWithType.vb: Assert.PropertyChanged(INotifyPropertyChanged, String, Action)
  fullName.vb: Xunit.Assert.PropertyChanged(System.ComponentModel.INotifyPropertyChanged, String, System.Action)
  name.vb: PropertyChanged(INotifyPropertyChanged, String, Action)
- uid: v3.1.0.1:Xunit.Assert.PropertyChangedAsync(System.ComponentModel.INotifyPropertyChanged,System.String,System.Func{System.Threading.Tasks.Task})
  commentId: M:Xunit.Assert.PropertyChangedAsync(System.ComponentModel.INotifyPropertyChanged,System.String,System.Func{System.Threading.Tasks.Task})
  id: PropertyChangedAsync(System.ComponentModel.INotifyPropertyChanged,System.String,System.Func{System.Threading.Tasks.Task})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: PropertyChangedAsync(INotifyPropertyChanged, string, Func<Task>)
  nameWithType: Assert.PropertyChangedAsync(INotifyPropertyChanged, string, Func<Task>)
  fullName: Xunit.Assert.PropertyChangedAsync(System.ComponentModel.INotifyPropertyChanged, string, System.Func<System.Threading.Tasks.Task>)
  type: Method
  source:
    id: PropertyChangedAsync
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\PropertyAsserts.cs
    startLine: 81
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: >-
    Verifies that the provided object raised <xref href="System.ComponentModel.INotifyPropertyChanged.PropertyChanged" data-throw-if-not-resolved="false"></xref>

    as a result of executing the given test code.
  example: []
  syntax:
    content: public static Task PropertyChangedAsync(INotifyPropertyChanged @object, string propertyName, Func<Task> testCode)
    parameters:
    - id: object
      type: System.ComponentModel.INotifyPropertyChanged
      description: The object which should raise the notification
    - id: propertyName
      type: System.String
      description: The property name for which the notification should be raised
    - id: testCode
      type: System.Func{System.Threading.Tasks.Task}
      description: The test code which should cause the notification to be raised
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Shared Function PropertyChangedAsync([object] As INotifyPropertyChanged, propertyName As String, testCode As Func(Of Task)) As Task
  overload: v3.1.0.1:Xunit.Assert.PropertyChangedAsync*
  exceptions:
  - type: Xunit.Sdk.PropertyChangedException
    commentId: T:Xunit.Sdk.PropertyChangedException
    description: Thrown when the notification is not raised
  nameWithType.vb: Assert.PropertyChangedAsync(INotifyPropertyChanged, String, Func(Of Task))
  fullName.vb: Xunit.Assert.PropertyChangedAsync(System.ComponentModel.INotifyPropertyChanged, String, System.Func(Of System.Threading.Tasks.Task))
  name.vb: PropertyChangedAsync(INotifyPropertyChanged, String, Func(Of Task))
- uid: v3.1.0.1:Xunit.Assert.InRange``1(``0,``0,``0)
  commentId: M:Xunit.Assert.InRange``1(``0,``0,``0)
  id: InRange``1(``0,``0,``0)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: InRange<T>(T, T, T)
  nameWithType: Assert.InRange<T>(T, T, T)
  fullName: Xunit.Assert.InRange<T>(T, T, T)
  type: Method
  source:
    id: InRange
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\RangeAsserts.cs
    startLine: 32
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a value is within a given range.
  example: []
  syntax:
    content: 'public static void InRange<T>(T actual, T low, T high) where T : IComparable'
    parameters:
    - id: actual
      type: '{T}'
      description: The actual value to be evaluated
    - id: low
      type: '{T}'
      description: The (inclusive) low value of the range
    - id: high
      type: '{T}'
      description: The (inclusive) high value of the range
    typeParameters:
    - id: T
      description: The type of the value to be compared
    content.vb: Public Shared Sub InRange(Of T As IComparable)(actual As T, low As T, high As T)
  overload: v3.1.0.1:Xunit.Assert.InRange*
  exceptions:
  - type: Xunit.Sdk.InRangeException
    commentId: T:Xunit.Sdk.InRangeException
    description: Thrown when the value is not in the given range
  nameWithType.vb: Assert.InRange(Of T)(T, T, T)
  fullName.vb: Xunit.Assert.InRange(Of T)(T, T, T)
  name.vb: InRange(Of T)(T, T, T)
- uid: v3.1.0.1:Xunit.Assert.InRange``1(``0,``0,``0,System.Collections.Generic.IComparer{``0})
  commentId: M:Xunit.Assert.InRange``1(``0,``0,``0,System.Collections.Generic.IComparer{``0})
  id: InRange``1(``0,``0,``0,System.Collections.Generic.IComparer{``0})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: InRange<T>(T, T, T, IComparer<T>)
  nameWithType: Assert.InRange<T>(T, T, T, IComparer<T>)
  fullName: Xunit.Assert.InRange<T>(T, T, T, System.Collections.Generic.IComparer<T>)
  type: Method
  source:
    id: InRange
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\RangeAsserts.cs
    startLine: 48
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a value is within a given range, using a comparer.
  example: []
  syntax:
    content: public static void InRange<T>(T actual, T low, T high, IComparer<T> comparer)
    parameters:
    - id: actual
      type: '{T}'
      description: The actual value to be evaluated
    - id: low
      type: '{T}'
      description: The (inclusive) low value of the range
    - id: high
      type: '{T}'
      description: The (inclusive) high value of the range
    - id: comparer
      type: System.Collections.Generic.IComparer{{T}}
      description: The comparer used to evaluate the value's range
    typeParameters:
    - id: T
      description: The type of the value to be compared
    content.vb: Public Shared Sub InRange(Of T)(actual As T, low As T, high As T, comparer As IComparer(Of T))
  overload: v3.1.0.1:Xunit.Assert.InRange*
  exceptions:
  - type: Xunit.Sdk.InRangeException
    commentId: T:Xunit.Sdk.InRangeException
    description: Thrown when the value is not in the given range
  nameWithType.vb: Assert.InRange(Of T)(T, T, T, IComparer(Of T))
  fullName.vb: Xunit.Assert.InRange(Of T)(T, T, T, System.Collections.Generic.IComparer(Of T))
  name.vb: InRange(Of T)(T, T, T, IComparer(Of T))
- uid: v3.1.0.1:Xunit.Assert.NotInRange``1(``0,``0,``0)
  commentId: M:Xunit.Assert.NotInRange``1(``0,``0,``0)
  id: NotInRange``1(``0,``0,``0)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: NotInRange<T>(T, T, T)
  nameWithType: Assert.NotInRange<T>(T, T, T)
  fullName: Xunit.Assert.NotInRange<T>(T, T, T)
  type: Method
  source:
    id: NotInRange
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\RangeAsserts.cs
    startLine: 71
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a value is not within a given range, using the default comparer.
  example: []
  syntax:
    content: 'public static void NotInRange<T>(T actual, T low, T high) where T : IComparable'
    parameters:
    - id: actual
      type: '{T}'
      description: The actual value to be evaluated
    - id: low
      type: '{T}'
      description: The (inclusive) low value of the range
    - id: high
      type: '{T}'
      description: The (inclusive) high value of the range
    typeParameters:
    - id: T
      description: The type of the value to be compared
    content.vb: Public Shared Sub NotInRange(Of T As IComparable)(actual As T, low As T, high As T)
  overload: v3.1.0.1:Xunit.Assert.NotInRange*
  exceptions:
  - type: Xunit.Sdk.NotInRangeException
    commentId: T:Xunit.Sdk.NotInRangeException
    description: Thrown when the value is in the given range
  nameWithType.vb: Assert.NotInRange(Of T)(T, T, T)
  fullName.vb: Xunit.Assert.NotInRange(Of T)(T, T, T)
  name.vb: NotInRange(Of T)(T, T, T)
- uid: v3.1.0.1:Xunit.Assert.NotInRange``1(``0,``0,``0,System.Collections.Generic.IComparer{``0})
  commentId: M:Xunit.Assert.NotInRange``1(``0,``0,``0,System.Collections.Generic.IComparer{``0})
  id: NotInRange``1(``0,``0,``0,System.Collections.Generic.IComparer{``0})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: NotInRange<T>(T, T, T, IComparer<T>)
  nameWithType: Assert.NotInRange<T>(T, T, T, IComparer<T>)
  fullName: Xunit.Assert.NotInRange<T>(T, T, T, System.Collections.Generic.IComparer<T>)
  type: Method
  source:
    id: NotInRange
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\RangeAsserts.cs
    startLine: 87
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a value is not within a given range, using a comparer.
  example: []
  syntax:
    content: public static void NotInRange<T>(T actual, T low, T high, IComparer<T> comparer)
    parameters:
    - id: actual
      type: '{T}'
      description: The actual value to be evaluated
    - id: low
      type: '{T}'
      description: The (inclusive) low value of the range
    - id: high
      type: '{T}'
      description: The (inclusive) high value of the range
    - id: comparer
      type: System.Collections.Generic.IComparer{{T}}
      description: The comparer used to evaluate the value's range
    typeParameters:
    - id: T
      description: The type of the value to be compared
    content.vb: Public Shared Sub NotInRange(Of T)(actual As T, low As T, high As T, comparer As IComparer(Of T))
  overload: v3.1.0.1:Xunit.Assert.NotInRange*
  exceptions:
  - type: Xunit.Sdk.NotInRangeException
    commentId: T:Xunit.Sdk.NotInRangeException
    description: Thrown when the value is in the given range
  nameWithType.vb: Assert.NotInRange(Of T)(T, T, T, IComparer(Of T))
  fullName.vb: Xunit.Assert.NotInRange(Of T)(T, T, T, System.Collections.Generic.IComparer(Of T))
  name.vb: NotInRange(Of T)(T, T, T, IComparer(Of T))
- uid: v3.1.0.1:Xunit.Assert.RecordException(System.Action)
  commentId: M:Xunit.Assert.RecordException(System.Action)
  id: RecordException(System.Action)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: RecordException(Action)
  nameWithType: Assert.RecordException(Action)
  fullName: Xunit.Assert.RecordException(System.Action)
  type: Method
  source:
    id: RecordException
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\Record.cs
    startLine: 36
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Records any exception which is thrown by the given code.
  example: []
  syntax:
    content: protected static Exception? RecordException(Action testCode)
    parameters:
    - id: testCode
      type: System.Action
      description: The code which may thrown an exception.
    return:
      type: System.Exception
      description: Returns the exception that was thrown by the code; null, otherwise.
    content.vb: Protected Shared Function RecordException(testCode As Action) As Exception
  overload: v3.1.0.1:Xunit.Assert.RecordException*
- uid: v3.1.0.1:Xunit.Assert.RecordException(System.Func{System.Object},System.String)
  commentId: M:Xunit.Assert.RecordException(System.Func{System.Object},System.String)
  id: RecordException(System.Func{System.Object},System.String)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: RecordException(Func<object?>, string)
  nameWithType: Assert.RecordException(Func<object?>, string)
  fullName: Xunit.Assert.RecordException(System.Func<object?>, string)
  type: Method
  source:
    id: RecordException
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\Record.cs
    startLine: 63
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: >-
    Records any exception which is thrown by the given code that has

    a return value. Generally used for testing property accessors.
  example: []
  syntax:
    content: protected static Exception? RecordException(Func<object?> testCode, string asyncMethodName)
    parameters:
    - id: testCode
      type: System.Func{System.Object}
      description: The code which may thrown an exception.
    - id: asyncMethodName
      type: System.String
      description: >-
        The name of the async method the user should've called if they accidentally
            passed in an async function
    return:
      type: System.Exception
      description: Returns the exception that was thrown by the code; null, otherwise.
    content.vb: Protected Shared Function RecordException(testCode As Func(Of Object), asyncMethodName As String) As Exception
  overload: v3.1.0.1:Xunit.Assert.RecordException*
  nameWithType.vb: Assert.RecordException(Func(Of Object), String)
  fullName.vb: Xunit.Assert.RecordException(System.Func(Of Object), String)
  name.vb: RecordException(Func(Of Object), String)
- uid: v3.1.0.1:Xunit.Assert.RecordExceptionAsync(System.Func{System.Threading.Tasks.Task})
  commentId: M:Xunit.Assert.RecordExceptionAsync(System.Func{System.Threading.Tasks.Task})
  id: RecordExceptionAsync(System.Func{System.Threading.Tasks.Task})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: RecordExceptionAsync(Func<Task>)
  nameWithType: Assert.RecordExceptionAsync(Func<Task>)
  fullName: Xunit.Assert.RecordExceptionAsync(System.Func<System.Threading.Tasks.Task>)
  type: Method
  source:
    id: RecordExceptionAsync
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\Record.cs
    startLine: 104
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Records any exception which is thrown by the given task.
  example: []
  syntax:
    content: protected static Task<Exception?> RecordExceptionAsync(Func<Task> testCode)
    parameters:
    - id: testCode
      type: System.Func{System.Threading.Tasks.Task}
      description: The task which may thrown an exception.
    return:
      type: System.Threading.Tasks.Task{System.Exception}
      description: Returns the exception that was thrown by the code; null, otherwise.
    content.vb: Protected Shared Function RecordExceptionAsync(testCode As Func(Of Task)) As Task(Of Exception)
  overload: v3.1.0.1:Xunit.Assert.RecordExceptionAsync*
  nameWithType.vb: Assert.RecordExceptionAsync(Func(Of Task))
  fullName.vb: Xunit.Assert.RecordExceptionAsync(System.Func(Of System.Threading.Tasks.Task))
  name.vb: RecordExceptionAsync(Func(Of Task))
- uid: v3.1.0.1:Xunit.Assert.Contains``1(``0,System.Collections.Generic.ISet{``0})
  commentId: M:Xunit.Assert.Contains``1(``0,System.Collections.Generic.ISet{``0})
  id: Contains``1(``0,System.Collections.Generic.ISet{``0})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Contains<T>(T, ISet<T>)
  nameWithType: Assert.Contains<T>(T, ISet<T>)
  fullName: Xunit.Assert.Contains<T>(T, System.Collections.Generic.ISet<T>)
  type: Method
  source:
    id: Contains
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\SetAsserts.cs
    startLine: 34
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that the set contains the given object.
  example: []
  syntax:
    content: public static void Contains<T>(T expected, ISet<T> set)
    parameters:
    - id: expected
      type: '{T}'
      description: The object expected to be in the set
    - id: set
      type: System.Collections.Generic.ISet{{T}}
      description: The set to be inspected
    typeParameters:
    - id: T
      description: The type of the object to be verified
    content.vb: Public Shared Sub Contains(Of T)(expected As T, [set] As ISet(Of T))
  overload: v3.1.0.1:Xunit.Assert.Contains*
  exceptions:
  - type: Xunit.Sdk.ContainsException
    commentId: T:Xunit.Sdk.ContainsException
    description: Thrown when the object is not present in the set
  nameWithType.vb: Assert.Contains(Of T)(T, ISet(Of T))
  fullName.vb: Xunit.Assert.Contains(Of T)(T, System.Collections.Generic.ISet(Of T))
  name.vb: Contains(Of T)(T, ISet(Of T))
- uid: v3.1.0.1:Xunit.Assert.Contains``1(``0,System.Collections.Generic.HashSet{``0})
  commentId: M:Xunit.Assert.Contains``1(``0,System.Collections.Generic.HashSet{``0})
  id: Contains``1(``0,System.Collections.Generic.HashSet{``0})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Contains<T>(T, HashSet<T>)
  nameWithType: Assert.Contains<T>(T, HashSet<T>)
  fullName: Xunit.Assert.Contains<T>(T, System.Collections.Generic.HashSet<T>)
  type: Method
  source:
    id: Contains
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\SetAsserts.cs
    startLine: 78
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that the hashset contains the given object.
  example: []
  syntax:
    content: public static void Contains<T>(T expected, HashSet<T> set)
    parameters:
    - id: expected
      type: '{T}'
      description: The object expected to be in the set
    - id: set
      type: System.Collections.Generic.HashSet{{T}}
      description: The set to be inspected
    typeParameters:
    - id: T
      description: The type of the object to be verified
    content.vb: Public Shared Sub Contains(Of T)(expected As T, [set] As HashSet(Of T))
  overload: v3.1.0.1:Xunit.Assert.Contains*
  exceptions:
  - type: Xunit.Sdk.ContainsException
    commentId: T:Xunit.Sdk.ContainsException
    description: Thrown when the object is not present in the set
  nameWithType.vb: Assert.Contains(Of T)(T, HashSet(Of T))
  fullName.vb: Xunit.Assert.Contains(Of T)(T, System.Collections.Generic.HashSet(Of T))
  name.vb: Contains(Of T)(T, HashSet(Of T))
- uid: v3.1.0.1:Xunit.Assert.Contains``1(``0,System.Collections.Generic.SortedSet{``0})
  commentId: M:Xunit.Assert.Contains``1(``0,System.Collections.Generic.SortedSet{``0})
  id: Contains``1(``0,System.Collections.Generic.SortedSet{``0})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Contains<T>(T, SortedSet<T>)
  nameWithType: Assert.Contains<T>(T, SortedSet<T>)
  fullName: Xunit.Assert.Contains<T>(T, System.Collections.Generic.SortedSet<T>)
  type: Method
  source:
    id: Contains
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\SetAsserts.cs
    startLine: 90
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that the sorted hashset contains the given object.
  example: []
  syntax:
    content: public static void Contains<T>(T expected, SortedSet<T> set)
    parameters:
    - id: expected
      type: '{T}'
      description: The object expected to be in the set
    - id: set
      type: System.Collections.Generic.SortedSet{{T}}
      description: The set to be inspected
    typeParameters:
    - id: T
      description: The type of the object to be verified
    content.vb: Public Shared Sub Contains(Of T)(expected As T, [set] As SortedSet(Of T))
  overload: v3.1.0.1:Xunit.Assert.Contains*
  exceptions:
  - type: Xunit.Sdk.ContainsException
    commentId: T:Xunit.Sdk.ContainsException
    description: Thrown when the object is not present in the set
  nameWithType.vb: Assert.Contains(Of T)(T, SortedSet(Of T))
  fullName.vb: Xunit.Assert.Contains(Of T)(T, System.Collections.Generic.SortedSet(Of T))
  name.vb: Contains(Of T)(T, SortedSet(Of T))
- uid: v3.1.0.1:Xunit.Assert.Contains``1(``0,System.Collections.Immutable.ImmutableHashSet{``0})
  commentId: M:Xunit.Assert.Contains``1(``0,System.Collections.Immutable.ImmutableHashSet{``0})
  id: Contains``1(``0,System.Collections.Immutable.ImmutableHashSet{``0})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Contains<T>(T, ImmutableHashSet<T>)
  nameWithType: Assert.Contains<T>(T, ImmutableHashSet<T>)
  fullName: Xunit.Assert.Contains<T>(T, System.Collections.Immutable.ImmutableHashSet<T>)
  type: Method
  source:
    id: Contains
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\SetAsserts.cs
    startLine: 103
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that the immutable hashset contains the given object.
  example: []
  syntax:
    content: public static void Contains<T>(T expected, ImmutableHashSet<T> set)
    parameters:
    - id: expected
      type: '{T}'
      description: The object expected to be in the set
    - id: set
      type: System.Collections.Immutable.ImmutableHashSet{{T}}
      description: The set to be inspected
    typeParameters:
    - id: T
      description: The type of the object to be verified
    content.vb: Public Shared Sub Contains(Of T)(expected As T, [set] As ImmutableHashSet(Of T))
  overload: v3.1.0.1:Xunit.Assert.Contains*
  exceptions:
  - type: Xunit.Sdk.ContainsException
    commentId: T:Xunit.Sdk.ContainsException
    description: Thrown when the object is not present in the set
  nameWithType.vb: Assert.Contains(Of T)(T, ImmutableHashSet(Of T))
  fullName.vb: Xunit.Assert.Contains(Of T)(T, System.Collections.Immutable.ImmutableHashSet(Of T))
  name.vb: Contains(Of T)(T, ImmutableHashSet(Of T))
- uid: v3.1.0.1:Xunit.Assert.Contains``1(``0,System.Collections.Immutable.ImmutableSortedSet{``0})
  commentId: M:Xunit.Assert.Contains``1(``0,System.Collections.Immutable.ImmutableSortedSet{``0})
  id: Contains``1(``0,System.Collections.Immutable.ImmutableSortedSet{``0})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Contains<T>(T, ImmutableSortedSet<T>)
  nameWithType: Assert.Contains<T>(T, ImmutableSortedSet<T>)
  fullName: Xunit.Assert.Contains<T>(T, System.Collections.Immutable.ImmutableSortedSet<T>)
  type: Method
  source:
    id: Contains
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\SetAsserts.cs
    startLine: 115
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that the immutable sorted hashset contains the given object.
  example: []
  syntax:
    content: public static void Contains<T>(T expected, ImmutableSortedSet<T> set)
    parameters:
    - id: expected
      type: '{T}'
      description: The object expected to be in the set
    - id: set
      type: System.Collections.Immutable.ImmutableSortedSet{{T}}
      description: The set to be inspected
    typeParameters:
    - id: T
      description: The type of the object to be verified
    content.vb: Public Shared Sub Contains(Of T)(expected As T, [set] As ImmutableSortedSet(Of T))
  overload: v3.1.0.1:Xunit.Assert.Contains*
  exceptions:
  - type: Xunit.Sdk.ContainsException
    commentId: T:Xunit.Sdk.ContainsException
    description: Thrown when the object is not present in the set
  nameWithType.vb: Assert.Contains(Of T)(T, ImmutableSortedSet(Of T))
  fullName.vb: Xunit.Assert.Contains(Of T)(T, System.Collections.Immutable.ImmutableSortedSet(Of T))
  name.vb: Contains(Of T)(T, ImmutableSortedSet(Of T))
- uid: v3.1.0.1:Xunit.Assert.DoesNotContain``1(``0,System.Collections.Generic.ISet{``0})
  commentId: M:Xunit.Assert.DoesNotContain``1(``0,System.Collections.Generic.ISet{``0})
  id: DoesNotContain``1(``0,System.Collections.Generic.ISet{``0})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: DoesNotContain<T>(T, ISet<T>)
  nameWithType: Assert.DoesNotContain<T>(T, ISet<T>)
  fullName: Xunit.Assert.DoesNotContain<T>(T, System.Collections.Generic.ISet<T>)
  type: Method
  source:
    id: DoesNotContain
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\SetAsserts.cs
    startLine: 128
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that the set does not contain the given item.
  example: []
  syntax:
    content: public static void DoesNotContain<T>(T expected, ISet<T> set)
    parameters:
    - id: expected
      type: '{T}'
      description: The object that is expected not to be in the set
    - id: set
      type: System.Collections.Generic.ISet{{T}}
      description: The set to be inspected
    typeParameters:
    - id: T
      description: The type of the object to be compared
    content.vb: Public Shared Sub DoesNotContain(Of T)(expected As T, [set] As ISet(Of T))
  overload: v3.1.0.1:Xunit.Assert.DoesNotContain*
  exceptions:
  - type: Xunit.Sdk.DoesNotContainException
    commentId: T:Xunit.Sdk.DoesNotContainException
    description: Thrown when the object is present inside the set
  nameWithType.vb: Assert.DoesNotContain(Of T)(T, ISet(Of T))
  fullName.vb: Xunit.Assert.DoesNotContain(Of T)(T, System.Collections.Generic.ISet(Of T))
  name.vb: DoesNotContain(Of T)(T, ISet(Of T))
- uid: v3.1.0.1:Xunit.Assert.DoesNotContain``1(``0,System.Collections.Generic.HashSet{``0})
  commentId: M:Xunit.Assert.DoesNotContain``1(``0,System.Collections.Generic.HashSet{``0})
  id: DoesNotContain``1(``0,System.Collections.Generic.HashSet{``0})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: DoesNotContain<T>(T, HashSet<T>)
  nameWithType: Assert.DoesNotContain<T>(T, HashSet<T>)
  fullName: Xunit.Assert.DoesNotContain<T>(T, System.Collections.Generic.HashSet<T>)
  type: Method
  source:
    id: DoesNotContain
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\SetAsserts.cs
    startLine: 170
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that the hashset does not contain the given item.
  example: []
  syntax:
    content: public static void DoesNotContain<T>(T expected, HashSet<T> set)
    parameters:
    - id: expected
      type: '{T}'
      description: The object expected to be in the set
    - id: set
      type: System.Collections.Generic.HashSet{{T}}
      description: The set to be inspected
    typeParameters:
    - id: T
      description: The type of the object to be verified
    content.vb: Public Shared Sub DoesNotContain(Of T)(expected As T, [set] As HashSet(Of T))
  overload: v3.1.0.1:Xunit.Assert.DoesNotContain*
  exceptions:
  - type: Xunit.Sdk.ContainsException
    commentId: T:Xunit.Sdk.ContainsException
    description: Thrown when the object is not present in the set
  nameWithType.vb: Assert.DoesNotContain(Of T)(T, HashSet(Of T))
  fullName.vb: Xunit.Assert.DoesNotContain(Of T)(T, System.Collections.Generic.HashSet(Of T))
  name.vb: DoesNotContain(Of T)(T, HashSet(Of T))
- uid: v3.1.0.1:Xunit.Assert.DoesNotContain``1(``0,System.Collections.Generic.SortedSet{``0})
  commentId: M:Xunit.Assert.DoesNotContain``1(``0,System.Collections.Generic.SortedSet{``0})
  id: DoesNotContain``1(``0,System.Collections.Generic.SortedSet{``0})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: DoesNotContain<T>(T, SortedSet<T>)
  nameWithType: Assert.DoesNotContain<T>(T, SortedSet<T>)
  fullName: Xunit.Assert.DoesNotContain<T>(T, System.Collections.Generic.SortedSet<T>)
  type: Method
  source:
    id: DoesNotContain
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\SetAsserts.cs
    startLine: 182
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that the sorted hashset does not contain the given item.
  example: []
  syntax:
    content: public static void DoesNotContain<T>(T expected, SortedSet<T> set)
    parameters:
    - id: expected
      type: '{T}'
      description: The object expected to be in the set
    - id: set
      type: System.Collections.Generic.SortedSet{{T}}
      description: The set to be inspected
    typeParameters:
    - id: T
      description: The type of the object to be verified
    content.vb: Public Shared Sub DoesNotContain(Of T)(expected As T, [set] As SortedSet(Of T))
  overload: v3.1.0.1:Xunit.Assert.DoesNotContain*
  exceptions:
  - type: Xunit.Sdk.ContainsException
    commentId: T:Xunit.Sdk.ContainsException
    description: Thrown when the object is not present in the set
  nameWithType.vb: Assert.DoesNotContain(Of T)(T, SortedSet(Of T))
  fullName.vb: Xunit.Assert.DoesNotContain(Of T)(T, System.Collections.Generic.SortedSet(Of T))
  name.vb: DoesNotContain(Of T)(T, SortedSet(Of T))
- uid: v3.1.0.1:Xunit.Assert.DoesNotContain``1(``0,System.Collections.Immutable.ImmutableHashSet{``0})
  commentId: M:Xunit.Assert.DoesNotContain``1(``0,System.Collections.Immutable.ImmutableHashSet{``0})
  id: DoesNotContain``1(``0,System.Collections.Immutable.ImmutableHashSet{``0})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: DoesNotContain<T>(T, ImmutableHashSet<T>)
  nameWithType: Assert.DoesNotContain<T>(T, ImmutableHashSet<T>)
  fullName: Xunit.Assert.DoesNotContain<T>(T, System.Collections.Immutable.ImmutableHashSet<T>)
  type: Method
  source:
    id: DoesNotContain
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\SetAsserts.cs
    startLine: 195
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that the immutable hashset does not contain the given item.
  example: []
  syntax:
    content: public static void DoesNotContain<T>(T expected, ImmutableHashSet<T> set)
    parameters:
    - id: expected
      type: '{T}'
      description: The object expected to be in the set
    - id: set
      type: System.Collections.Immutable.ImmutableHashSet{{T}}
      description: The set to be inspected
    typeParameters:
    - id: T
      description: The type of the object to be verified
    content.vb: Public Shared Sub DoesNotContain(Of T)(expected As T, [set] As ImmutableHashSet(Of T))
  overload: v3.1.0.1:Xunit.Assert.DoesNotContain*
  exceptions:
  - type: Xunit.Sdk.ContainsException
    commentId: T:Xunit.Sdk.ContainsException
    description: Thrown when the object is not present in the set
  nameWithType.vb: Assert.DoesNotContain(Of T)(T, ImmutableHashSet(Of T))
  fullName.vb: Xunit.Assert.DoesNotContain(Of T)(T, System.Collections.Immutable.ImmutableHashSet(Of T))
  name.vb: DoesNotContain(Of T)(T, ImmutableHashSet(Of T))
- uid: v3.1.0.1:Xunit.Assert.DoesNotContain``1(``0,System.Collections.Immutable.ImmutableSortedSet{``0})
  commentId: M:Xunit.Assert.DoesNotContain``1(``0,System.Collections.Immutable.ImmutableSortedSet{``0})
  id: DoesNotContain``1(``0,System.Collections.Immutable.ImmutableSortedSet{``0})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: DoesNotContain<T>(T, ImmutableSortedSet<T>)
  nameWithType: Assert.DoesNotContain<T>(T, ImmutableSortedSet<T>)
  fullName: Xunit.Assert.DoesNotContain<T>(T, System.Collections.Immutable.ImmutableSortedSet<T>)
  type: Method
  source:
    id: DoesNotContain
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\SetAsserts.cs
    startLine: 207
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that the immutable sorted hashset does not contain the given item.
  example: []
  syntax:
    content: public static void DoesNotContain<T>(T expected, ImmutableSortedSet<T> set)
    parameters:
    - id: expected
      type: '{T}'
      description: The object expected to be in the set
    - id: set
      type: System.Collections.Immutable.ImmutableSortedSet{{T}}
      description: The set to be inspected
    typeParameters:
    - id: T
      description: The type of the object to be verified
    content.vb: Public Shared Sub DoesNotContain(Of T)(expected As T, [set] As ImmutableSortedSet(Of T))
  overload: v3.1.0.1:Xunit.Assert.DoesNotContain*
  exceptions:
  - type: Xunit.Sdk.ContainsException
    commentId: T:Xunit.Sdk.ContainsException
    description: Thrown when the object is not present in the set
  nameWithType.vb: Assert.DoesNotContain(Of T)(T, ImmutableSortedSet(Of T))
  fullName.vb: Xunit.Assert.DoesNotContain(Of T)(T, System.Collections.Immutable.ImmutableSortedSet(Of T))
  name.vb: DoesNotContain(Of T)(T, ImmutableSortedSet(Of T))
- uid: v3.1.0.1:Xunit.Assert.ProperSubset``1(System.Collections.Generic.ISet{``0},System.Collections.Generic.ISet{``0})
  commentId: M:Xunit.Assert.ProperSubset``1(System.Collections.Generic.ISet{``0},System.Collections.Generic.ISet{``0})
  id: ProperSubset``1(System.Collections.Generic.ISet{``0},System.Collections.Generic.ISet{``0})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: ProperSubset<T>(ISet<T>, ISet<T>?)
  nameWithType: Assert.ProperSubset<T>(ISet<T>, ISet<T>?)
  fullName: Xunit.Assert.ProperSubset<T>(System.Collections.Generic.ISet<T>, System.Collections.Generic.ISet<T>?)
  type: Method
  source:
    id: ProperSubset
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\SetAsserts.cs
    startLine: 220
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a set is a proper subset of another set.
  example: []
  syntax:
    content: public static void ProperSubset<T>(ISet<T> expectedSubset, ISet<T>? actual)
    parameters:
    - id: expectedSubset
      type: System.Collections.Generic.ISet{{T}}
      description: The expected subset
    - id: actual
      type: System.Collections.Generic.ISet{{T}}
      description: The set expected to be a proper subset
    typeParameters:
    - id: T
      description: The type of the object to be verified
    content.vb: Public Shared Sub ProperSubset(Of T)(expectedSubset As ISet(Of T), actual As ISet(Of T))
  overload: v3.1.0.1:Xunit.Assert.ProperSubset*
  exceptions:
  - type: Xunit.Sdk.ContainsException
    commentId: T:Xunit.Sdk.ContainsException
    description: Thrown when the actual set is not a proper subset of the expected set
  nameWithType.vb: Assert.ProperSubset(Of T)(ISet(Of T), ISet(Of T))
  fullName.vb: Xunit.Assert.ProperSubset(Of T)(System.Collections.Generic.ISet(Of T), System.Collections.Generic.ISet(Of T))
  name.vb: ProperSubset(Of T)(ISet(Of T), ISet(Of T))
- uid: v3.1.0.1:Xunit.Assert.ProperSuperset``1(System.Collections.Generic.ISet{``0},System.Collections.Generic.ISet{``0})
  commentId: M:Xunit.Assert.ProperSuperset``1(System.Collections.Generic.ISet{``0},System.Collections.Generic.ISet{``0})
  id: ProperSuperset``1(System.Collections.Generic.ISet{``0},System.Collections.Generic.ISet{``0})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: ProperSuperset<T>(ISet<T>, ISet<T>?)
  nameWithType: Assert.ProperSuperset<T>(ISet<T>, ISet<T>?)
  fullName: Xunit.Assert.ProperSuperset<T>(System.Collections.Generic.ISet<T>, System.Collections.Generic.ISet<T>?)
  type: Method
  source:
    id: ProperSuperset
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\SetAsserts.cs
    startLine: 244
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a set is a proper superset of another set.
  example: []
  syntax:
    content: public static void ProperSuperset<T>(ISet<T> expectedSuperset, ISet<T>? actual)
    parameters:
    - id: expectedSuperset
      type: System.Collections.Generic.ISet{{T}}
      description: The expected superset
    - id: actual
      type: System.Collections.Generic.ISet{{T}}
      description: The set expected to be a proper superset
    typeParameters:
    - id: T
      description: The type of the object to be verified
    content.vb: Public Shared Sub ProperSuperset(Of T)(expectedSuperset As ISet(Of T), actual As ISet(Of T))
  overload: v3.1.0.1:Xunit.Assert.ProperSuperset*
  exceptions:
  - type: Xunit.Sdk.ContainsException
    commentId: T:Xunit.Sdk.ContainsException
    description: Thrown when the actual set is not a proper superset of the expected set
  nameWithType.vb: Assert.ProperSuperset(Of T)(ISet(Of T), ISet(Of T))
  fullName.vb: Xunit.Assert.ProperSuperset(Of T)(System.Collections.Generic.ISet(Of T), System.Collections.Generic.ISet(Of T))
  name.vb: ProperSuperset(Of T)(ISet(Of T), ISet(Of T))
- uid: v3.1.0.1:Xunit.Assert.Subset``1(System.Collections.Generic.ISet{``0},System.Collections.Generic.ISet{``0})
  commentId: M:Xunit.Assert.Subset``1(System.Collections.Generic.ISet{``0},System.Collections.Generic.ISet{``0})
  id: Subset``1(System.Collections.Generic.ISet{``0},System.Collections.Generic.ISet{``0})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Subset<T>(ISet<T>, ISet<T>?)
  nameWithType: Assert.Subset<T>(ISet<T>, ISet<T>?)
  fullName: Xunit.Assert.Subset<T>(System.Collections.Generic.ISet<T>, System.Collections.Generic.ISet<T>?)
  type: Method
  source:
    id: Subset
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\SetAsserts.cs
    startLine: 268
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a set is a subset of another set.
  example: []
  syntax:
    content: public static void Subset<T>(ISet<T> expectedSubset, ISet<T>? actual)
    parameters:
    - id: expectedSubset
      type: System.Collections.Generic.ISet{{T}}
      description: The expected subset
    - id: actual
      type: System.Collections.Generic.ISet{{T}}
      description: The set expected to be a subset
    typeParameters:
    - id: T
      description: The type of the object to be verified
    content.vb: Public Shared Sub Subset(Of T)(expectedSubset As ISet(Of T), actual As ISet(Of T))
  overload: v3.1.0.1:Xunit.Assert.Subset*
  exceptions:
  - type: Xunit.Sdk.ContainsException
    commentId: T:Xunit.Sdk.ContainsException
    description: Thrown when the actual set is not a subset of the expected set
  nameWithType.vb: Assert.Subset(Of T)(ISet(Of T), ISet(Of T))
  fullName.vb: Xunit.Assert.Subset(Of T)(System.Collections.Generic.ISet(Of T), System.Collections.Generic.ISet(Of T))
  name.vb: Subset(Of T)(ISet(Of T), ISet(Of T))
- uid: v3.1.0.1:Xunit.Assert.Superset``1(System.Collections.Generic.ISet{``0},System.Collections.Generic.ISet{``0})
  commentId: M:Xunit.Assert.Superset``1(System.Collections.Generic.ISet{``0},System.Collections.Generic.ISet{``0})
  id: Superset``1(System.Collections.Generic.ISet{``0},System.Collections.Generic.ISet{``0})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Superset<T>(ISet<T>, ISet<T>?)
  nameWithType: Assert.Superset<T>(ISet<T>, ISet<T>?)
  fullName: Xunit.Assert.Superset<T>(System.Collections.Generic.ISet<T>, System.Collections.Generic.ISet<T>?)
  type: Method
  source:
    id: Superset
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\SetAsserts.cs
    startLine: 292
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a set is a superset of another set.
  example: []
  syntax:
    content: public static void Superset<T>(ISet<T> expectedSuperset, ISet<T>? actual)
    parameters:
    - id: expectedSuperset
      type: System.Collections.Generic.ISet{{T}}
      description: The expected superset
    - id: actual
      type: System.Collections.Generic.ISet{{T}}
      description: The set expected to be a superset
    typeParameters:
    - id: T
      description: The type of the object to be verified
    content.vb: Public Shared Sub Superset(Of T)(expectedSuperset As ISet(Of T), actual As ISet(Of T))
  overload: v3.1.0.1:Xunit.Assert.Superset*
  exceptions:
  - type: Xunit.Sdk.ContainsException
    commentId: T:Xunit.Sdk.ContainsException
    description: Thrown when the actual set is not a superset of the expected set
  nameWithType.vb: Assert.Superset(Of T)(ISet(Of T), ISet(Of T))
  fullName.vb: Xunit.Assert.Superset(Of T)(System.Collections.Generic.ISet(Of T), System.Collections.Generic.ISet(Of T))
  name.vb: Superset(Of T)(ISet(Of T), ISet(Of T))
- uid: v3.1.0.1:Xunit.Assert.Skip(System.String)
  commentId: M:Xunit.Assert.Skip(System.String)
  id: Skip(System.String)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Skip(string)
  nameWithType: Assert.Skip(string)
  fullName: Xunit.Assert.Skip(string)
  type: Method
  source:
    id: Skip
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\SkipAsserts.cs
    startLine: 31
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: >-
    Skips the current test. Used when determining whether a test should be skipped

    happens at runtime rather than at discovery time.
  example: []
  syntax:
    content: public static void Skip(string reason)
    parameters:
    - id: reason
      type: System.String
      description: The message to indicate why the test was skipped
    content.vb: Public Shared Sub Skip(reason As String)
  overload: v3.1.0.1:Xunit.Assert.Skip*
  nameWithType.vb: Assert.Skip(String)
  fullName.vb: Xunit.Assert.Skip(String)
  name.vb: Skip(String)
- uid: v3.1.0.1:Xunit.Assert.SkipUnless(System.Boolean,System.String)
  commentId: M:Xunit.Assert.SkipUnless(System.Boolean,System.String)
  id: SkipUnless(System.Boolean,System.String)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: SkipUnless(bool, string)
  nameWithType: Assert.SkipUnless(bool, string)
  fullName: Xunit.Assert.SkipUnless(bool, string)
  type: Method
  source:
    id: SkipUnless
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\SkipAsserts.cs
    startLine: 46
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Will skip the current test unless <code class="paramref">condition</code> evaluates to <code>true</code>.
  example: []
  syntax:
    content: public static void SkipUnless(bool condition, string reason)
    parameters:
    - id: condition
      type: System.Boolean
      description: >-
        When <code>true</code>, the test will continue to run; when <code>false</code>,
            the test will be skipped
    - id: reason
      type: System.String
      description: The message to indicate why the test was skipped
    content.vb: Public Shared Sub SkipUnless(condition As Boolean, reason As String)
  overload: v3.1.0.1:Xunit.Assert.SkipUnless*
  nameWithType.vb: Assert.SkipUnless(Boolean, String)
  fullName.vb: Xunit.Assert.SkipUnless(Boolean, String)
  name.vb: SkipUnless(Boolean, String)
- uid: v3.1.0.1:Xunit.Assert.SkipWhen(System.Boolean,System.String)
  commentId: M:Xunit.Assert.SkipWhen(System.Boolean,System.String)
  id: SkipWhen(System.Boolean,System.String)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: SkipWhen(bool, string)
  nameWithType: Assert.SkipWhen(bool, string)
  fullName: Xunit.Assert.SkipWhen(bool, string)
  type: Method
  source:
    id: SkipWhen
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\SkipAsserts.cs
    startLine: 66
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Will skip the current test when <code class="paramref">condition</code> evaluates to <code>true</code>.
  example: []
  syntax:
    content: public static void SkipWhen(bool condition, string reason)
    parameters:
    - id: condition
      type: System.Boolean
      description: >-
        When <code>true</code>, the test will be skipped; when <code>false</code>,
            the test will continue to run
    - id: reason
      type: System.String
      description: The message to indicate why the test was skipped
    content.vb: Public Shared Sub SkipWhen(condition As Boolean, reason As String)
  overload: v3.1.0.1:Xunit.Assert.SkipWhen*
  nameWithType.vb: Assert.SkipWhen(Boolean, String)
  fullName.vb: Xunit.Assert.SkipWhen(Boolean, String)
  name.vb: SkipWhen(Boolean, String)
- uid: v3.1.0.1:Xunit.Assert.Contains``1(System.Span{``0},System.Span{``0})
  commentId: M:Xunit.Assert.Contains``1(System.Span{``0},System.Span{``0})
  id: Contains``1(System.Span{``0},System.Span{``0})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Contains<T>(Span<T>, Span<T>)
  nameWithType: Assert.Contains<T>(Span<T>, Span<T>)
  fullName: Xunit.Assert.Contains<T>(System.Span<T>, System.Span<T>)
  type: Method
  source:
    id: Contains
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\SpanAsserts.cs
    startLine: 35
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a span contains a given sub-span
  example: []
  syntax:
    content: 'public static void Contains<T>(Span<T> expectedSubSpan, Span<T> actualSpan) where T : IEquatable<T>'
    parameters:
    - id: expectedSubSpan
      type: System.Span{{T}}
      description: The sub-span expected to be in the span
    - id: actualSpan
      type: System.Span{{T}}
      description: The span to be inspected
    typeParameters:
    - id: T
    content.vb: Public Shared Sub Contains(Of T As IEquatable(Of T))(expectedSubSpan As Span(Of T), actualSpan As Span(Of T))
  overload: v3.1.0.1:Xunit.Assert.Contains*
  exceptions:
  - type: Xunit.Sdk.ContainsException
    commentId: T:Xunit.Sdk.ContainsException
    description: Thrown when the sub-span is not present inside the span
  nameWithType.vb: Assert.Contains(Of T)(Span(Of T), Span(Of T))
  fullName.vb: Xunit.Assert.Contains(Of T)(System.Span(Of T), System.Span(Of T))
  name.vb: Contains(Of T)(Span(Of T), Span(Of T))
- uid: v3.1.0.1:Xunit.Assert.Contains``1(System.Span{``0},System.ReadOnlySpan{``0})
  commentId: M:Xunit.Assert.Contains``1(System.Span{``0},System.ReadOnlySpan{``0})
  id: Contains``1(System.Span{``0},System.ReadOnlySpan{``0})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Contains<T>(Span<T>, ReadOnlySpan<T>)
  nameWithType: Assert.Contains<T>(Span<T>, ReadOnlySpan<T>)
  fullName: Xunit.Assert.Contains<T>(System.Span<T>, System.ReadOnlySpan<T>)
  type: Method
  source:
    id: Contains
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\SpanAsserts.cs
    startLine: 47
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a span contains a given sub-span
  example: []
  syntax:
    content: 'public static void Contains<T>(Span<T> expectedSubSpan, ReadOnlySpan<T> actualSpan) where T : IEquatable<T>'
    parameters:
    - id: expectedSubSpan
      type: System.Span{{T}}
      description: The sub-span expected to be in the span
    - id: actualSpan
      type: System.ReadOnlySpan{{T}}
      description: The span to be inspected
    typeParameters:
    - id: T
    content.vb: Public Shared Sub Contains(Of T As IEquatable(Of T))(expectedSubSpan As Span(Of T), actualSpan As ReadOnlySpan(Of T))
  overload: v3.1.0.1:Xunit.Assert.Contains*
  exceptions:
  - type: Xunit.Sdk.ContainsException
    commentId: T:Xunit.Sdk.ContainsException
    description: Thrown when the sub-span is not present inside the span
  nameWithType.vb: Assert.Contains(Of T)(Span(Of T), ReadOnlySpan(Of T))
  fullName.vb: Xunit.Assert.Contains(Of T)(System.Span(Of T), System.ReadOnlySpan(Of T))
  name.vb: Contains(Of T)(Span(Of T), ReadOnlySpan(Of T))
- uid: v3.1.0.1:Xunit.Assert.Contains``1(System.ReadOnlySpan{``0},System.Span{``0})
  commentId: M:Xunit.Assert.Contains``1(System.ReadOnlySpan{``0},System.Span{``0})
  id: Contains``1(System.ReadOnlySpan{``0},System.Span{``0})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Contains<T>(ReadOnlySpan<T>, Span<T>)
  nameWithType: Assert.Contains<T>(ReadOnlySpan<T>, Span<T>)
  fullName: Xunit.Assert.Contains<T>(System.ReadOnlySpan<T>, System.Span<T>)
  type: Method
  source:
    id: Contains
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\SpanAsserts.cs
    startLine: 59
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a span contains a given sub-span
  example: []
  syntax:
    content: 'public static void Contains<T>(ReadOnlySpan<T> expectedSubSpan, Span<T> actualSpan) where T : IEquatable<T>'
    parameters:
    - id: expectedSubSpan
      type: System.ReadOnlySpan{{T}}
      description: The sub-span expected to be in the span
    - id: actualSpan
      type: System.Span{{T}}
      description: The span to be inspected
    typeParameters:
    - id: T
    content.vb: Public Shared Sub Contains(Of T As IEquatable(Of T))(expectedSubSpan As ReadOnlySpan(Of T), actualSpan As Span(Of T))
  overload: v3.1.0.1:Xunit.Assert.Contains*
  exceptions:
  - type: Xunit.Sdk.ContainsException
    commentId: T:Xunit.Sdk.ContainsException
    description: Thrown when the sub-span is not present inside the span
  nameWithType.vb: Assert.Contains(Of T)(ReadOnlySpan(Of T), Span(Of T))
  fullName.vb: Xunit.Assert.Contains(Of T)(System.ReadOnlySpan(Of T), System.Span(Of T))
  name.vb: Contains(Of T)(ReadOnlySpan(Of T), Span(Of T))
- uid: v3.1.0.1:Xunit.Assert.Contains``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})
  commentId: M:Xunit.Assert.Contains``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})
  id: Contains``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Contains<T>(ReadOnlySpan<T>, ReadOnlySpan<T>)
  nameWithType: Assert.Contains<T>(ReadOnlySpan<T>, ReadOnlySpan<T>)
  fullName: Xunit.Assert.Contains<T>(System.ReadOnlySpan<T>, System.ReadOnlySpan<T>)
  type: Method
  source:
    id: Contains
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\SpanAsserts.cs
    startLine: 71
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a span contains a given sub-span
  example: []
  syntax:
    content: 'public static void Contains<T>(ReadOnlySpan<T> expectedSubSpan, ReadOnlySpan<T> actualSpan) where T : IEquatable<T>'
    parameters:
    - id: expectedSubSpan
      type: System.ReadOnlySpan{{T}}
      description: The sub-span expected to be in the span
    - id: actualSpan
      type: System.ReadOnlySpan{{T}}
      description: The span to be inspected
    typeParameters:
    - id: T
    content.vb: Public Shared Sub Contains(Of T As IEquatable(Of T))(expectedSubSpan As ReadOnlySpan(Of T), actualSpan As ReadOnlySpan(Of T))
  overload: v3.1.0.1:Xunit.Assert.Contains*
  exceptions:
  - type: Xunit.Sdk.ContainsException
    commentId: T:Xunit.Sdk.ContainsException
    description: Thrown when the sub-span is not present inside the span
  nameWithType.vb: Assert.Contains(Of T)(ReadOnlySpan(Of T), ReadOnlySpan(Of T))
  fullName.vb: Xunit.Assert.Contains(Of T)(System.ReadOnlySpan(Of T), System.ReadOnlySpan(Of T))
  name.vb: Contains(Of T)(ReadOnlySpan(Of T), ReadOnlySpan(Of T))
- uid: v3.1.0.1:Xunit.Assert.DoesNotContain``1(System.Span{``0},System.Span{``0})
  commentId: M:Xunit.Assert.DoesNotContain``1(System.Span{``0},System.Span{``0})
  id: DoesNotContain``1(System.Span{``0},System.Span{``0})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: DoesNotContain<T>(Span<T>, Span<T>)
  nameWithType: Assert.DoesNotContain<T>(Span<T>, Span<T>)
  fullName: Xunit.Assert.DoesNotContain<T>(System.Span<T>, System.Span<T>)
  type: Method
  source:
    id: DoesNotContain
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\SpanAsserts.cs
    startLine: 89
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a span does not contain a given sub-span
  example: []
  syntax:
    content: 'public static void DoesNotContain<T>(Span<T> expectedSubSpan, Span<T> actualSpan) where T : IEquatable<T>'
    parameters:
    - id: expectedSubSpan
      type: System.Span{{T}}
      description: The sub-span expected not to be in the span
    - id: actualSpan
      type: System.Span{{T}}
      description: The span to be inspected
    typeParameters:
    - id: T
    content.vb: Public Shared Sub DoesNotContain(Of T As IEquatable(Of T))(expectedSubSpan As Span(Of T), actualSpan As Span(Of T))
  overload: v3.1.0.1:Xunit.Assert.DoesNotContain*
  exceptions:
  - type: Xunit.Sdk.DoesNotContainException
    commentId: T:Xunit.Sdk.DoesNotContainException
    description: Thrown when the sub-span is present inside the span
  nameWithType.vb: Assert.DoesNotContain(Of T)(Span(Of T), Span(Of T))
  fullName.vb: Xunit.Assert.DoesNotContain(Of T)(System.Span(Of T), System.Span(Of T))
  name.vb: DoesNotContain(Of T)(Span(Of T), Span(Of T))
- uid: v3.1.0.1:Xunit.Assert.DoesNotContain``1(System.Span{``0},System.ReadOnlySpan{``0})
  commentId: M:Xunit.Assert.DoesNotContain``1(System.Span{``0},System.ReadOnlySpan{``0})
  id: DoesNotContain``1(System.Span{``0},System.ReadOnlySpan{``0})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: DoesNotContain<T>(Span<T>, ReadOnlySpan<T>)
  nameWithType: Assert.DoesNotContain<T>(Span<T>, ReadOnlySpan<T>)
  fullName: Xunit.Assert.DoesNotContain<T>(System.Span<T>, System.ReadOnlySpan<T>)
  type: Method
  source:
    id: DoesNotContain
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\SpanAsserts.cs
    startLine: 101
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a span does not contain a given sub-span
  example: []
  syntax:
    content: 'public static void DoesNotContain<T>(Span<T> expectedSubSpan, ReadOnlySpan<T> actualSpan) where T : IEquatable<T>'
    parameters:
    - id: expectedSubSpan
      type: System.Span{{T}}
      description: The sub-span expected not to be in the span
    - id: actualSpan
      type: System.ReadOnlySpan{{T}}
      description: The span to be inspected
    typeParameters:
    - id: T
    content.vb: Public Shared Sub DoesNotContain(Of T As IEquatable(Of T))(expectedSubSpan As Span(Of T), actualSpan As ReadOnlySpan(Of T))
  overload: v3.1.0.1:Xunit.Assert.DoesNotContain*
  exceptions:
  - type: Xunit.Sdk.DoesNotContainException
    commentId: T:Xunit.Sdk.DoesNotContainException
    description: Thrown when the sub-span is present inside the span
  nameWithType.vb: Assert.DoesNotContain(Of T)(Span(Of T), ReadOnlySpan(Of T))
  fullName.vb: Xunit.Assert.DoesNotContain(Of T)(System.Span(Of T), System.ReadOnlySpan(Of T))
  name.vb: DoesNotContain(Of T)(Span(Of T), ReadOnlySpan(Of T))
- uid: v3.1.0.1:Xunit.Assert.DoesNotContain``1(System.ReadOnlySpan{``0},System.Span{``0})
  commentId: M:Xunit.Assert.DoesNotContain``1(System.ReadOnlySpan{``0},System.Span{``0})
  id: DoesNotContain``1(System.ReadOnlySpan{``0},System.Span{``0})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: DoesNotContain<T>(ReadOnlySpan<T>, Span<T>)
  nameWithType: Assert.DoesNotContain<T>(ReadOnlySpan<T>, Span<T>)
  fullName: Xunit.Assert.DoesNotContain<T>(System.ReadOnlySpan<T>, System.Span<T>)
  type: Method
  source:
    id: DoesNotContain
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\SpanAsserts.cs
    startLine: 113
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a span does not contain a given sub-span
  example: []
  syntax:
    content: 'public static void DoesNotContain<T>(ReadOnlySpan<T> expectedSubSpan, Span<T> actualSpan) where T : IEquatable<T>'
    parameters:
    - id: expectedSubSpan
      type: System.ReadOnlySpan{{T}}
      description: The sub-span expected not to be in the span
    - id: actualSpan
      type: System.Span{{T}}
      description: The span to be inspected
    typeParameters:
    - id: T
    content.vb: Public Shared Sub DoesNotContain(Of T As IEquatable(Of T))(expectedSubSpan As ReadOnlySpan(Of T), actualSpan As Span(Of T))
  overload: v3.1.0.1:Xunit.Assert.DoesNotContain*
  exceptions:
  - type: Xunit.Sdk.DoesNotContainException
    commentId: T:Xunit.Sdk.DoesNotContainException
    description: Thrown when the sub-span is present inside the span
  nameWithType.vb: Assert.DoesNotContain(Of T)(ReadOnlySpan(Of T), Span(Of T))
  fullName.vb: Xunit.Assert.DoesNotContain(Of T)(System.ReadOnlySpan(Of T), System.Span(Of T))
  name.vb: DoesNotContain(Of T)(ReadOnlySpan(Of T), Span(Of T))
- uid: v3.1.0.1:Xunit.Assert.DoesNotContain``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})
  commentId: M:Xunit.Assert.DoesNotContain``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})
  id: DoesNotContain``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: DoesNotContain<T>(ReadOnlySpan<T>, ReadOnlySpan<T>)
  nameWithType: Assert.DoesNotContain<T>(ReadOnlySpan<T>, ReadOnlySpan<T>)
  fullName: Xunit.Assert.DoesNotContain<T>(System.ReadOnlySpan<T>, System.ReadOnlySpan<T>)
  type: Method
  source:
    id: DoesNotContain
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\SpanAsserts.cs
    startLine: 125
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a span does not contain a given sub-span
  example: []
  syntax:
    content: 'public static void DoesNotContain<T>(ReadOnlySpan<T> expectedSubSpan, ReadOnlySpan<T> actualSpan) where T : IEquatable<T>'
    parameters:
    - id: expectedSubSpan
      type: System.ReadOnlySpan{{T}}
      description: The sub-span expected not to be in the span
    - id: actualSpan
      type: System.ReadOnlySpan{{T}}
      description: The span to be inspected
    typeParameters:
    - id: T
    content.vb: Public Shared Sub DoesNotContain(Of T As IEquatable(Of T))(expectedSubSpan As ReadOnlySpan(Of T), actualSpan As ReadOnlySpan(Of T))
  overload: v3.1.0.1:Xunit.Assert.DoesNotContain*
  exceptions:
  - type: Xunit.Sdk.DoesNotContainException
    commentId: T:Xunit.Sdk.DoesNotContainException
    description: Thrown when the sub-span is present inside the span
  nameWithType.vb: Assert.DoesNotContain(Of T)(ReadOnlySpan(Of T), ReadOnlySpan(Of T))
  fullName.vb: Xunit.Assert.DoesNotContain(Of T)(System.ReadOnlySpan(Of T), System.ReadOnlySpan(Of T))
  name.vb: DoesNotContain(Of T)(ReadOnlySpan(Of T), ReadOnlySpan(Of T))
- uid: v3.1.0.1:Xunit.Assert.Equal``1(System.ReadOnlySpan{``0},``0[])
  commentId: M:Xunit.Assert.Equal``1(System.ReadOnlySpan{``0},``0[])
  id: Equal``1(System.ReadOnlySpan{``0},``0[])
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Equal<T>(ReadOnlySpan<T>, T[])
  nameWithType: Assert.Equal<T>(ReadOnlySpan<T>, T[])
  fullName: Xunit.Assert.Equal<T>(System.ReadOnlySpan<T>, T[])
  type: Method
  source:
    id: Equal
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\SpanAsserts.cs
    startLine: 153
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a span and an array contain the same values in the same order.
  example: []
  syntax:
    content: 'public static void Equal<T>(ReadOnlySpan<T> expectedSpan, T[] actualArray) where T : IEquatable<T>'
    parameters:
    - id: expectedSpan
      type: System.ReadOnlySpan{{T}}
      description: The expected span value.
    - id: actualArray
      type: '{T}[]'
      description: The actual array value.
    typeParameters:
    - id: T
    content.vb: Public Shared Sub Equal(Of T As IEquatable(Of T))(expectedSpan As ReadOnlySpan(Of T), actualArray As T())
  overload: v3.1.0.1:Xunit.Assert.Equal*
  exceptions:
  - type: Xunit.Sdk.EqualException
    commentId: T:Xunit.Sdk.EqualException
    description: Thrown when the collections are not equal.
  nameWithType.vb: Assert.Equal(Of T)(ReadOnlySpan(Of T), T())
  fullName.vb: Xunit.Assert.Equal(Of T)(System.ReadOnlySpan(Of T), T())
  name.vb: Equal(Of T)(ReadOnlySpan(Of T), T())
- uid: v3.1.0.1:Xunit.Assert.Equal``1(System.Span{``0},System.Span{``0})
  commentId: M:Xunit.Assert.Equal``1(System.Span{``0},System.Span{``0})
  id: Equal``1(System.Span{``0},System.Span{``0})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Equal<T>(Span<T>, Span<T>)
  nameWithType: Assert.Equal<T>(Span<T>, Span<T>)
  fullName: Xunit.Assert.Equal<T>(System.Span<T>, System.Span<T>)
  type: Method
  source:
    id: Equal
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\SpanAsserts.cs
    startLine: 165
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that two spans contain the same values in the same order.
  example: []
  syntax:
    content: 'public static void Equal<T>(Span<T> expectedSpan, Span<T> actualSpan) where T : IEquatable<T>'
    parameters:
    - id: expectedSpan
      type: System.Span{{T}}
      description: The expected span value.
    - id: actualSpan
      type: System.Span{{T}}
      description: The actual span value.
    typeParameters:
    - id: T
    content.vb: Public Shared Sub Equal(Of T As IEquatable(Of T))(expectedSpan As Span(Of T), actualSpan As Span(Of T))
  overload: v3.1.0.1:Xunit.Assert.Equal*
  exceptions:
  - type: Xunit.Sdk.EqualException
    commentId: T:Xunit.Sdk.EqualException
    description: Thrown when the spans are not equal.
  nameWithType.vb: Assert.Equal(Of T)(Span(Of T), Span(Of T))
  fullName.vb: Xunit.Assert.Equal(Of T)(System.Span(Of T), System.Span(Of T))
  name.vb: Equal(Of T)(Span(Of T), Span(Of T))
- uid: v3.1.0.1:Xunit.Assert.Equal``1(System.Span{``0},System.ReadOnlySpan{``0})
  commentId: M:Xunit.Assert.Equal``1(System.Span{``0},System.ReadOnlySpan{``0})
  id: Equal``1(System.Span{``0},System.ReadOnlySpan{``0})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Equal<T>(Span<T>, ReadOnlySpan<T>)
  nameWithType: Assert.Equal<T>(Span<T>, ReadOnlySpan<T>)
  fullName: Xunit.Assert.Equal<T>(System.Span<T>, System.ReadOnlySpan<T>)
  type: Method
  source:
    id: Equal
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\SpanAsserts.cs
    startLine: 177
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that two spans contain the same values in the same order.
  example: []
  syntax:
    content: 'public static void Equal<T>(Span<T> expectedSpan, ReadOnlySpan<T> actualSpan) where T : IEquatable<T>'
    parameters:
    - id: expectedSpan
      type: System.Span{{T}}
      description: The expected span value.
    - id: actualSpan
      type: System.ReadOnlySpan{{T}}
      description: The actual span value.
    typeParameters:
    - id: T
    content.vb: Public Shared Sub Equal(Of T As IEquatable(Of T))(expectedSpan As Span(Of T), actualSpan As ReadOnlySpan(Of T))
  overload: v3.1.0.1:Xunit.Assert.Equal*
  exceptions:
  - type: Xunit.Sdk.EqualException
    commentId: T:Xunit.Sdk.EqualException
    description: Thrown when the spans are not equal.
  nameWithType.vb: Assert.Equal(Of T)(Span(Of T), ReadOnlySpan(Of T))
  fullName.vb: Xunit.Assert.Equal(Of T)(System.Span(Of T), System.ReadOnlySpan(Of T))
  name.vb: Equal(Of T)(Span(Of T), ReadOnlySpan(Of T))
- uid: v3.1.0.1:Xunit.Assert.Equal``1(System.ReadOnlySpan{``0},System.Span{``0})
  commentId: M:Xunit.Assert.Equal``1(System.ReadOnlySpan{``0},System.Span{``0})
  id: Equal``1(System.ReadOnlySpan{``0},System.Span{``0})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Equal<T>(ReadOnlySpan<T>, Span<T>)
  nameWithType: Assert.Equal<T>(ReadOnlySpan<T>, Span<T>)
  fullName: Xunit.Assert.Equal<T>(System.ReadOnlySpan<T>, System.Span<T>)
  type: Method
  source:
    id: Equal
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\SpanAsserts.cs
    startLine: 189
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that two spans contain the same values in the same order.
  example: []
  syntax:
    content: 'public static void Equal<T>(ReadOnlySpan<T> expectedSpan, Span<T> actualSpan) where T : IEquatable<T>'
    parameters:
    - id: expectedSpan
      type: System.ReadOnlySpan{{T}}
      description: The expected span value.
    - id: actualSpan
      type: System.Span{{T}}
      description: The actual span value.
    typeParameters:
    - id: T
    content.vb: Public Shared Sub Equal(Of T As IEquatable(Of T))(expectedSpan As ReadOnlySpan(Of T), actualSpan As Span(Of T))
  overload: v3.1.0.1:Xunit.Assert.Equal*
  exceptions:
  - type: Xunit.Sdk.EqualException
    commentId: T:Xunit.Sdk.EqualException
    description: Thrown when the spans are not equal.
  nameWithType.vb: Assert.Equal(Of T)(ReadOnlySpan(Of T), Span(Of T))
  fullName.vb: Xunit.Assert.Equal(Of T)(System.ReadOnlySpan(Of T), System.Span(Of T))
  name.vb: Equal(Of T)(ReadOnlySpan(Of T), Span(Of T))
- uid: v3.1.0.1:Xunit.Assert.Equal``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})
  commentId: M:Xunit.Assert.Equal``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})
  id: Equal``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Equal<T>(ReadOnlySpan<T>, ReadOnlySpan<T>)
  nameWithType: Assert.Equal<T>(ReadOnlySpan<T>, ReadOnlySpan<T>)
  fullName: Xunit.Assert.Equal<T>(System.ReadOnlySpan<T>, System.ReadOnlySpan<T>)
  type: Method
  source:
    id: Equal
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\SpanAsserts.cs
    startLine: 201
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that two spans contain the same values in the same order.
  example: []
  syntax:
    content: 'public static void Equal<T>(ReadOnlySpan<T> expectedSpan, ReadOnlySpan<T> actualSpan) where T : IEquatable<T>'
    parameters:
    - id: expectedSpan
      type: System.ReadOnlySpan{{T}}
      description: The expected span value.
    - id: actualSpan
      type: System.ReadOnlySpan{{T}}
      description: The actual span value.
    typeParameters:
    - id: T
    content.vb: Public Shared Sub Equal(Of T As IEquatable(Of T))(expectedSpan As ReadOnlySpan(Of T), actualSpan As ReadOnlySpan(Of T))
  overload: v3.1.0.1:Xunit.Assert.Equal*
  exceptions:
  - type: Xunit.Sdk.EqualException
    commentId: T:Xunit.Sdk.EqualException
    description: Thrown when the spans are not equal.
  nameWithType.vb: Assert.Equal(Of T)(ReadOnlySpan(Of T), ReadOnlySpan(Of T))
  fullName.vb: Xunit.Assert.Equal(Of T)(System.ReadOnlySpan(Of T), System.ReadOnlySpan(Of T))
  name.vb: Equal(Of T)(ReadOnlySpan(Of T), ReadOnlySpan(Of T))
- uid: v3.1.0.1:Xunit.Assert.Contains(System.String,System.String)
  commentId: M:Xunit.Assert.Contains(System.String,System.String)
  id: Contains(System.String,System.String)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Contains(string, string?)
  nameWithType: Assert.Contains(string, string?)
  fullName: Xunit.Assert.Contains(string, string?)
  type: Method
  source:
    id: Contains
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 37
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a string contains a given sub-string, using the current culture.
  example: []
  syntax:
    content: public static void Contains(string expectedSubstring, string? actualString)
    parameters:
    - id: expectedSubstring
      type: System.String
      description: The sub-string expected to be in the string
    - id: actualString
      type: System.String
      description: The string to be inspected
    content.vb: Public Shared Sub Contains(expectedSubstring As String, actualString As String)
  overload: v3.1.0.1:Xunit.Assert.Contains*
  exceptions:
  - type: Xunit.Sdk.ContainsException
    commentId: T:Xunit.Sdk.ContainsException
    description: Thrown when the sub-string is not present inside the string
  nameWithType.vb: Assert.Contains(String, String)
  fullName.vb: Xunit.Assert.Contains(String, String)
  name.vb: Contains(String, String)
- uid: v3.1.0.1:Xunit.Assert.Contains(System.String,System.String,System.StringComparison)
  commentId: M:Xunit.Assert.Contains(System.String,System.String,System.StringComparison)
  id: Contains(System.String,System.String,System.StringComparison)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Contains(string, string?, StringComparison)
  nameWithType: Assert.Contains(string, string?, StringComparison)
  fullName: Xunit.Assert.Contains(string, string?, System.StringComparison)
  type: Method
  source:
    id: Contains
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 53
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a string contains a given sub-string, using the given comparison type.
  example: []
  syntax:
    content: public static void Contains(string expectedSubstring, string? actualString, StringComparison comparisonType)
    parameters:
    - id: expectedSubstring
      type: System.String
      description: The sub-string expected to be in the string
    - id: actualString
      type: System.String
      description: The string to be inspected
    - id: comparisonType
      type: System.StringComparison
      description: The type of string comparison to perform
    content.vb: Public Shared Sub Contains(expectedSubstring As String, actualString As String, comparisonType As StringComparison)
  overload: v3.1.0.1:Xunit.Assert.Contains*
  exceptions:
  - type: Xunit.Sdk.ContainsException
    commentId: T:Xunit.Sdk.ContainsException
    description: Thrown when the sub-string is not present inside the string
  nameWithType.vb: Assert.Contains(String, String, StringComparison)
  fullName.vb: Xunit.Assert.Contains(String, String, System.StringComparison)
  name.vb: Contains(String, String, StringComparison)
- uid: v3.1.0.1:Xunit.Assert.Contains(System.Memory{System.Char},System.Memory{System.Char})
  commentId: M:Xunit.Assert.Contains(System.Memory{System.Char},System.Memory{System.Char})
  id: Contains(System.Memory{System.Char},System.Memory{System.Char})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Contains(Memory<char>, Memory<char>)
  nameWithType: Assert.Contains(Memory<char>, Memory<char>)
  fullName: Xunit.Assert.Contains(System.Memory<char>, System.Memory<char>)
  type: Method
  source:
    id: Contains
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 76
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a string contains a given sub-string, using the current culture.
  example: []
  syntax:
    content: public static void Contains(Memory<char> expectedSubstring, Memory<char> actualString)
    parameters:
    - id: expectedSubstring
      type: System.Memory{System.Char}
      description: The sub-string expected to be in the string
    - id: actualString
      type: System.Memory{System.Char}
      description: The string to be inspected
    content.vb: Public Shared Sub Contains(expectedSubstring As Memory(Of Char), actualString As Memory(Of Char))
  overload: v3.1.0.1:Xunit.Assert.Contains*
  exceptions:
  - type: Xunit.Sdk.ContainsException
    commentId: T:Xunit.Sdk.ContainsException
    description: Thrown when the sub-string is not present inside the string
  nameWithType.vb: Assert.Contains(Memory(Of Char), Memory(Of Char))
  fullName.vb: Xunit.Assert.Contains(System.Memory(Of Char), System.Memory(Of Char))
  name.vb: Contains(Memory(Of Char), Memory(Of Char))
- uid: v3.1.0.1:Xunit.Assert.Contains(System.Memory{System.Char},System.ReadOnlyMemory{System.Char})
  commentId: M:Xunit.Assert.Contains(System.Memory{System.Char},System.ReadOnlyMemory{System.Char})
  id: Contains(System.Memory{System.Char},System.ReadOnlyMemory{System.Char})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Contains(Memory<char>, ReadOnlyMemory<char>)
  nameWithType: Assert.Contains(Memory<char>, ReadOnlyMemory<char>)
  fullName: Xunit.Assert.Contains(System.Memory<char>, System.ReadOnlyMemory<char>)
  type: Method
  source:
    id: Contains
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 87
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a string contains a given sub-string, using the current culture.
  example: []
  syntax:
    content: public static void Contains(Memory<char> expectedSubstring, ReadOnlyMemory<char> actualString)
    parameters:
    - id: expectedSubstring
      type: System.Memory{System.Char}
      description: The sub-string expected to be in the string
    - id: actualString
      type: System.ReadOnlyMemory{System.Char}
      description: The string to be inspected
    content.vb: Public Shared Sub Contains(expectedSubstring As Memory(Of Char), actualString As ReadOnlyMemory(Of Char))
  overload: v3.1.0.1:Xunit.Assert.Contains*
  exceptions:
  - type: Xunit.Sdk.ContainsException
    commentId: T:Xunit.Sdk.ContainsException
    description: Thrown when the sub-string is not present inside the string
  nameWithType.vb: Assert.Contains(Memory(Of Char), ReadOnlyMemory(Of Char))
  fullName.vb: Xunit.Assert.Contains(System.Memory(Of Char), System.ReadOnlyMemory(Of Char))
  name.vb: Contains(Memory(Of Char), ReadOnlyMemory(Of Char))
- uid: v3.1.0.1:Xunit.Assert.Contains(System.ReadOnlyMemory{System.Char},System.Memory{System.Char})
  commentId: M:Xunit.Assert.Contains(System.ReadOnlyMemory{System.Char},System.Memory{System.Char})
  id: Contains(System.ReadOnlyMemory{System.Char},System.Memory{System.Char})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Contains(ReadOnlyMemory<char>, Memory<char>)
  nameWithType: Assert.Contains(ReadOnlyMemory<char>, Memory<char>)
  fullName: Xunit.Assert.Contains(System.ReadOnlyMemory<char>, System.Memory<char>)
  type: Method
  source:
    id: Contains
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 98
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a string contains a given sub-string, using the current culture.
  example: []
  syntax:
    content: public static void Contains(ReadOnlyMemory<char> expectedSubstring, Memory<char> actualString)
    parameters:
    - id: expectedSubstring
      type: System.ReadOnlyMemory{System.Char}
      description: The sub-string expected to be in the string
    - id: actualString
      type: System.Memory{System.Char}
      description: The string to be inspected
    content.vb: Public Shared Sub Contains(expectedSubstring As ReadOnlyMemory(Of Char), actualString As Memory(Of Char))
  overload: v3.1.0.1:Xunit.Assert.Contains*
  exceptions:
  - type: Xunit.Sdk.ContainsException
    commentId: T:Xunit.Sdk.ContainsException
    description: Thrown when the sub-string is not present inside the string
  nameWithType.vb: Assert.Contains(ReadOnlyMemory(Of Char), Memory(Of Char))
  fullName.vb: Xunit.Assert.Contains(System.ReadOnlyMemory(Of Char), System.Memory(Of Char))
  name.vb: Contains(ReadOnlyMemory(Of Char), Memory(Of Char))
- uid: v3.1.0.1:Xunit.Assert.Contains(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char})
  commentId: M:Xunit.Assert.Contains(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char})
  id: Contains(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Contains(ReadOnlyMemory<char>, ReadOnlyMemory<char>)
  nameWithType: Assert.Contains(ReadOnlyMemory<char>, ReadOnlyMemory<char>)
  fullName: Xunit.Assert.Contains(System.ReadOnlyMemory<char>, System.ReadOnlyMemory<char>)
  type: Method
  source:
    id: Contains
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 109
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a string contains a given sub-string, using the current culture.
  example: []
  syntax:
    content: public static void Contains(ReadOnlyMemory<char> expectedSubstring, ReadOnlyMemory<char> actualString)
    parameters:
    - id: expectedSubstring
      type: System.ReadOnlyMemory{System.Char}
      description: The sub-string expected to be in the string
    - id: actualString
      type: System.ReadOnlyMemory{System.Char}
      description: The string to be inspected
    content.vb: Public Shared Sub Contains(expectedSubstring As ReadOnlyMemory(Of Char), actualString As ReadOnlyMemory(Of Char))
  overload: v3.1.0.1:Xunit.Assert.Contains*
  exceptions:
  - type: Xunit.Sdk.ContainsException
    commentId: T:Xunit.Sdk.ContainsException
    description: Thrown when the sub-string is not present inside the string
  nameWithType.vb: Assert.Contains(ReadOnlyMemory(Of Char), ReadOnlyMemory(Of Char))
  fullName.vb: Xunit.Assert.Contains(System.ReadOnlyMemory(Of Char), System.ReadOnlyMemory(Of Char))
  name.vb: Contains(ReadOnlyMemory(Of Char), ReadOnlyMemory(Of Char))
- uid: v3.1.0.1:Xunit.Assert.Contains(System.Memory{System.Char},System.Memory{System.Char},System.StringComparison)
  commentId: M:Xunit.Assert.Contains(System.Memory{System.Char},System.Memory{System.Char},System.StringComparison)
  id: Contains(System.Memory{System.Char},System.Memory{System.Char},System.StringComparison)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Contains(Memory<char>, Memory<char>, StringComparison)
  nameWithType: Assert.Contains(Memory<char>, Memory<char>, StringComparison)
  fullName: Xunit.Assert.Contains(System.Memory<char>, System.Memory<char>, System.StringComparison)
  type: Method
  source:
    id: Contains
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 121
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a string contains a given sub-string, using the given comparison type.
  example: []
  syntax:
    content: public static void Contains(Memory<char> expectedSubstring, Memory<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture)
    parameters:
    - id: expectedSubstring
      type: System.Memory{System.Char}
      description: The sub-string expected to be in the string
    - id: actualString
      type: System.Memory{System.Char}
      description: The string to be inspected
    - id: comparisonType
      type: System.StringComparison
      description: The type of string comparison to perform
    content.vb: Public Shared Sub Contains(expectedSubstring As Memory(Of Char), actualString As Memory(Of Char), comparisonType As StringComparison = StringComparison.CurrentCulture)
  overload: v3.1.0.1:Xunit.Assert.Contains*
  exceptions:
  - type: Xunit.Sdk.ContainsException
    commentId: T:Xunit.Sdk.ContainsException
    description: Thrown when the sub-string is not present inside the string
  nameWithType.vb: Assert.Contains(Memory(Of Char), Memory(Of Char), StringComparison)
  fullName.vb: Xunit.Assert.Contains(System.Memory(Of Char), System.Memory(Of Char), System.StringComparison)
  name.vb: Contains(Memory(Of Char), Memory(Of Char), StringComparison)
- uid: v3.1.0.1:Xunit.Assert.Contains(System.Memory{System.Char},System.ReadOnlyMemory{System.Char},System.StringComparison)
  commentId: M:Xunit.Assert.Contains(System.Memory{System.Char},System.ReadOnlyMemory{System.Char},System.StringComparison)
  id: Contains(System.Memory{System.Char},System.ReadOnlyMemory{System.Char},System.StringComparison)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Contains(Memory<char>, ReadOnlyMemory<char>, StringComparison)
  nameWithType: Assert.Contains(Memory<char>, ReadOnlyMemory<char>, StringComparison)
  fullName: Xunit.Assert.Contains(System.Memory<char>, System.ReadOnlyMemory<char>, System.StringComparison)
  type: Method
  source:
    id: Contains
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 134
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a string contains a given sub-string, using the given comparison type.
  example: []
  syntax:
    content: public static void Contains(Memory<char> expectedSubstring, ReadOnlyMemory<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture)
    parameters:
    - id: expectedSubstring
      type: System.Memory{System.Char}
      description: The sub-string expected to be in the string
    - id: actualString
      type: System.ReadOnlyMemory{System.Char}
      description: The string to be inspected
    - id: comparisonType
      type: System.StringComparison
      description: The type of string comparison to perform
    content.vb: Public Shared Sub Contains(expectedSubstring As Memory(Of Char), actualString As ReadOnlyMemory(Of Char), comparisonType As StringComparison = StringComparison.CurrentCulture)
  overload: v3.1.0.1:Xunit.Assert.Contains*
  exceptions:
  - type: Xunit.Sdk.ContainsException
    commentId: T:Xunit.Sdk.ContainsException
    description: Thrown when the sub-string is not present inside the string
  nameWithType.vb: Assert.Contains(Memory(Of Char), ReadOnlyMemory(Of Char), StringComparison)
  fullName.vb: Xunit.Assert.Contains(System.Memory(Of Char), System.ReadOnlyMemory(Of Char), System.StringComparison)
  name.vb: Contains(Memory(Of Char), ReadOnlyMemory(Of Char), StringComparison)
- uid: v3.1.0.1:Xunit.Assert.Contains(System.ReadOnlyMemory{System.Char},System.Memory{System.Char},System.StringComparison)
  commentId: M:Xunit.Assert.Contains(System.ReadOnlyMemory{System.Char},System.Memory{System.Char},System.StringComparison)
  id: Contains(System.ReadOnlyMemory{System.Char},System.Memory{System.Char},System.StringComparison)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Contains(ReadOnlyMemory<char>, Memory<char>, StringComparison)
  nameWithType: Assert.Contains(ReadOnlyMemory<char>, Memory<char>, StringComparison)
  fullName: Xunit.Assert.Contains(System.ReadOnlyMemory<char>, System.Memory<char>, System.StringComparison)
  type: Method
  source:
    id: Contains
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 147
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a string contains a given sub-string, using the given comparison type.
  example: []
  syntax:
    content: public static void Contains(ReadOnlyMemory<char> expectedSubstring, Memory<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture)
    parameters:
    - id: expectedSubstring
      type: System.ReadOnlyMemory{System.Char}
      description: The sub-string expected to be in the string
    - id: actualString
      type: System.Memory{System.Char}
      description: The string to be inspected
    - id: comparisonType
      type: System.StringComparison
      description: The type of string comparison to perform
    content.vb: Public Shared Sub Contains(expectedSubstring As ReadOnlyMemory(Of Char), actualString As Memory(Of Char), comparisonType As StringComparison = StringComparison.CurrentCulture)
  overload: v3.1.0.1:Xunit.Assert.Contains*
  exceptions:
  - type: Xunit.Sdk.ContainsException
    commentId: T:Xunit.Sdk.ContainsException
    description: Thrown when the sub-string is not present inside the string
  nameWithType.vb: Assert.Contains(ReadOnlyMemory(Of Char), Memory(Of Char), StringComparison)
  fullName.vb: Xunit.Assert.Contains(System.ReadOnlyMemory(Of Char), System.Memory(Of Char), System.StringComparison)
  name.vb: Contains(ReadOnlyMemory(Of Char), Memory(Of Char), StringComparison)
- uid: v3.1.0.1:Xunit.Assert.Contains(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char},System.StringComparison)
  commentId: M:Xunit.Assert.Contains(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char},System.StringComparison)
  id: Contains(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char},System.StringComparison)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Contains(ReadOnlyMemory<char>, ReadOnlyMemory<char>, StringComparison)
  nameWithType: Assert.Contains(ReadOnlyMemory<char>, ReadOnlyMemory<char>, StringComparison)
  fullName: Xunit.Assert.Contains(System.ReadOnlyMemory<char>, System.ReadOnlyMemory<char>, System.StringComparison)
  type: Method
  source:
    id: Contains
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 160
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a string contains a given sub-string, using the given comparison type.
  example: []
  syntax:
    content: public static void Contains(ReadOnlyMemory<char> expectedSubstring, ReadOnlyMemory<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture)
    parameters:
    - id: expectedSubstring
      type: System.ReadOnlyMemory{System.Char}
      description: The sub-string expected to be in the string
    - id: actualString
      type: System.ReadOnlyMemory{System.Char}
      description: The string to be inspected
    - id: comparisonType
      type: System.StringComparison
      description: The type of string comparison to perform
    content.vb: Public Shared Sub Contains(expectedSubstring As ReadOnlyMemory(Of Char), actualString As ReadOnlyMemory(Of Char), comparisonType As StringComparison = StringComparison.CurrentCulture)
  overload: v3.1.0.1:Xunit.Assert.Contains*
  exceptions:
  - type: Xunit.Sdk.ContainsException
    commentId: T:Xunit.Sdk.ContainsException
    description: Thrown when the sub-string is not present inside the string
  nameWithType.vb: Assert.Contains(ReadOnlyMemory(Of Char), ReadOnlyMemory(Of Char), StringComparison)
  fullName.vb: Xunit.Assert.Contains(System.ReadOnlyMemory(Of Char), System.ReadOnlyMemory(Of Char), System.StringComparison)
  name.vb: Contains(ReadOnlyMemory(Of Char), ReadOnlyMemory(Of Char), StringComparison)
- uid: v3.1.0.1:Xunit.Assert.Contains(System.Span{System.Char},System.Span{System.Char},System.StringComparison)
  commentId: M:Xunit.Assert.Contains(System.Span{System.Char},System.Span{System.Char},System.StringComparison)
  id: Contains(System.Span{System.Char},System.Span{System.Char},System.StringComparison)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Contains(Span<char>, Span<char>, StringComparison)
  nameWithType: Assert.Contains(Span<char>, Span<char>, StringComparison)
  fullName: Xunit.Assert.Contains(System.Span<char>, System.Span<char>, System.StringComparison)
  type: Method
  source:
    id: Contains
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 177
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a string contains a given string, using the given comparison type.
  example: []
  syntax:
    content: public static void Contains(Span<char> expectedSubstring, Span<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture)
    parameters:
    - id: expectedSubstring
      type: System.Span{System.Char}
      description: The string expected to be in the string
    - id: actualString
      type: System.Span{System.Char}
      description: The string to be inspected
    - id: comparisonType
      type: System.StringComparison
      description: The type of string comparison to perform
    content.vb: Public Shared Sub Contains(expectedSubstring As Span(Of Char), actualString As Span(Of Char), comparisonType As StringComparison = StringComparison.CurrentCulture)
  overload: v3.1.0.1:Xunit.Assert.Contains*
  exceptions:
  - type: Xunit.Sdk.ContainsException
    commentId: T:Xunit.Sdk.ContainsException
    description: Thrown when the string is not present inside the string
  nameWithType.vb: Assert.Contains(Span(Of Char), Span(Of Char), StringComparison)
  fullName.vb: Xunit.Assert.Contains(System.Span(Of Char), System.Span(Of Char), System.StringComparison)
  name.vb: Contains(Span(Of Char), Span(Of Char), StringComparison)
- uid: v3.1.0.1:Xunit.Assert.Contains(System.Span{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)
  commentId: M:Xunit.Assert.Contains(System.Span{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)
  id: Contains(System.Span{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Contains(Span<char>, ReadOnlySpan<char>, StringComparison)
  nameWithType: Assert.Contains(Span<char>, ReadOnlySpan<char>, StringComparison)
  fullName: Xunit.Assert.Contains(System.Span<char>, System.ReadOnlySpan<char>, System.StringComparison)
  type: Method
  source:
    id: Contains
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 190
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a string contains a given string, using the given comparison type.
  example: []
  syntax:
    content: public static void Contains(Span<char> expectedSubstring, ReadOnlySpan<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture)
    parameters:
    - id: expectedSubstring
      type: System.Span{System.Char}
      description: The string expected to be in the string
    - id: actualString
      type: System.ReadOnlySpan{System.Char}
      description: The string to be inspected
    - id: comparisonType
      type: System.StringComparison
      description: The type of string comparison to perform
    content.vb: Public Shared Sub Contains(expectedSubstring As Span(Of Char), actualString As ReadOnlySpan(Of Char), comparisonType As StringComparison = StringComparison.CurrentCulture)
  overload: v3.1.0.1:Xunit.Assert.Contains*
  exceptions:
  - type: Xunit.Sdk.ContainsException
    commentId: T:Xunit.Sdk.ContainsException
    description: Thrown when the string is not present inside the string
  nameWithType.vb: Assert.Contains(Span(Of Char), ReadOnlySpan(Of Char), StringComparison)
  fullName.vb: Xunit.Assert.Contains(System.Span(Of Char), System.ReadOnlySpan(Of Char), System.StringComparison)
  name.vb: Contains(Span(Of Char), ReadOnlySpan(Of Char), StringComparison)
- uid: v3.1.0.1:Xunit.Assert.Contains(System.ReadOnlySpan{System.Char},System.Span{System.Char},System.StringComparison)
  commentId: M:Xunit.Assert.Contains(System.ReadOnlySpan{System.Char},System.Span{System.Char},System.StringComparison)
  id: Contains(System.ReadOnlySpan{System.Char},System.Span{System.Char},System.StringComparison)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Contains(ReadOnlySpan<char>, Span<char>, StringComparison)
  nameWithType: Assert.Contains(ReadOnlySpan<char>, Span<char>, StringComparison)
  fullName: Xunit.Assert.Contains(System.ReadOnlySpan<char>, System.Span<char>, System.StringComparison)
  type: Method
  source:
    id: Contains
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 203
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a string contains a given string, using the given comparison type.
  example: []
  syntax:
    content: public static void Contains(ReadOnlySpan<char> expectedSubstring, Span<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture)
    parameters:
    - id: expectedSubstring
      type: System.ReadOnlySpan{System.Char}
      description: The string expected to be in the string
    - id: actualString
      type: System.Span{System.Char}
      description: The string to be inspected
    - id: comparisonType
      type: System.StringComparison
      description: The type of string comparison to perform
    content.vb: Public Shared Sub Contains(expectedSubstring As ReadOnlySpan(Of Char), actualString As Span(Of Char), comparisonType As StringComparison = StringComparison.CurrentCulture)
  overload: v3.1.0.1:Xunit.Assert.Contains*
  exceptions:
  - type: Xunit.Sdk.ContainsException
    commentId: T:Xunit.Sdk.ContainsException
    description: Thrown when the string is not present inside the string
  nameWithType.vb: Assert.Contains(ReadOnlySpan(Of Char), Span(Of Char), StringComparison)
  fullName.vb: Xunit.Assert.Contains(System.ReadOnlySpan(Of Char), System.Span(Of Char), System.StringComparison)
  name.vb: Contains(ReadOnlySpan(Of Char), Span(Of Char), StringComparison)
- uid: v3.1.0.1:Xunit.Assert.Contains(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)
  commentId: M:Xunit.Assert.Contains(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)
  id: Contains(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Contains(ReadOnlySpan<char>, ReadOnlySpan<char>, StringComparison)
  nameWithType: Assert.Contains(ReadOnlySpan<char>, ReadOnlySpan<char>, StringComparison)
  fullName: Xunit.Assert.Contains(System.ReadOnlySpan<char>, System.ReadOnlySpan<char>, System.StringComparison)
  type: Method
  source:
    id: Contains
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 216
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a string contains a given string, using the given comparison type.
  example: []
  syntax:
    content: public static void Contains(ReadOnlySpan<char> expectedSubstring, ReadOnlySpan<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture)
    parameters:
    - id: expectedSubstring
      type: System.ReadOnlySpan{System.Char}
      description: The string expected to be in the string
    - id: actualString
      type: System.ReadOnlySpan{System.Char}
      description: The string to be inspected
    - id: comparisonType
      type: System.StringComparison
      description: The type of string comparison to perform
    content.vb: Public Shared Sub Contains(expectedSubstring As ReadOnlySpan(Of Char), actualString As ReadOnlySpan(Of Char), comparisonType As StringComparison = StringComparison.CurrentCulture)
  overload: v3.1.0.1:Xunit.Assert.Contains*
  exceptions:
  - type: Xunit.Sdk.ContainsException
    commentId: T:Xunit.Sdk.ContainsException
    description: Thrown when the string is not present inside the string
  nameWithType.vb: Assert.Contains(ReadOnlySpan(Of Char), ReadOnlySpan(Of Char), StringComparison)
  fullName.vb: Xunit.Assert.Contains(System.ReadOnlySpan(Of Char), System.ReadOnlySpan(Of Char), System.StringComparison)
  name.vb: Contains(ReadOnlySpan(Of Char), ReadOnlySpan(Of Char), StringComparison)
- uid: v3.1.0.1:Xunit.Assert.Contains(System.Span{System.Char},System.Span{System.Char})
  commentId: M:Xunit.Assert.Contains(System.Span{System.Char},System.Span{System.Char})
  id: Contains(System.Span{System.Char},System.Span{System.Char})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Contains(Span<char>, Span<char>)
  nameWithType: Assert.Contains(Span<char>, Span<char>)
  fullName: Xunit.Assert.Contains(System.Span<char>, System.Span<char>)
  type: Method
  source:
    id: Contains
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 234
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a string contains a given string, using the current culture.
  example: []
  syntax:
    content: public static void Contains(Span<char> expectedSubstring, Span<char> actualString)
    parameters:
    - id: expectedSubstring
      type: System.Span{System.Char}
      description: The string expected to be in the string
    - id: actualString
      type: System.Span{System.Char}
      description: The string to be inspected
    content.vb: Public Shared Sub Contains(expectedSubstring As Span(Of Char), actualString As Span(Of Char))
  overload: v3.1.0.1:Xunit.Assert.Contains*
  exceptions:
  - type: Xunit.Sdk.ContainsException
    commentId: T:Xunit.Sdk.ContainsException
    description: Thrown when the string is not present inside the string
  nameWithType.vb: Assert.Contains(Span(Of Char), Span(Of Char))
  fullName.vb: Xunit.Assert.Contains(System.Span(Of Char), System.Span(Of Char))
  name.vb: Contains(Span(Of Char), Span(Of Char))
- uid: v3.1.0.1:Xunit.Assert.Contains(System.Span{System.Char},System.ReadOnlySpan{System.Char})
  commentId: M:Xunit.Assert.Contains(System.Span{System.Char},System.ReadOnlySpan{System.Char})
  id: Contains(System.Span{System.Char},System.ReadOnlySpan{System.Char})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Contains(Span<char>, ReadOnlySpan<char>)
  nameWithType: Assert.Contains(Span<char>, ReadOnlySpan<char>)
  fullName: Xunit.Assert.Contains(System.Span<char>, System.ReadOnlySpan<char>)
  type: Method
  source:
    id: Contains
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 245
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a string contains a given string, using the current culture.
  example: []
  syntax:
    content: public static void Contains(Span<char> expectedSubstring, ReadOnlySpan<char> actualString)
    parameters:
    - id: expectedSubstring
      type: System.Span{System.Char}
      description: The string expected to be in the string
    - id: actualString
      type: System.ReadOnlySpan{System.Char}
      description: The string to be inspected
    content.vb: Public Shared Sub Contains(expectedSubstring As Span(Of Char), actualString As ReadOnlySpan(Of Char))
  overload: v3.1.0.1:Xunit.Assert.Contains*
  exceptions:
  - type: Xunit.Sdk.ContainsException
    commentId: T:Xunit.Sdk.ContainsException
    description: Thrown when the string is not present inside the string
  nameWithType.vb: Assert.Contains(Span(Of Char), ReadOnlySpan(Of Char))
  fullName.vb: Xunit.Assert.Contains(System.Span(Of Char), System.ReadOnlySpan(Of Char))
  name.vb: Contains(Span(Of Char), ReadOnlySpan(Of Char))
- uid: v3.1.0.1:Xunit.Assert.Contains(System.ReadOnlySpan{System.Char},System.Span{System.Char})
  commentId: M:Xunit.Assert.Contains(System.ReadOnlySpan{System.Char},System.Span{System.Char})
  id: Contains(System.ReadOnlySpan{System.Char},System.Span{System.Char})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Contains(ReadOnlySpan<char>, Span<char>)
  nameWithType: Assert.Contains(ReadOnlySpan<char>, Span<char>)
  fullName: Xunit.Assert.Contains(System.ReadOnlySpan<char>, System.Span<char>)
  type: Method
  source:
    id: Contains
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 256
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a string contains a given string, using the current culture.
  example: []
  syntax:
    content: public static void Contains(ReadOnlySpan<char> expectedSubstring, Span<char> actualString)
    parameters:
    - id: expectedSubstring
      type: System.ReadOnlySpan{System.Char}
      description: The string expected to be in the string
    - id: actualString
      type: System.Span{System.Char}
      description: The string to be inspected
    content.vb: Public Shared Sub Contains(expectedSubstring As ReadOnlySpan(Of Char), actualString As Span(Of Char))
  overload: v3.1.0.1:Xunit.Assert.Contains*
  exceptions:
  - type: Xunit.Sdk.ContainsException
    commentId: T:Xunit.Sdk.ContainsException
    description: Thrown when the string is not present inside the string
  nameWithType.vb: Assert.Contains(ReadOnlySpan(Of Char), Span(Of Char))
  fullName.vb: Xunit.Assert.Contains(System.ReadOnlySpan(Of Char), System.Span(Of Char))
  name.vb: Contains(ReadOnlySpan(Of Char), Span(Of Char))
- uid: v3.1.0.1:Xunit.Assert.Contains(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})
  commentId: M:Xunit.Assert.Contains(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})
  id: Contains(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Contains(ReadOnlySpan<char>, ReadOnlySpan<char>)
  nameWithType: Assert.Contains(ReadOnlySpan<char>, ReadOnlySpan<char>)
  fullName: Xunit.Assert.Contains(System.ReadOnlySpan<char>, System.ReadOnlySpan<char>)
  type: Method
  source:
    id: Contains
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 267
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a string contains a given string, using the current culture.
  example: []
  syntax:
    content: public static void Contains(ReadOnlySpan<char> expectedSubstring, ReadOnlySpan<char> actualString)
    parameters:
    - id: expectedSubstring
      type: System.ReadOnlySpan{System.Char}
      description: The string expected to be in the string
    - id: actualString
      type: System.ReadOnlySpan{System.Char}
      description: The string to be inspected
    content.vb: Public Shared Sub Contains(expectedSubstring As ReadOnlySpan(Of Char), actualString As ReadOnlySpan(Of Char))
  overload: v3.1.0.1:Xunit.Assert.Contains*
  exceptions:
  - type: Xunit.Sdk.ContainsException
    commentId: T:Xunit.Sdk.ContainsException
    description: Thrown when the string is not present inside the string
  nameWithType.vb: Assert.Contains(ReadOnlySpan(Of Char), ReadOnlySpan(Of Char))
  fullName.vb: Xunit.Assert.Contains(System.ReadOnlySpan(Of Char), System.ReadOnlySpan(Of Char))
  name.vb: Contains(ReadOnlySpan(Of Char), ReadOnlySpan(Of Char))
- uid: v3.1.0.1:Xunit.Assert.DoesNotContain(System.String,System.String)
  commentId: M:Xunit.Assert.DoesNotContain(System.String,System.String)
  id: DoesNotContain(System.String,System.String)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: DoesNotContain(string, string?)
  nameWithType: Assert.DoesNotContain(string, string?)
  fullName: Xunit.Assert.DoesNotContain(string, string?)
  type: Method
  source:
    id: DoesNotContain
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 280
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a string does not contain a given sub-string, using the current culture.
  example: []
  syntax:
    content: public static void DoesNotContain(string expectedSubstring, string? actualString)
    parameters:
    - id: expectedSubstring
      type: System.String
      description: The sub-string expected not to be in the string
    - id: actualString
      type: System.String
      description: The string to be inspected
    content.vb: Public Shared Sub DoesNotContain(expectedSubstring As String, actualString As String)
  overload: v3.1.0.1:Xunit.Assert.DoesNotContain*
  exceptions:
  - type: Xunit.Sdk.DoesNotContainException
    commentId: T:Xunit.Sdk.DoesNotContainException
    description: Thrown when the sub-string is present inside the string
  nameWithType.vb: Assert.DoesNotContain(String, String)
  fullName.vb: Xunit.Assert.DoesNotContain(String, String)
  name.vb: DoesNotContain(String, String)
- uid: v3.1.0.1:Xunit.Assert.DoesNotContain(System.String,System.String,System.StringComparison)
  commentId: M:Xunit.Assert.DoesNotContain(System.String,System.String,System.StringComparison)
  id: DoesNotContain(System.String,System.String,System.StringComparison)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: DoesNotContain(string, string?, StringComparison)
  nameWithType: Assert.DoesNotContain(string, string?, StringComparison)
  fullName: Xunit.Assert.DoesNotContain(string, string?, System.StringComparison)
  type: Method
  source:
    id: DoesNotContain
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 296
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a string does not contain a given sub-string, using the current culture.
  example: []
  syntax:
    content: public static void DoesNotContain(string expectedSubstring, string? actualString, StringComparison comparisonType)
    parameters:
    - id: expectedSubstring
      type: System.String
      description: The sub-string expected not to be in the string
    - id: actualString
      type: System.String
      description: The string to be inspected
    - id: comparisonType
      type: System.StringComparison
      description: The type of string comparison to perform
    content.vb: Public Shared Sub DoesNotContain(expectedSubstring As String, actualString As String, comparisonType As StringComparison)
  overload: v3.1.0.1:Xunit.Assert.DoesNotContain*
  exceptions:
  - type: Xunit.Sdk.DoesNotContainException
    commentId: T:Xunit.Sdk.DoesNotContainException
    description: Thrown when the sub-string is present inside the string
  nameWithType.vb: Assert.DoesNotContain(String, String, StringComparison)
  fullName.vb: Xunit.Assert.DoesNotContain(String, String, System.StringComparison)
  name.vb: DoesNotContain(String, String, StringComparison)
- uid: v3.1.0.1:Xunit.Assert.DoesNotContain(System.Memory{System.Char},System.Memory{System.Char})
  commentId: M:Xunit.Assert.DoesNotContain(System.Memory{System.Char},System.Memory{System.Char})
  id: DoesNotContain(System.Memory{System.Char},System.Memory{System.Char})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: DoesNotContain(Memory<char>, Memory<char>)
  nameWithType: Assert.DoesNotContain(Memory<char>, Memory<char>)
  fullName: Xunit.Assert.DoesNotContain(System.Memory<char>, System.Memory<char>)
  type: Method
  source:
    id: DoesNotContain
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 323
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a string does not contain a given sub-string, using the current culture.
  example: []
  syntax:
    content: public static void DoesNotContain(Memory<char> expectedSubstring, Memory<char> actualString)
    parameters:
    - id: expectedSubstring
      type: System.Memory{System.Char}
      description: The sub-string expected not to be in the string
    - id: actualString
      type: System.Memory{System.Char}
      description: The string to be inspected
    content.vb: Public Shared Sub DoesNotContain(expectedSubstring As Memory(Of Char), actualString As Memory(Of Char))
  overload: v3.1.0.1:Xunit.Assert.DoesNotContain*
  exceptions:
  - type: Xunit.Sdk.DoesNotContainException
    commentId: T:Xunit.Sdk.DoesNotContainException
    description: Thrown when the sub-string is present inside the string
  nameWithType.vb: Assert.DoesNotContain(Memory(Of Char), Memory(Of Char))
  fullName.vb: Xunit.Assert.DoesNotContain(System.Memory(Of Char), System.Memory(Of Char))
  name.vb: DoesNotContain(Memory(Of Char), Memory(Of Char))
- uid: v3.1.0.1:Xunit.Assert.DoesNotContain(System.Memory{System.Char},System.ReadOnlyMemory{System.Char})
  commentId: M:Xunit.Assert.DoesNotContain(System.Memory{System.Char},System.ReadOnlyMemory{System.Char})
  id: DoesNotContain(System.Memory{System.Char},System.ReadOnlyMemory{System.Char})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: DoesNotContain(Memory<char>, ReadOnlyMemory<char>)
  nameWithType: Assert.DoesNotContain(Memory<char>, ReadOnlyMemory<char>)
  fullName: Xunit.Assert.DoesNotContain(System.Memory<char>, System.ReadOnlyMemory<char>)
  type: Method
  source:
    id: DoesNotContain
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 334
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a string does not contain a given sub-string, using the current culture.
  example: []
  syntax:
    content: public static void DoesNotContain(Memory<char> expectedSubstring, ReadOnlyMemory<char> actualString)
    parameters:
    - id: expectedSubstring
      type: System.Memory{System.Char}
      description: The sub-string expected not to be in the string
    - id: actualString
      type: System.ReadOnlyMemory{System.Char}
      description: The string to be inspected
    content.vb: Public Shared Sub DoesNotContain(expectedSubstring As Memory(Of Char), actualString As ReadOnlyMemory(Of Char))
  overload: v3.1.0.1:Xunit.Assert.DoesNotContain*
  exceptions:
  - type: Xunit.Sdk.DoesNotContainException
    commentId: T:Xunit.Sdk.DoesNotContainException
    description: Thrown when the sub-string is present inside the string
  nameWithType.vb: Assert.DoesNotContain(Memory(Of Char), ReadOnlyMemory(Of Char))
  fullName.vb: Xunit.Assert.DoesNotContain(System.Memory(Of Char), System.ReadOnlyMemory(Of Char))
  name.vb: DoesNotContain(Memory(Of Char), ReadOnlyMemory(Of Char))
- uid: v3.1.0.1:Xunit.Assert.DoesNotContain(System.ReadOnlyMemory{System.Char},System.Memory{System.Char})
  commentId: M:Xunit.Assert.DoesNotContain(System.ReadOnlyMemory{System.Char},System.Memory{System.Char})
  id: DoesNotContain(System.ReadOnlyMemory{System.Char},System.Memory{System.Char})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: DoesNotContain(ReadOnlyMemory<char>, Memory<char>)
  nameWithType: Assert.DoesNotContain(ReadOnlyMemory<char>, Memory<char>)
  fullName: Xunit.Assert.DoesNotContain(System.ReadOnlyMemory<char>, System.Memory<char>)
  type: Method
  source:
    id: DoesNotContain
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 345
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a string does not contain a given sub-string, using the current culture.
  example: []
  syntax:
    content: public static void DoesNotContain(ReadOnlyMemory<char> expectedSubstring, Memory<char> actualString)
    parameters:
    - id: expectedSubstring
      type: System.ReadOnlyMemory{System.Char}
      description: The sub-string expected not to be in the string
    - id: actualString
      type: System.Memory{System.Char}
      description: The string to be inspected
    content.vb: Public Shared Sub DoesNotContain(expectedSubstring As ReadOnlyMemory(Of Char), actualString As Memory(Of Char))
  overload: v3.1.0.1:Xunit.Assert.DoesNotContain*
  exceptions:
  - type: Xunit.Sdk.DoesNotContainException
    commentId: T:Xunit.Sdk.DoesNotContainException
    description: Thrown when the sub-string is present inside the string
  nameWithType.vb: Assert.DoesNotContain(ReadOnlyMemory(Of Char), Memory(Of Char))
  fullName.vb: Xunit.Assert.DoesNotContain(System.ReadOnlyMemory(Of Char), System.Memory(Of Char))
  name.vb: DoesNotContain(ReadOnlyMemory(Of Char), Memory(Of Char))
- uid: v3.1.0.1:Xunit.Assert.DoesNotContain(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char})
  commentId: M:Xunit.Assert.DoesNotContain(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char})
  id: DoesNotContain(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: DoesNotContain(ReadOnlyMemory<char>, ReadOnlyMemory<char>)
  nameWithType: Assert.DoesNotContain(ReadOnlyMemory<char>, ReadOnlyMemory<char>)
  fullName: Xunit.Assert.DoesNotContain(System.ReadOnlyMemory<char>, System.ReadOnlyMemory<char>)
  type: Method
  source:
    id: DoesNotContain
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 356
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a string does not contain a given sub-string, using the current culture.
  example: []
  syntax:
    content: public static void DoesNotContain(ReadOnlyMemory<char> expectedSubstring, ReadOnlyMemory<char> actualString)
    parameters:
    - id: expectedSubstring
      type: System.ReadOnlyMemory{System.Char}
      description: The sub-string expected not to be in the string
    - id: actualString
      type: System.ReadOnlyMemory{System.Char}
      description: The string to be inspected
    content.vb: Public Shared Sub DoesNotContain(expectedSubstring As ReadOnlyMemory(Of Char), actualString As ReadOnlyMemory(Of Char))
  overload: v3.1.0.1:Xunit.Assert.DoesNotContain*
  exceptions:
  - type: Xunit.Sdk.DoesNotContainException
    commentId: T:Xunit.Sdk.DoesNotContainException
    description: Thrown when the sub-string is present inside the string
  nameWithType.vb: Assert.DoesNotContain(ReadOnlyMemory(Of Char), ReadOnlyMemory(Of Char))
  fullName.vb: Xunit.Assert.DoesNotContain(System.ReadOnlyMemory(Of Char), System.ReadOnlyMemory(Of Char))
  name.vb: DoesNotContain(ReadOnlyMemory(Of Char), ReadOnlyMemory(Of Char))
- uid: v3.1.0.1:Xunit.Assert.DoesNotContain(System.Memory{System.Char},System.Memory{System.Char},System.StringComparison)
  commentId: M:Xunit.Assert.DoesNotContain(System.Memory{System.Char},System.Memory{System.Char},System.StringComparison)
  id: DoesNotContain(System.Memory{System.Char},System.Memory{System.Char},System.StringComparison)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: DoesNotContain(Memory<char>, Memory<char>, StringComparison)
  nameWithType: Assert.DoesNotContain(Memory<char>, Memory<char>, StringComparison)
  fullName: Xunit.Assert.DoesNotContain(System.Memory<char>, System.Memory<char>, System.StringComparison)
  type: Method
  source:
    id: DoesNotContain
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 368
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a string does not contain a given sub-string, using the given comparison type.
  example: []
  syntax:
    content: public static void DoesNotContain(Memory<char> expectedSubstring, Memory<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture)
    parameters:
    - id: expectedSubstring
      type: System.Memory{System.Char}
      description: The sub-string expected not to be in the string
    - id: actualString
      type: System.Memory{System.Char}
      description: The string to be inspected
    - id: comparisonType
      type: System.StringComparison
      description: The type of string comparison to perform
    content.vb: Public Shared Sub DoesNotContain(expectedSubstring As Memory(Of Char), actualString As Memory(Of Char), comparisonType As StringComparison = StringComparison.CurrentCulture)
  overload: v3.1.0.1:Xunit.Assert.DoesNotContain*
  exceptions:
  - type: Xunit.Sdk.DoesNotContainException
    commentId: T:Xunit.Sdk.DoesNotContainException
    description: Thrown when the sub-string is present inside the string
  nameWithType.vb: Assert.DoesNotContain(Memory(Of Char), Memory(Of Char), StringComparison)
  fullName.vb: Xunit.Assert.DoesNotContain(System.Memory(Of Char), System.Memory(Of Char), System.StringComparison)
  name.vb: DoesNotContain(Memory(Of Char), Memory(Of Char), StringComparison)
- uid: v3.1.0.1:Xunit.Assert.DoesNotContain(System.Memory{System.Char},System.ReadOnlyMemory{System.Char},System.StringComparison)
  commentId: M:Xunit.Assert.DoesNotContain(System.Memory{System.Char},System.ReadOnlyMemory{System.Char},System.StringComparison)
  id: DoesNotContain(System.Memory{System.Char},System.ReadOnlyMemory{System.Char},System.StringComparison)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: DoesNotContain(Memory<char>, ReadOnlyMemory<char>, StringComparison)
  nameWithType: Assert.DoesNotContain(Memory<char>, ReadOnlyMemory<char>, StringComparison)
  fullName: Xunit.Assert.DoesNotContain(System.Memory<char>, System.ReadOnlyMemory<char>, System.StringComparison)
  type: Method
  source:
    id: DoesNotContain
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 381
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a string does not contain a given sub-string, using the given comparison type.
  example: []
  syntax:
    content: public static void DoesNotContain(Memory<char> expectedSubstring, ReadOnlyMemory<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture)
    parameters:
    - id: expectedSubstring
      type: System.Memory{System.Char}
      description: The sub-string expected not to be in the string
    - id: actualString
      type: System.ReadOnlyMemory{System.Char}
      description: The string to be inspected
    - id: comparisonType
      type: System.StringComparison
      description: The type of string comparison to perform
    content.vb: Public Shared Sub DoesNotContain(expectedSubstring As Memory(Of Char), actualString As ReadOnlyMemory(Of Char), comparisonType As StringComparison = StringComparison.CurrentCulture)
  overload: v3.1.0.1:Xunit.Assert.DoesNotContain*
  exceptions:
  - type: Xunit.Sdk.DoesNotContainException
    commentId: T:Xunit.Sdk.DoesNotContainException
    description: Thrown when the sub-string is present inside the string
  nameWithType.vb: Assert.DoesNotContain(Memory(Of Char), ReadOnlyMemory(Of Char), StringComparison)
  fullName.vb: Xunit.Assert.DoesNotContain(System.Memory(Of Char), System.ReadOnlyMemory(Of Char), System.StringComparison)
  name.vb: DoesNotContain(Memory(Of Char), ReadOnlyMemory(Of Char), StringComparison)
- uid: v3.1.0.1:Xunit.Assert.DoesNotContain(System.ReadOnlyMemory{System.Char},System.Memory{System.Char},System.StringComparison)
  commentId: M:Xunit.Assert.DoesNotContain(System.ReadOnlyMemory{System.Char},System.Memory{System.Char},System.StringComparison)
  id: DoesNotContain(System.ReadOnlyMemory{System.Char},System.Memory{System.Char},System.StringComparison)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: DoesNotContain(ReadOnlyMemory<char>, Memory<char>, StringComparison)
  nameWithType: Assert.DoesNotContain(ReadOnlyMemory<char>, Memory<char>, StringComparison)
  fullName: Xunit.Assert.DoesNotContain(System.ReadOnlyMemory<char>, System.Memory<char>, System.StringComparison)
  type: Method
  source:
    id: DoesNotContain
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 394
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a string does not contain a given sub-string, using the given comparison type.
  example: []
  syntax:
    content: public static void DoesNotContain(ReadOnlyMemory<char> expectedSubstring, Memory<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture)
    parameters:
    - id: expectedSubstring
      type: System.ReadOnlyMemory{System.Char}
      description: The sub-string expected not to be in the string
    - id: actualString
      type: System.Memory{System.Char}
      description: The string to be inspected
    - id: comparisonType
      type: System.StringComparison
      description: The type of string comparison to perform
    content.vb: Public Shared Sub DoesNotContain(expectedSubstring As ReadOnlyMemory(Of Char), actualString As Memory(Of Char), comparisonType As StringComparison = StringComparison.CurrentCulture)
  overload: v3.1.0.1:Xunit.Assert.DoesNotContain*
  exceptions:
  - type: Xunit.Sdk.DoesNotContainException
    commentId: T:Xunit.Sdk.DoesNotContainException
    description: Thrown when the sub-string is present inside the string
  nameWithType.vb: Assert.DoesNotContain(ReadOnlyMemory(Of Char), Memory(Of Char), StringComparison)
  fullName.vb: Xunit.Assert.DoesNotContain(System.ReadOnlyMemory(Of Char), System.Memory(Of Char), System.StringComparison)
  name.vb: DoesNotContain(ReadOnlyMemory(Of Char), Memory(Of Char), StringComparison)
- uid: v3.1.0.1:Xunit.Assert.DoesNotContain(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char},System.StringComparison)
  commentId: M:Xunit.Assert.DoesNotContain(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char},System.StringComparison)
  id: DoesNotContain(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char},System.StringComparison)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: DoesNotContain(ReadOnlyMemory<char>, ReadOnlyMemory<char>, StringComparison)
  nameWithType: Assert.DoesNotContain(ReadOnlyMemory<char>, ReadOnlyMemory<char>, StringComparison)
  fullName: Xunit.Assert.DoesNotContain(System.ReadOnlyMemory<char>, System.ReadOnlyMemory<char>, System.StringComparison)
  type: Method
  source:
    id: DoesNotContain
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 407
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a string does not contain a given sub-string, using the given comparison type.
  example: []
  syntax:
    content: public static void DoesNotContain(ReadOnlyMemory<char> expectedSubstring, ReadOnlyMemory<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture)
    parameters:
    - id: expectedSubstring
      type: System.ReadOnlyMemory{System.Char}
      description: The sub-string expected not to be in the string
    - id: actualString
      type: System.ReadOnlyMemory{System.Char}
      description: The string to be inspected
    - id: comparisonType
      type: System.StringComparison
      description: The type of string comparison to perform
    content.vb: Public Shared Sub DoesNotContain(expectedSubstring As ReadOnlyMemory(Of Char), actualString As ReadOnlyMemory(Of Char), comparisonType As StringComparison = StringComparison.CurrentCulture)
  overload: v3.1.0.1:Xunit.Assert.DoesNotContain*
  exceptions:
  - type: Xunit.Sdk.DoesNotContainException
    commentId: T:Xunit.Sdk.DoesNotContainException
    description: Thrown when the sub-string is present inside the string
  nameWithType.vb: Assert.DoesNotContain(ReadOnlyMemory(Of Char), ReadOnlyMemory(Of Char), StringComparison)
  fullName.vb: Xunit.Assert.DoesNotContain(System.ReadOnlyMemory(Of Char), System.ReadOnlyMemory(Of Char), System.StringComparison)
  name.vb: DoesNotContain(ReadOnlyMemory(Of Char), ReadOnlyMemory(Of Char), StringComparison)
- uid: v3.1.0.1:Xunit.Assert.DoesNotContain(System.Span{System.Char},System.Span{System.Char},System.StringComparison)
  commentId: M:Xunit.Assert.DoesNotContain(System.Span{System.Char},System.Span{System.Char},System.StringComparison)
  id: DoesNotContain(System.Span{System.Char},System.Span{System.Char},System.StringComparison)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: DoesNotContain(Span<char>, Span<char>, StringComparison)
  nameWithType: Assert.DoesNotContain(Span<char>, Span<char>, StringComparison)
  fullName: Xunit.Assert.DoesNotContain(System.Span<char>, System.Span<char>, System.StringComparison)
  type: Method
  source:
    id: DoesNotContain
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 424
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a string does not contain a given sub-string, using the given comparison type.
  example: []
  syntax:
    content: public static void DoesNotContain(Span<char> expectedSubstring, Span<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture)
    parameters:
    - id: expectedSubstring
      type: System.Span{System.Char}
      description: The sub-string expected not to be in the string
    - id: actualString
      type: System.Span{System.Char}
      description: The string to be inspected
    - id: comparisonType
      type: System.StringComparison
      description: The type of string comparison to perform
    content.vb: Public Shared Sub DoesNotContain(expectedSubstring As Span(Of Char), actualString As Span(Of Char), comparisonType As StringComparison = StringComparison.CurrentCulture)
  overload: v3.1.0.1:Xunit.Assert.DoesNotContain*
  exceptions:
  - type: Xunit.Sdk.DoesNotContainException
    commentId: T:Xunit.Sdk.DoesNotContainException
    description: Thrown when the sub-string is present inside the string
  nameWithType.vb: Assert.DoesNotContain(Span(Of Char), Span(Of Char), StringComparison)
  fullName.vb: Xunit.Assert.DoesNotContain(System.Span(Of Char), System.Span(Of Char), System.StringComparison)
  name.vb: DoesNotContain(Span(Of Char), Span(Of Char), StringComparison)
- uid: v3.1.0.1:Xunit.Assert.DoesNotContain(System.Span{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)
  commentId: M:Xunit.Assert.DoesNotContain(System.Span{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)
  id: DoesNotContain(System.Span{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: DoesNotContain(Span<char>, ReadOnlySpan<char>, StringComparison)
  nameWithType: Assert.DoesNotContain(Span<char>, ReadOnlySpan<char>, StringComparison)
  fullName: Xunit.Assert.DoesNotContain(System.Span<char>, System.ReadOnlySpan<char>, System.StringComparison)
  type: Method
  source:
    id: DoesNotContain
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 437
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a string does not contain a given sub-string, using the given comparison type.
  example: []
  syntax:
    content: public static void DoesNotContain(Span<char> expectedSubstring, ReadOnlySpan<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture)
    parameters:
    - id: expectedSubstring
      type: System.Span{System.Char}
      description: The sub-string expected not to be in the string
    - id: actualString
      type: System.ReadOnlySpan{System.Char}
      description: The string to be inspected
    - id: comparisonType
      type: System.StringComparison
      description: The type of string comparison to perform
    content.vb: Public Shared Sub DoesNotContain(expectedSubstring As Span(Of Char), actualString As ReadOnlySpan(Of Char), comparisonType As StringComparison = StringComparison.CurrentCulture)
  overload: v3.1.0.1:Xunit.Assert.DoesNotContain*
  exceptions:
  - type: Xunit.Sdk.DoesNotContainException
    commentId: T:Xunit.Sdk.DoesNotContainException
    description: Thrown when the sub-string is present inside the string
  nameWithType.vb: Assert.DoesNotContain(Span(Of Char), ReadOnlySpan(Of Char), StringComparison)
  fullName.vb: Xunit.Assert.DoesNotContain(System.Span(Of Char), System.ReadOnlySpan(Of Char), System.StringComparison)
  name.vb: DoesNotContain(Span(Of Char), ReadOnlySpan(Of Char), StringComparison)
- uid: v3.1.0.1:Xunit.Assert.DoesNotContain(System.ReadOnlySpan{System.Char},System.Span{System.Char},System.StringComparison)
  commentId: M:Xunit.Assert.DoesNotContain(System.ReadOnlySpan{System.Char},System.Span{System.Char},System.StringComparison)
  id: DoesNotContain(System.ReadOnlySpan{System.Char},System.Span{System.Char},System.StringComparison)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: DoesNotContain(ReadOnlySpan<char>, Span<char>, StringComparison)
  nameWithType: Assert.DoesNotContain(ReadOnlySpan<char>, Span<char>, StringComparison)
  fullName: Xunit.Assert.DoesNotContain(System.ReadOnlySpan<char>, System.Span<char>, System.StringComparison)
  type: Method
  source:
    id: DoesNotContain
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 450
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a string does not contain a given sub-string, using the given comparison type.
  example: []
  syntax:
    content: public static void DoesNotContain(ReadOnlySpan<char> expectedSubstring, Span<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture)
    parameters:
    - id: expectedSubstring
      type: System.ReadOnlySpan{System.Char}
      description: The sub-string expected not to be in the string
    - id: actualString
      type: System.Span{System.Char}
      description: The string to be inspected
    - id: comparisonType
      type: System.StringComparison
      description: The type of string comparison to perform
    content.vb: Public Shared Sub DoesNotContain(expectedSubstring As ReadOnlySpan(Of Char), actualString As Span(Of Char), comparisonType As StringComparison = StringComparison.CurrentCulture)
  overload: v3.1.0.1:Xunit.Assert.DoesNotContain*
  exceptions:
  - type: Xunit.Sdk.DoesNotContainException
    commentId: T:Xunit.Sdk.DoesNotContainException
    description: Thrown when the sub-string is present inside the string
  nameWithType.vb: Assert.DoesNotContain(ReadOnlySpan(Of Char), Span(Of Char), StringComparison)
  fullName.vb: Xunit.Assert.DoesNotContain(System.ReadOnlySpan(Of Char), System.Span(Of Char), System.StringComparison)
  name.vb: DoesNotContain(ReadOnlySpan(Of Char), Span(Of Char), StringComparison)
- uid: v3.1.0.1:Xunit.Assert.DoesNotContain(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)
  commentId: M:Xunit.Assert.DoesNotContain(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)
  id: DoesNotContain(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: DoesNotContain(ReadOnlySpan<char>, ReadOnlySpan<char>, StringComparison)
  nameWithType: Assert.DoesNotContain(ReadOnlySpan<char>, ReadOnlySpan<char>, StringComparison)
  fullName: Xunit.Assert.DoesNotContain(System.ReadOnlySpan<char>, System.ReadOnlySpan<char>, System.StringComparison)
  type: Method
  source:
    id: DoesNotContain
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 463
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a string does not contain a given sub-string, using the given comparison type.
  example: []
  syntax:
    content: public static void DoesNotContain(ReadOnlySpan<char> expectedSubstring, ReadOnlySpan<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture)
    parameters:
    - id: expectedSubstring
      type: System.ReadOnlySpan{System.Char}
      description: The sub-string expected not to be in the string
    - id: actualString
      type: System.ReadOnlySpan{System.Char}
      description: The string to be inspected
    - id: comparisonType
      type: System.StringComparison
      description: The type of string comparison to perform
    content.vb: Public Shared Sub DoesNotContain(expectedSubstring As ReadOnlySpan(Of Char), actualString As ReadOnlySpan(Of Char), comparisonType As StringComparison = StringComparison.CurrentCulture)
  overload: v3.1.0.1:Xunit.Assert.DoesNotContain*
  exceptions:
  - type: Xunit.Sdk.DoesNotContainException
    commentId: T:Xunit.Sdk.DoesNotContainException
    description: Thrown when the sub-string is present inside the string
  nameWithType.vb: Assert.DoesNotContain(ReadOnlySpan(Of Char), ReadOnlySpan(Of Char), StringComparison)
  fullName.vb: Xunit.Assert.DoesNotContain(System.ReadOnlySpan(Of Char), System.ReadOnlySpan(Of Char), System.StringComparison)
  name.vb: DoesNotContain(ReadOnlySpan(Of Char), ReadOnlySpan(Of Char), StringComparison)
- uid: v3.1.0.1:Xunit.Assert.DoesNotContain(System.Span{System.Char},System.Span{System.Char})
  commentId: M:Xunit.Assert.DoesNotContain(System.Span{System.Char},System.Span{System.Char})
  id: DoesNotContain(System.Span{System.Char},System.Span{System.Char})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: DoesNotContain(Span<char>, Span<char>)
  nameWithType: Assert.DoesNotContain(Span<char>, Span<char>)
  fullName: Xunit.Assert.DoesNotContain(System.Span<char>, System.Span<char>)
  type: Method
  source:
    id: DoesNotContain
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 479
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a string does not contain a given sub-string, using the current culture.
  example: []
  syntax:
    content: public static void DoesNotContain(Span<char> expectedSubstring, Span<char> actualString)
    parameters:
    - id: expectedSubstring
      type: System.Span{System.Char}
      description: The sub-string expected not to be in the string
    - id: actualString
      type: System.Span{System.Char}
      description: The string to be inspected
    content.vb: Public Shared Sub DoesNotContain(expectedSubstring As Span(Of Char), actualString As Span(Of Char))
  overload: v3.1.0.1:Xunit.Assert.DoesNotContain*
  exceptions:
  - type: Xunit.Sdk.DoesNotContainException
    commentId: T:Xunit.Sdk.DoesNotContainException
    description: Thrown when the sub-string is present inside the string
  nameWithType.vb: Assert.DoesNotContain(Span(Of Char), Span(Of Char))
  fullName.vb: Xunit.Assert.DoesNotContain(System.Span(Of Char), System.Span(Of Char))
  name.vb: DoesNotContain(Span(Of Char), Span(Of Char))
- uid: v3.1.0.1:Xunit.Assert.DoesNotContain(System.Span{System.Char},System.ReadOnlySpan{System.Char})
  commentId: M:Xunit.Assert.DoesNotContain(System.Span{System.Char},System.ReadOnlySpan{System.Char})
  id: DoesNotContain(System.Span{System.Char},System.ReadOnlySpan{System.Char})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: DoesNotContain(Span<char>, ReadOnlySpan<char>)
  nameWithType: Assert.DoesNotContain(Span<char>, ReadOnlySpan<char>)
  fullName: Xunit.Assert.DoesNotContain(System.Span<char>, System.ReadOnlySpan<char>)
  type: Method
  source:
    id: DoesNotContain
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 490
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a string does not contain a given sub-string, using the current culture.
  example: []
  syntax:
    content: public static void DoesNotContain(Span<char> expectedSubstring, ReadOnlySpan<char> actualString)
    parameters:
    - id: expectedSubstring
      type: System.Span{System.Char}
      description: The sub-string expected not to be in the string
    - id: actualString
      type: System.ReadOnlySpan{System.Char}
      description: The string to be inspected
    content.vb: Public Shared Sub DoesNotContain(expectedSubstring As Span(Of Char), actualString As ReadOnlySpan(Of Char))
  overload: v3.1.0.1:Xunit.Assert.DoesNotContain*
  exceptions:
  - type: Xunit.Sdk.DoesNotContainException
    commentId: T:Xunit.Sdk.DoesNotContainException
    description: Thrown when the sub-string is present inside the string
  nameWithType.vb: Assert.DoesNotContain(Span(Of Char), ReadOnlySpan(Of Char))
  fullName.vb: Xunit.Assert.DoesNotContain(System.Span(Of Char), System.ReadOnlySpan(Of Char))
  name.vb: DoesNotContain(Span(Of Char), ReadOnlySpan(Of Char))
- uid: v3.1.0.1:Xunit.Assert.DoesNotContain(System.ReadOnlySpan{System.Char},System.Span{System.Char})
  commentId: M:Xunit.Assert.DoesNotContain(System.ReadOnlySpan{System.Char},System.Span{System.Char})
  id: DoesNotContain(System.ReadOnlySpan{System.Char},System.Span{System.Char})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: DoesNotContain(ReadOnlySpan<char>, Span<char>)
  nameWithType: Assert.DoesNotContain(ReadOnlySpan<char>, Span<char>)
  fullName: Xunit.Assert.DoesNotContain(System.ReadOnlySpan<char>, System.Span<char>)
  type: Method
  source:
    id: DoesNotContain
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 501
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a string does not contain a given sub-string, using the current culture.
  example: []
  syntax:
    content: public static void DoesNotContain(ReadOnlySpan<char> expectedSubstring, Span<char> actualString)
    parameters:
    - id: expectedSubstring
      type: System.ReadOnlySpan{System.Char}
      description: The sub-string expected not to be in the string
    - id: actualString
      type: System.Span{System.Char}
      description: The string to be inspected
    content.vb: Public Shared Sub DoesNotContain(expectedSubstring As ReadOnlySpan(Of Char), actualString As Span(Of Char))
  overload: v3.1.0.1:Xunit.Assert.DoesNotContain*
  exceptions:
  - type: Xunit.Sdk.DoesNotContainException
    commentId: T:Xunit.Sdk.DoesNotContainException
    description: Thrown when the sub-string is present inside the string
  nameWithType.vb: Assert.DoesNotContain(ReadOnlySpan(Of Char), Span(Of Char))
  fullName.vb: Xunit.Assert.DoesNotContain(System.ReadOnlySpan(Of Char), System.Span(Of Char))
  name.vb: DoesNotContain(ReadOnlySpan(Of Char), Span(Of Char))
- uid: v3.1.0.1:Xunit.Assert.DoesNotContain(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})
  commentId: M:Xunit.Assert.DoesNotContain(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})
  id: DoesNotContain(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: DoesNotContain(ReadOnlySpan<char>, ReadOnlySpan<char>)
  nameWithType: Assert.DoesNotContain(ReadOnlySpan<char>, ReadOnlySpan<char>)
  fullName: Xunit.Assert.DoesNotContain(System.ReadOnlySpan<char>, System.ReadOnlySpan<char>)
  type: Method
  source:
    id: DoesNotContain
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 512
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a string does not contain a given sub-string, using the current culture.
  example: []
  syntax:
    content: public static void DoesNotContain(ReadOnlySpan<char> expectedSubstring, ReadOnlySpan<char> actualString)
    parameters:
    - id: expectedSubstring
      type: System.ReadOnlySpan{System.Char}
      description: The sub-string expected not to be in the string
    - id: actualString
      type: System.ReadOnlySpan{System.Char}
      description: The string to be inspected
    content.vb: Public Shared Sub DoesNotContain(expectedSubstring As ReadOnlySpan(Of Char), actualString As ReadOnlySpan(Of Char))
  overload: v3.1.0.1:Xunit.Assert.DoesNotContain*
  exceptions:
  - type: Xunit.Sdk.DoesNotContainException
    commentId: T:Xunit.Sdk.DoesNotContainException
    description: Thrown when the sub-string is present inside the string
  nameWithType.vb: Assert.DoesNotContain(ReadOnlySpan(Of Char), ReadOnlySpan(Of Char))
  fullName.vb: Xunit.Assert.DoesNotContain(System.ReadOnlySpan(Of Char), System.ReadOnlySpan(Of Char))
  name.vb: DoesNotContain(ReadOnlySpan(Of Char), ReadOnlySpan(Of Char))
- uid: v3.1.0.1:Xunit.Assert.DoesNotMatch(System.String,System.String)
  commentId: M:Xunit.Assert.DoesNotMatch(System.String,System.String)
  id: DoesNotMatch(System.String,System.String)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: DoesNotMatch(string, string?)
  nameWithType: Assert.DoesNotMatch(string, string?)
  fullName: Xunit.Assert.DoesNotMatch(string, string?)
  type: Method
  source:
    id: DoesNotMatch
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 525
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a string does not match a regular expression.
  example: []
  syntax:
    content: public static void DoesNotMatch(string expectedRegexPattern, string? actualString)
    parameters:
    - id: expectedRegexPattern
      type: System.String
      description: The regex pattern expected not to match
    - id: actualString
      type: System.String
      description: The string to be inspected
    content.vb: Public Shared Sub DoesNotMatch(expectedRegexPattern As String, actualString As String)
  overload: v3.1.0.1:Xunit.Assert.DoesNotMatch*
  exceptions:
  - type: Xunit.Sdk.DoesNotMatchException
    commentId: T:Xunit.Sdk.DoesNotMatchException
    description: Thrown when the string matches the regex pattern
  nameWithType.vb: Assert.DoesNotMatch(String, String)
  fullName.vb: Xunit.Assert.DoesNotMatch(String, String)
  name.vb: DoesNotMatch(String, String)
- uid: v3.1.0.1:Xunit.Assert.DoesNotMatch(System.Text.RegularExpressions.Regex,System.String)
  commentId: M:Xunit.Assert.DoesNotMatch(System.Text.RegularExpressions.Regex,System.String)
  id: DoesNotMatch(System.Text.RegularExpressions.Regex,System.String)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: DoesNotMatch(Regex, string?)
  nameWithType: Assert.DoesNotMatch(Regex, string?)
  fullName: Xunit.Assert.DoesNotMatch(System.Text.RegularExpressions.Regex, string?)
  type: Method
  source:
    id: DoesNotMatch
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 556
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a string does not match a regular expression.
  example: []
  syntax:
    content: public static void DoesNotMatch(Regex expectedRegex, string? actualString)
    parameters:
    - id: expectedRegex
      type: System.Text.RegularExpressions.Regex
      description: The regex expected not to match
    - id: actualString
      type: System.String
      description: The string to be inspected
    content.vb: Public Shared Sub DoesNotMatch(expectedRegex As Regex, actualString As String)
  overload: v3.1.0.1:Xunit.Assert.DoesNotMatch*
  exceptions:
  - type: Xunit.Sdk.DoesNotMatchException
    commentId: T:Xunit.Sdk.DoesNotMatchException
    description: Thrown when the string matches the regex
  nameWithType.vb: Assert.DoesNotMatch(Regex, String)
  fullName.vb: Xunit.Assert.DoesNotMatch(System.Text.RegularExpressions.Regex, String)
  name.vb: DoesNotMatch(Regex, String)
- uid: v3.1.0.1:Xunit.Assert.Empty(System.String)
  commentId: M:Xunit.Assert.Empty(System.String)
  id: Empty(System.String)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Empty(string)
  nameWithType: Assert.Empty(string)
  fullName: Xunit.Assert.Empty(string)
  type: Method
  source:
    id: Empty
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 586
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a string is empty.
  example: []
  syntax:
    content: public static void Empty(string value)
    parameters:
    - id: value
      type: System.String
      description: The string value to be inspected
    content.vb: Public Shared Sub Empty(value As String)
  overload: v3.1.0.1:Xunit.Assert.Empty*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown when the string is null
  - type: Xunit.Sdk.EmptyException
    commentId: T:Xunit.Sdk.EmptyException
    description: Thrown when the string is not empty
  nameWithType.vb: Assert.Empty(String)
  fullName.vb: Xunit.Assert.Empty(String)
  name.vb: Empty(String)
- uid: v3.1.0.1:Xunit.Assert.EndsWith(System.String,System.String)
  commentId: M:Xunit.Assert.EndsWith(System.String,System.String)
  id: EndsWith(System.String,System.String)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: EndsWith(string?, string?)
  nameWithType: Assert.EndsWith(string?, string?)
  fullName: Xunit.Assert.EndsWith(string?, string?)
  type: Method
  source:
    id: EndsWith
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 600
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a string ends with a given sub-string, using the current culture.
  example: []
  syntax:
    content: public static void EndsWith(string? expectedEndString, string? actualString)
    parameters:
    - id: expectedEndString
      type: System.String
      description: The sub-string expected to be at the end of the string
    - id: actualString
      type: System.String
      description: The string to be inspected
    content.vb: Public Shared Sub EndsWith(expectedEndString As String, actualString As String)
  overload: v3.1.0.1:Xunit.Assert.EndsWith*
  exceptions:
  - type: Xunit.Sdk.ContainsException
    commentId: T:Xunit.Sdk.ContainsException
    description: Thrown when the string does not end with the expected sub-string
  nameWithType.vb: Assert.EndsWith(String, String)
  fullName.vb: Xunit.Assert.EndsWith(String, String)
  name.vb: EndsWith(String, String)
- uid: v3.1.0.1:Xunit.Assert.EndsWith(System.String,System.String,System.StringComparison)
  commentId: M:Xunit.Assert.EndsWith(System.String,System.String,System.StringComparison)
  id: EndsWith(System.String,System.String,System.StringComparison)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: EndsWith(string?, string?, StringComparison)
  nameWithType: Assert.EndsWith(string?, string?, StringComparison)
  fullName: Xunit.Assert.EndsWith(string?, string?, System.StringComparison)
  type: Method
  source:
    id: EndsWith
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 617
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a string ends with a given sub-string, using the given comparison type.
  example: []
  syntax:
    content: public static void EndsWith(string? expectedEndString, string? actualString, StringComparison comparisonType)
    parameters:
    - id: expectedEndString
      type: System.String
      description: The sub-string expected to be at the end of the string
    - id: actualString
      type: System.String
      description: The string to be inspected
    - id: comparisonType
      type: System.StringComparison
      description: The type of string comparison to perform
    content.vb: Public Shared Sub EndsWith(expectedEndString As String, actualString As String, comparisonType As StringComparison)
  overload: v3.1.0.1:Xunit.Assert.EndsWith*
  exceptions:
  - type: Xunit.Sdk.ContainsException
    commentId: T:Xunit.Sdk.ContainsException
    description: Thrown when the string does not end with the expected sub-string
  nameWithType.vb: Assert.EndsWith(String, String, StringComparison)
  fullName.vb: Xunit.Assert.EndsWith(String, String, System.StringComparison)
  name.vb: EndsWith(String, String, StringComparison)
- uid: v3.1.0.1:Xunit.Assert.EndsWith(System.Memory{System.Char},System.Memory{System.Char})
  commentId: M:Xunit.Assert.EndsWith(System.Memory{System.Char},System.Memory{System.Char})
  id: EndsWith(System.Memory{System.Char},System.Memory{System.Char})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: EndsWith(Memory<char>, Memory<char>)
  nameWithType: Assert.EndsWith(Memory<char>, Memory<char>)
  fullName: Xunit.Assert.EndsWith(System.Memory<char>, System.Memory<char>)
  type: Method
  source:
    id: EndsWith
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 639
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a string ends with a given sub-string, using the current culture.
  example: []
  syntax:
    content: public static void EndsWith(Memory<char> expectedEndString, Memory<char> actualString)
    parameters:
    - id: expectedEndString
      type: System.Memory{System.Char}
      description: The sub-string expected to be at the end of the string
    - id: actualString
      type: System.Memory{System.Char}
      description: The string to be inspected
    content.vb: Public Shared Sub EndsWith(expectedEndString As Memory(Of Char), actualString As Memory(Of Char))
  overload: v3.1.0.1:Xunit.Assert.EndsWith*
  exceptions:
  - type: Xunit.Sdk.EndsWithException
    commentId: T:Xunit.Sdk.EndsWithException
    description: Thrown when the string does not end with the expected sub-string
  nameWithType.vb: Assert.EndsWith(Memory(Of Char), Memory(Of Char))
  fullName.vb: Xunit.Assert.EndsWith(System.Memory(Of Char), System.Memory(Of Char))
  name.vb: EndsWith(Memory(Of Char), Memory(Of Char))
- uid: v3.1.0.1:Xunit.Assert.EndsWith(System.Memory{System.Char},System.ReadOnlyMemory{System.Char})
  commentId: M:Xunit.Assert.EndsWith(System.Memory{System.Char},System.ReadOnlyMemory{System.Char})
  id: EndsWith(System.Memory{System.Char},System.ReadOnlyMemory{System.Char})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: EndsWith(Memory<char>, ReadOnlyMemory<char>)
  nameWithType: Assert.EndsWith(Memory<char>, ReadOnlyMemory<char>)
  fullName: Xunit.Assert.EndsWith(System.Memory<char>, System.ReadOnlyMemory<char>)
  type: Method
  source:
    id: EndsWith
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 650
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a string ends with a given sub-string, using the current culture.
  example: []
  syntax:
    content: public static void EndsWith(Memory<char> expectedEndString, ReadOnlyMemory<char> actualString)
    parameters:
    - id: expectedEndString
      type: System.Memory{System.Char}
      description: The sub-string expected to be at the end of the string
    - id: actualString
      type: System.ReadOnlyMemory{System.Char}
      description: The string to be inspected
    content.vb: Public Shared Sub EndsWith(expectedEndString As Memory(Of Char), actualString As ReadOnlyMemory(Of Char))
  overload: v3.1.0.1:Xunit.Assert.EndsWith*
  exceptions:
  - type: Xunit.Sdk.EndsWithException
    commentId: T:Xunit.Sdk.EndsWithException
    description: Thrown when the string does not end with the expected sub-string
  nameWithType.vb: Assert.EndsWith(Memory(Of Char), ReadOnlyMemory(Of Char))
  fullName.vb: Xunit.Assert.EndsWith(System.Memory(Of Char), System.ReadOnlyMemory(Of Char))
  name.vb: EndsWith(Memory(Of Char), ReadOnlyMemory(Of Char))
- uid: v3.1.0.1:Xunit.Assert.EndsWith(System.ReadOnlyMemory{System.Char},System.Memory{System.Char})
  commentId: M:Xunit.Assert.EndsWith(System.ReadOnlyMemory{System.Char},System.Memory{System.Char})
  id: EndsWith(System.ReadOnlyMemory{System.Char},System.Memory{System.Char})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: EndsWith(ReadOnlyMemory<char>, Memory<char>)
  nameWithType: Assert.EndsWith(ReadOnlyMemory<char>, Memory<char>)
  fullName: Xunit.Assert.EndsWith(System.ReadOnlyMemory<char>, System.Memory<char>)
  type: Method
  source:
    id: EndsWith
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 661
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a string ends with a given sub-string, using the current culture.
  example: []
  syntax:
    content: public static void EndsWith(ReadOnlyMemory<char> expectedEndString, Memory<char> actualString)
    parameters:
    - id: expectedEndString
      type: System.ReadOnlyMemory{System.Char}
      description: The sub-string expected to be at the end of the string
    - id: actualString
      type: System.Memory{System.Char}
      description: The string to be inspected
    content.vb: Public Shared Sub EndsWith(expectedEndString As ReadOnlyMemory(Of Char), actualString As Memory(Of Char))
  overload: v3.1.0.1:Xunit.Assert.EndsWith*
  exceptions:
  - type: Xunit.Sdk.EndsWithException
    commentId: T:Xunit.Sdk.EndsWithException
    description: Thrown when the string does not end with the expected sub-string
  nameWithType.vb: Assert.EndsWith(ReadOnlyMemory(Of Char), Memory(Of Char))
  fullName.vb: Xunit.Assert.EndsWith(System.ReadOnlyMemory(Of Char), System.Memory(Of Char))
  name.vb: EndsWith(ReadOnlyMemory(Of Char), Memory(Of Char))
- uid: v3.1.0.1:Xunit.Assert.EndsWith(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char})
  commentId: M:Xunit.Assert.EndsWith(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char})
  id: EndsWith(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: EndsWith(ReadOnlyMemory<char>, ReadOnlyMemory<char>)
  nameWithType: Assert.EndsWith(ReadOnlyMemory<char>, ReadOnlyMemory<char>)
  fullName: Xunit.Assert.EndsWith(System.ReadOnlyMemory<char>, System.ReadOnlyMemory<char>)
  type: Method
  source:
    id: EndsWith
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 672
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a string ends with a given sub-string, using the current culture.
  example: []
  syntax:
    content: public static void EndsWith(ReadOnlyMemory<char> expectedEndString, ReadOnlyMemory<char> actualString)
    parameters:
    - id: expectedEndString
      type: System.ReadOnlyMemory{System.Char}
      description: The sub-string expected to be at the end of the string
    - id: actualString
      type: System.ReadOnlyMemory{System.Char}
      description: The string to be inspected
    content.vb: Public Shared Sub EndsWith(expectedEndString As ReadOnlyMemory(Of Char), actualString As ReadOnlyMemory(Of Char))
  overload: v3.1.0.1:Xunit.Assert.EndsWith*
  exceptions:
  - type: Xunit.Sdk.EndsWithException
    commentId: T:Xunit.Sdk.EndsWithException
    description: Thrown when the string does not end with the expected sub-string
  nameWithType.vb: Assert.EndsWith(ReadOnlyMemory(Of Char), ReadOnlyMemory(Of Char))
  fullName.vb: Xunit.Assert.EndsWith(System.ReadOnlyMemory(Of Char), System.ReadOnlyMemory(Of Char))
  name.vb: EndsWith(ReadOnlyMemory(Of Char), ReadOnlyMemory(Of Char))
- uid: v3.1.0.1:Xunit.Assert.EndsWith(System.Memory{System.Char},System.Memory{System.Char},System.StringComparison)
  commentId: M:Xunit.Assert.EndsWith(System.Memory{System.Char},System.Memory{System.Char},System.StringComparison)
  id: EndsWith(System.Memory{System.Char},System.Memory{System.Char},System.StringComparison)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: EndsWith(Memory<char>, Memory<char>, StringComparison)
  nameWithType: Assert.EndsWith(Memory<char>, Memory<char>, StringComparison)
  fullName: Xunit.Assert.EndsWith(System.Memory<char>, System.Memory<char>, System.StringComparison)
  type: Method
  source:
    id: EndsWith
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 684
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a string ends with a given sub-string, using the given comparison type.
  example: []
  syntax:
    content: public static void EndsWith(Memory<char> expectedEndString, Memory<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture)
    parameters:
    - id: expectedEndString
      type: System.Memory{System.Char}
      description: The sub-string expected to be at the end of the string
    - id: actualString
      type: System.Memory{System.Char}
      description: The string to be inspected
    - id: comparisonType
      type: System.StringComparison
      description: The type of string comparison to perform
    content.vb: Public Shared Sub EndsWith(expectedEndString As Memory(Of Char), actualString As Memory(Of Char), comparisonType As StringComparison = StringComparison.CurrentCulture)
  overload: v3.1.0.1:Xunit.Assert.EndsWith*
  exceptions:
  - type: Xunit.Sdk.EndsWithException
    commentId: T:Xunit.Sdk.EndsWithException
    description: Thrown when the string does not end with the expected sub-string
  nameWithType.vb: Assert.EndsWith(Memory(Of Char), Memory(Of Char), StringComparison)
  fullName.vb: Xunit.Assert.EndsWith(System.Memory(Of Char), System.Memory(Of Char), System.StringComparison)
  name.vb: EndsWith(Memory(Of Char), Memory(Of Char), StringComparison)
- uid: v3.1.0.1:Xunit.Assert.EndsWith(System.Memory{System.Char},System.ReadOnlyMemory{System.Char},System.StringComparison)
  commentId: M:Xunit.Assert.EndsWith(System.Memory{System.Char},System.ReadOnlyMemory{System.Char},System.StringComparison)
  id: EndsWith(System.Memory{System.Char},System.ReadOnlyMemory{System.Char},System.StringComparison)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: EndsWith(Memory<char>, ReadOnlyMemory<char>, StringComparison)
  nameWithType: Assert.EndsWith(Memory<char>, ReadOnlyMemory<char>, StringComparison)
  fullName: Xunit.Assert.EndsWith(System.Memory<char>, System.ReadOnlyMemory<char>, System.StringComparison)
  type: Method
  source:
    id: EndsWith
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 697
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a string ends with a given sub-string, using the given comparison type.
  example: []
  syntax:
    content: public static void EndsWith(Memory<char> expectedEndString, ReadOnlyMemory<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture)
    parameters:
    - id: expectedEndString
      type: System.Memory{System.Char}
      description: The sub-string expected to be at the end of the string
    - id: actualString
      type: System.ReadOnlyMemory{System.Char}
      description: The string to be inspected
    - id: comparisonType
      type: System.StringComparison
      description: The type of string comparison to perform
    content.vb: Public Shared Sub EndsWith(expectedEndString As Memory(Of Char), actualString As ReadOnlyMemory(Of Char), comparisonType As StringComparison = StringComparison.CurrentCulture)
  overload: v3.1.0.1:Xunit.Assert.EndsWith*
  exceptions:
  - type: Xunit.Sdk.EndsWithException
    commentId: T:Xunit.Sdk.EndsWithException
    description: Thrown when the string does not end with the expected sub-string
  nameWithType.vb: Assert.EndsWith(Memory(Of Char), ReadOnlyMemory(Of Char), StringComparison)
  fullName.vb: Xunit.Assert.EndsWith(System.Memory(Of Char), System.ReadOnlyMemory(Of Char), System.StringComparison)
  name.vb: EndsWith(Memory(Of Char), ReadOnlyMemory(Of Char), StringComparison)
- uid: v3.1.0.1:Xunit.Assert.EndsWith(System.ReadOnlyMemory{System.Char},System.Memory{System.Char},System.StringComparison)
  commentId: M:Xunit.Assert.EndsWith(System.ReadOnlyMemory{System.Char},System.Memory{System.Char},System.StringComparison)
  id: EndsWith(System.ReadOnlyMemory{System.Char},System.Memory{System.Char},System.StringComparison)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: EndsWith(ReadOnlyMemory<char>, Memory<char>, StringComparison)
  nameWithType: Assert.EndsWith(ReadOnlyMemory<char>, Memory<char>, StringComparison)
  fullName: Xunit.Assert.EndsWith(System.ReadOnlyMemory<char>, System.Memory<char>, System.StringComparison)
  type: Method
  source:
    id: EndsWith
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 710
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a string ends with a given sub-string, using the given comparison type.
  example: []
  syntax:
    content: public static void EndsWith(ReadOnlyMemory<char> expectedEndString, Memory<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture)
    parameters:
    - id: expectedEndString
      type: System.ReadOnlyMemory{System.Char}
      description: The sub-string expected to be at the end of the string
    - id: actualString
      type: System.Memory{System.Char}
      description: The string to be inspected
    - id: comparisonType
      type: System.StringComparison
      description: The type of string comparison to perform
    content.vb: Public Shared Sub EndsWith(expectedEndString As ReadOnlyMemory(Of Char), actualString As Memory(Of Char), comparisonType As StringComparison = StringComparison.CurrentCulture)
  overload: v3.1.0.1:Xunit.Assert.EndsWith*
  exceptions:
  - type: Xunit.Sdk.EndsWithException
    commentId: T:Xunit.Sdk.EndsWithException
    description: Thrown when the string does not end with the expected sub-string
  nameWithType.vb: Assert.EndsWith(ReadOnlyMemory(Of Char), Memory(Of Char), StringComparison)
  fullName.vb: Xunit.Assert.EndsWith(System.ReadOnlyMemory(Of Char), System.Memory(Of Char), System.StringComparison)
  name.vb: EndsWith(ReadOnlyMemory(Of Char), Memory(Of Char), StringComparison)
- uid: v3.1.0.1:Xunit.Assert.EndsWith(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char},System.StringComparison)
  commentId: M:Xunit.Assert.EndsWith(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char},System.StringComparison)
  id: EndsWith(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char},System.StringComparison)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: EndsWith(ReadOnlyMemory<char>, ReadOnlyMemory<char>, StringComparison)
  nameWithType: Assert.EndsWith(ReadOnlyMemory<char>, ReadOnlyMemory<char>, StringComparison)
  fullName: Xunit.Assert.EndsWith(System.ReadOnlyMemory<char>, System.ReadOnlyMemory<char>, System.StringComparison)
  type: Method
  source:
    id: EndsWith
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 723
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a string ends with a given sub-string, using the given comparison type.
  example: []
  syntax:
    content: public static void EndsWith(ReadOnlyMemory<char> expectedEndString, ReadOnlyMemory<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture)
    parameters:
    - id: expectedEndString
      type: System.ReadOnlyMemory{System.Char}
      description: The sub-string expected to be at the end of the string
    - id: actualString
      type: System.ReadOnlyMemory{System.Char}
      description: The string to be inspected
    - id: comparisonType
      type: System.StringComparison
      description: The type of string comparison to perform
    content.vb: Public Shared Sub EndsWith(expectedEndString As ReadOnlyMemory(Of Char), actualString As ReadOnlyMemory(Of Char), comparisonType As StringComparison = StringComparison.CurrentCulture)
  overload: v3.1.0.1:Xunit.Assert.EndsWith*
  exceptions:
  - type: Xunit.Sdk.EndsWithException
    commentId: T:Xunit.Sdk.EndsWithException
    description: Thrown when the string does not end with the expected sub-string
  nameWithType.vb: Assert.EndsWith(ReadOnlyMemory(Of Char), ReadOnlyMemory(Of Char), StringComparison)
  fullName.vb: Xunit.Assert.EndsWith(System.ReadOnlyMemory(Of Char), System.ReadOnlyMemory(Of Char), System.StringComparison)
  name.vb: EndsWith(ReadOnlyMemory(Of Char), ReadOnlyMemory(Of Char), StringComparison)
- uid: v3.1.0.1:Xunit.Assert.EndsWith(System.Span{System.Char},System.Span{System.Char})
  commentId: M:Xunit.Assert.EndsWith(System.Span{System.Char},System.Span{System.Char})
  id: EndsWith(System.Span{System.Char},System.Span{System.Char})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: EndsWith(Span<char>, Span<char>)
  nameWithType: Assert.EndsWith(Span<char>, Span<char>)
  fullName: Xunit.Assert.EndsWith(System.Span<char>, System.Span<char>)
  type: Method
  source:
    id: EndsWith
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 739
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a string ends with a given sub-string, using the current culture.
  example: []
  syntax:
    content: public static void EndsWith(Span<char> expectedEndString, Span<char> actualString)
    parameters:
    - id: expectedEndString
      type: System.Span{System.Char}
      description: The sub-string expected to be at the end of the string
    - id: actualString
      type: System.Span{System.Char}
      description: The string to be inspected
    content.vb: Public Shared Sub EndsWith(expectedEndString As Span(Of Char), actualString As Span(Of Char))
  overload: v3.1.0.1:Xunit.Assert.EndsWith*
  exceptions:
  - type: Xunit.Sdk.EndsWithException
    commentId: T:Xunit.Sdk.EndsWithException
    description: Thrown when the string does not end with the expected sub-string
  nameWithType.vb: Assert.EndsWith(Span(Of Char), Span(Of Char))
  fullName.vb: Xunit.Assert.EndsWith(System.Span(Of Char), System.Span(Of Char))
  name.vb: EndsWith(Span(Of Char), Span(Of Char))
- uid: v3.1.0.1:Xunit.Assert.EndsWith(System.Span{System.Char},System.ReadOnlySpan{System.Char})
  commentId: M:Xunit.Assert.EndsWith(System.Span{System.Char},System.ReadOnlySpan{System.Char})
  id: EndsWith(System.Span{System.Char},System.ReadOnlySpan{System.Char})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: EndsWith(Span<char>, ReadOnlySpan<char>)
  nameWithType: Assert.EndsWith(Span<char>, ReadOnlySpan<char>)
  fullName: Xunit.Assert.EndsWith(System.Span<char>, System.ReadOnlySpan<char>)
  type: Method
  source:
    id: EndsWith
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 750
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a string ends with a given sub-string, using the current culture.
  example: []
  syntax:
    content: public static void EndsWith(Span<char> expectedEndString, ReadOnlySpan<char> actualString)
    parameters:
    - id: expectedEndString
      type: System.Span{System.Char}
      description: The sub-string expected to be at the end of the string
    - id: actualString
      type: System.ReadOnlySpan{System.Char}
      description: The string to be inspected
    content.vb: Public Shared Sub EndsWith(expectedEndString As Span(Of Char), actualString As ReadOnlySpan(Of Char))
  overload: v3.1.0.1:Xunit.Assert.EndsWith*
  exceptions:
  - type: Xunit.Sdk.EndsWithException
    commentId: T:Xunit.Sdk.EndsWithException
    description: Thrown when the string does not end with the expected sub-string
  nameWithType.vb: Assert.EndsWith(Span(Of Char), ReadOnlySpan(Of Char))
  fullName.vb: Xunit.Assert.EndsWith(System.Span(Of Char), System.ReadOnlySpan(Of Char))
  name.vb: EndsWith(Span(Of Char), ReadOnlySpan(Of Char))
- uid: v3.1.0.1:Xunit.Assert.EndsWith(System.ReadOnlySpan{System.Char},System.Span{System.Char})
  commentId: M:Xunit.Assert.EndsWith(System.ReadOnlySpan{System.Char},System.Span{System.Char})
  id: EndsWith(System.ReadOnlySpan{System.Char},System.Span{System.Char})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: EndsWith(ReadOnlySpan<char>, Span<char>)
  nameWithType: Assert.EndsWith(ReadOnlySpan<char>, Span<char>)
  fullName: Xunit.Assert.EndsWith(System.ReadOnlySpan<char>, System.Span<char>)
  type: Method
  source:
    id: EndsWith
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 761
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a string ends with a given sub-string, using the current culture.
  example: []
  syntax:
    content: public static void EndsWith(ReadOnlySpan<char> expectedEndString, Span<char> actualString)
    parameters:
    - id: expectedEndString
      type: System.ReadOnlySpan{System.Char}
      description: The sub-string expected to be at the end of the string
    - id: actualString
      type: System.Span{System.Char}
      description: The string to be inspected
    content.vb: Public Shared Sub EndsWith(expectedEndString As ReadOnlySpan(Of Char), actualString As Span(Of Char))
  overload: v3.1.0.1:Xunit.Assert.EndsWith*
  exceptions:
  - type: Xunit.Sdk.EndsWithException
    commentId: T:Xunit.Sdk.EndsWithException
    description: Thrown when the string does not end with the expected sub-string
  nameWithType.vb: Assert.EndsWith(ReadOnlySpan(Of Char), Span(Of Char))
  fullName.vb: Xunit.Assert.EndsWith(System.ReadOnlySpan(Of Char), System.Span(Of Char))
  name.vb: EndsWith(ReadOnlySpan(Of Char), Span(Of Char))
- uid: v3.1.0.1:Xunit.Assert.EndsWith(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})
  commentId: M:Xunit.Assert.EndsWith(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})
  id: EndsWith(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: EndsWith(ReadOnlySpan<char>, ReadOnlySpan<char>)
  nameWithType: Assert.EndsWith(ReadOnlySpan<char>, ReadOnlySpan<char>)
  fullName: Xunit.Assert.EndsWith(System.ReadOnlySpan<char>, System.ReadOnlySpan<char>)
  type: Method
  source:
    id: EndsWith
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 772
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a string ends with a given sub-string, using the current culture.
  example: []
  syntax:
    content: public static void EndsWith(ReadOnlySpan<char> expectedEndString, ReadOnlySpan<char> actualString)
    parameters:
    - id: expectedEndString
      type: System.ReadOnlySpan{System.Char}
      description: The sub-string expected to be at the end of the string
    - id: actualString
      type: System.ReadOnlySpan{System.Char}
      description: The string to be inspected
    content.vb: Public Shared Sub EndsWith(expectedEndString As ReadOnlySpan(Of Char), actualString As ReadOnlySpan(Of Char))
  overload: v3.1.0.1:Xunit.Assert.EndsWith*
  exceptions:
  - type: Xunit.Sdk.EndsWithException
    commentId: T:Xunit.Sdk.EndsWithException
    description: Thrown when the string does not end with the expected sub-string
  nameWithType.vb: Assert.EndsWith(ReadOnlySpan(Of Char), ReadOnlySpan(Of Char))
  fullName.vb: Xunit.Assert.EndsWith(System.ReadOnlySpan(Of Char), System.ReadOnlySpan(Of Char))
  name.vb: EndsWith(ReadOnlySpan(Of Char), ReadOnlySpan(Of Char))
- uid: v3.1.0.1:Xunit.Assert.EndsWith(System.Span{System.Char},System.Span{System.Char},System.StringComparison)
  commentId: M:Xunit.Assert.EndsWith(System.Span{System.Char},System.Span{System.Char},System.StringComparison)
  id: EndsWith(System.Span{System.Char},System.Span{System.Char},System.StringComparison)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: EndsWith(Span<char>, Span<char>, StringComparison)
  nameWithType: Assert.EndsWith(Span<char>, Span<char>, StringComparison)
  fullName: Xunit.Assert.EndsWith(System.Span<char>, System.Span<char>, System.StringComparison)
  type: Method
  source:
    id: EndsWith
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 784
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a string ends with a given sub-string, using the given comparison type.
  example: []
  syntax:
    content: public static void EndsWith(Span<char> expectedEndString, Span<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture)
    parameters:
    - id: expectedEndString
      type: System.Span{System.Char}
      description: The sub-string expected to be at the end of the string
    - id: actualString
      type: System.Span{System.Char}
      description: The string to be inspected
    - id: comparisonType
      type: System.StringComparison
      description: The type of string comparison to perform
    content.vb: Public Shared Sub EndsWith(expectedEndString As Span(Of Char), actualString As Span(Of Char), comparisonType As StringComparison = StringComparison.CurrentCulture)
  overload: v3.1.0.1:Xunit.Assert.EndsWith*
  exceptions:
  - type: Xunit.Sdk.EndsWithException
    commentId: T:Xunit.Sdk.EndsWithException
    description: Thrown when the string does not end with the expected sub-string
  nameWithType.vb: Assert.EndsWith(Span(Of Char), Span(Of Char), StringComparison)
  fullName.vb: Xunit.Assert.EndsWith(System.Span(Of Char), System.Span(Of Char), System.StringComparison)
  name.vb: EndsWith(Span(Of Char), Span(Of Char), StringComparison)
- uid: v3.1.0.1:Xunit.Assert.EndsWith(System.Span{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)
  commentId: M:Xunit.Assert.EndsWith(System.Span{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)
  id: EndsWith(System.Span{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: EndsWith(Span<char>, ReadOnlySpan<char>, StringComparison)
  nameWithType: Assert.EndsWith(Span<char>, ReadOnlySpan<char>, StringComparison)
  fullName: Xunit.Assert.EndsWith(System.Span<char>, System.ReadOnlySpan<char>, System.StringComparison)
  type: Method
  source:
    id: EndsWith
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 797
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a string ends with a given sub-string, using the given comparison type.
  example: []
  syntax:
    content: public static void EndsWith(Span<char> expectedEndString, ReadOnlySpan<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture)
    parameters:
    - id: expectedEndString
      type: System.Span{System.Char}
      description: The sub-string expected to be at the end of the string
    - id: actualString
      type: System.ReadOnlySpan{System.Char}
      description: The string to be inspected
    - id: comparisonType
      type: System.StringComparison
      description: The type of string comparison to perform
    content.vb: Public Shared Sub EndsWith(expectedEndString As Span(Of Char), actualString As ReadOnlySpan(Of Char), comparisonType As StringComparison = StringComparison.CurrentCulture)
  overload: v3.1.0.1:Xunit.Assert.EndsWith*
  exceptions:
  - type: Xunit.Sdk.EndsWithException
    commentId: T:Xunit.Sdk.EndsWithException
    description: Thrown when the string does not end with the expected sub-string
  nameWithType.vb: Assert.EndsWith(Span(Of Char), ReadOnlySpan(Of Char), StringComparison)
  fullName.vb: Xunit.Assert.EndsWith(System.Span(Of Char), System.ReadOnlySpan(Of Char), System.StringComparison)
  name.vb: EndsWith(Span(Of Char), ReadOnlySpan(Of Char), StringComparison)
- uid: v3.1.0.1:Xunit.Assert.EndsWith(System.ReadOnlySpan{System.Char},System.Span{System.Char},System.StringComparison)
  commentId: M:Xunit.Assert.EndsWith(System.ReadOnlySpan{System.Char},System.Span{System.Char},System.StringComparison)
  id: EndsWith(System.ReadOnlySpan{System.Char},System.Span{System.Char},System.StringComparison)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: EndsWith(ReadOnlySpan<char>, Span<char>, StringComparison)
  nameWithType: Assert.EndsWith(ReadOnlySpan<char>, Span<char>, StringComparison)
  fullName: Xunit.Assert.EndsWith(System.ReadOnlySpan<char>, System.Span<char>, System.StringComparison)
  type: Method
  source:
    id: EndsWith
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 810
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a string ends with a given sub-string, using the given comparison type.
  example: []
  syntax:
    content: public static void EndsWith(ReadOnlySpan<char> expectedEndString, Span<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture)
    parameters:
    - id: expectedEndString
      type: System.ReadOnlySpan{System.Char}
      description: The sub-string expected to be at the end of the string
    - id: actualString
      type: System.Span{System.Char}
      description: The string to be inspected
    - id: comparisonType
      type: System.StringComparison
      description: The type of string comparison to perform
    content.vb: Public Shared Sub EndsWith(expectedEndString As ReadOnlySpan(Of Char), actualString As Span(Of Char), comparisonType As StringComparison = StringComparison.CurrentCulture)
  overload: v3.1.0.1:Xunit.Assert.EndsWith*
  exceptions:
  - type: Xunit.Sdk.EndsWithException
    commentId: T:Xunit.Sdk.EndsWithException
    description: Thrown when the string does not end with the expected sub-string
  nameWithType.vb: Assert.EndsWith(ReadOnlySpan(Of Char), Span(Of Char), StringComparison)
  fullName.vb: Xunit.Assert.EndsWith(System.ReadOnlySpan(Of Char), System.Span(Of Char), System.StringComparison)
  name.vb: EndsWith(ReadOnlySpan(Of Char), Span(Of Char), StringComparison)
- uid: v3.1.0.1:Xunit.Assert.EndsWith(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)
  commentId: M:Xunit.Assert.EndsWith(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)
  id: EndsWith(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: EndsWith(ReadOnlySpan<char>, ReadOnlySpan<char>, StringComparison)
  nameWithType: Assert.EndsWith(ReadOnlySpan<char>, ReadOnlySpan<char>, StringComparison)
  fullName: Xunit.Assert.EndsWith(System.ReadOnlySpan<char>, System.ReadOnlySpan<char>, System.StringComparison)
  type: Method
  source:
    id: EndsWith
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 823
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a string ends with a given sub-string, using the given comparison type.
  example: []
  syntax:
    content: public static void EndsWith(ReadOnlySpan<char> expectedEndString, ReadOnlySpan<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture)
    parameters:
    - id: expectedEndString
      type: System.ReadOnlySpan{System.Char}
      description: The sub-string expected to be at the end of the string
    - id: actualString
      type: System.ReadOnlySpan{System.Char}
      description: The string to be inspected
    - id: comparisonType
      type: System.StringComparison
      description: The type of string comparison to perform
    content.vb: Public Shared Sub EndsWith(expectedEndString As ReadOnlySpan(Of Char), actualString As ReadOnlySpan(Of Char), comparisonType As StringComparison = StringComparison.CurrentCulture)
  overload: v3.1.0.1:Xunit.Assert.EndsWith*
  exceptions:
  - type: Xunit.Sdk.EndsWithException
    commentId: T:Xunit.Sdk.EndsWithException
    description: Thrown when the string does not end with the expected sub-string
  nameWithType.vb: Assert.EndsWith(ReadOnlySpan(Of Char), ReadOnlySpan(Of Char), StringComparison)
  fullName.vb: Xunit.Assert.EndsWith(System.ReadOnlySpan(Of Char), System.ReadOnlySpan(Of Char), System.StringComparison)
  name.vb: EndsWith(ReadOnlySpan(Of Char), ReadOnlySpan(Of Char), StringComparison)
- uid: v3.1.0.1:Xunit.Assert.Equal(System.String,System.String)
  commentId: M:Xunit.Assert.Equal(System.String,System.String)
  id: Equal(System.String,System.String)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Equal(string?, string?)
  nameWithType: Assert.Equal(string?, string?)
  fullName: Xunit.Assert.Equal(string?, string?)
  type: Method
  source:
    id: Equal
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 840
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that two strings are equivalent.
  example: []
  syntax:
    content: public static void Equal(string? expected, string? actual)
    parameters:
    - id: expected
      type: System.String
      description: The expected string value.
    - id: actual
      type: System.String
      description: The actual string value.
    content.vb: Public Shared Sub Equal(expected As String, actual As String)
  overload: v3.1.0.1:Xunit.Assert.Equal*
  exceptions:
  - type: Xunit.Sdk.EqualException
    commentId: T:Xunit.Sdk.EqualException
    description: Thrown when the strings are not equivalent.
  nameWithType.vb: Assert.Equal(String, String)
  fullName.vb: Xunit.Assert.Equal(String, String)
  name.vb: Equal(String, String)
- uid: v3.1.0.1:Xunit.Assert.Equal(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  commentId: M:Xunit.Assert.Equal(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  id: Equal(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Equal(ReadOnlySpan<char>, ReadOnlySpan<char>, bool, bool, bool, bool)
  nameWithType: Assert.Equal(ReadOnlySpan<char>, ReadOnlySpan<char>, bool, bool, bool, bool)
  fullName: Xunit.Assert.Equal(System.ReadOnlySpan<char>, System.ReadOnlySpan<char>, bool, bool, bool, bool)
  type: Method
  source:
    id: Equal
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 888
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that two strings are equivalent.
  remarks: >-
    The <code class="paramref">ignoreWhiteSpaceDifferences</code> and <code class="paramref">ignoreAllWhiteSpace</code> flags consider

    the following characters to be white-space:

    <a href="https://unicode-explorer.com/c/0009">Tab</a> (\t),

    <a href="https://unicode-explorer.com/c/0020">Space</a> (\u0020),

    <a href="https://unicode-explorer.com/c/00A0">No-Break Space</a> (\u00A0),

    <a href="https://unicode-explorer.com/c/1680">Ogham Space Mark</a> (\u1680),

    <a href="https://unicode-explorer.com/c/180E">Mongolian Vowel Separator</a> (\u180E),

    <a href="https://unicode-explorer.com/c/2000">En Quad</a> (\u2000),

    <a href="https://unicode-explorer.com/c/2001">Em Quad</a> (\u2001),

    <a href="https://unicode-explorer.com/c/2002">En Space</a> (\u2002),

    <a href="https://unicode-explorer.com/c/2003">Em Space</a> (\u2003),

    <a href="https://unicode-explorer.com/c/2004">Three-Per-Em Space</a> (\u2004),

    <a href="https://unicode-explorer.com/c/2005">Four-Per-Em Space</a> (\u2004),

    <a href="https://unicode-explorer.com/c/2006">Six-Per-Em Space</a> (\u2006),

    <a href="https://unicode-explorer.com/c/2007">Figure Space</a> (\u2007),

    <a href="https://unicode-explorer.com/c/2008">Punctuation Space</a> (\u2008),

    <a href="https://unicode-explorer.com/c/2009">Thin Space</a> (\u2009),

    <a href="https://unicode-explorer.com/c/200A">Hair Space</a> (\u200A),

    <a href="https://unicode-explorer.com/c/200B">Zero Width Space</a> (\u200B),

    <a href="https://unicode-explorer.com/c/202F">Narrow No-Break Space</a> (\u202F),

    <a href="https://unicode-explorer.com/c/205F">Medium Mathematical Space</a> (\u205F),

    <a href="https://unicode-explorer.com/c/3000">Ideographic Space</a> (\u3000),

    and <a href="https://unicode-explorer.com/c/FEFF">Zero Width No-Break Space</a> (\uFEFF).

    In particular, it does not include carriage return (\r) or line feed (\n), which are covered by

    <code class="paramref">ignoreLineEndingDifferences</code>.
  example: []
  syntax:
    content: public static void Equal(ReadOnlySpan<char> expected, ReadOnlySpan<char> actual, bool ignoreCase = false, bool ignoreLineEndingDifferences = false, bool ignoreWhiteSpaceDifferences = false, bool ignoreAllWhiteSpace = false)
    parameters:
    - id: expected
      type: System.ReadOnlySpan{System.Char}
      description: The expected string value.
    - id: actual
      type: System.ReadOnlySpan{System.Char}
      description: The actual string value.
    - id: ignoreCase
      type: System.Boolean
      description: If set to <code>true</code>, ignores cases differences. The invariant culture is used.
    - id: ignoreLineEndingDifferences
      type: System.Boolean
      description: If set to <code>true</code>, treats \r\n, \r, and \n as equivalent.
    - id: ignoreWhiteSpaceDifferences
      type: System.Boolean
      description: If set to <code>true</code>, treats horizontal white-space (i.e. spaces, tabs, and others; see remarks) in any non-zero quantity as equivalent.
    - id: ignoreAllWhiteSpace
      type: System.Boolean
      description: If set to <code>true</code>, treats horizontal white-space (i.e. spaces, tabs, and others; see remarks), including zero quantities, as equivalent.
    content.vb: Public Shared Sub Equal(expected As ReadOnlySpan(Of Char), actual As ReadOnlySpan(Of Char), ignoreCase As Boolean = False, ignoreLineEndingDifferences As Boolean = False, ignoreWhiteSpaceDifferences As Boolean = False, ignoreAllWhiteSpace As Boolean = False)
  overload: v3.1.0.1:Xunit.Assert.Equal*
  exceptions:
  - type: Xunit.Sdk.EqualException
    commentId: T:Xunit.Sdk.EqualException
    description: Thrown when the strings are not equivalent.
  nameWithType.vb: Assert.Equal(ReadOnlySpan(Of Char), ReadOnlySpan(Of Char), Boolean, Boolean, Boolean, Boolean)
  fullName.vb: Xunit.Assert.Equal(System.ReadOnlySpan(Of Char), System.ReadOnlySpan(Of Char), Boolean, Boolean, Boolean, Boolean)
  name.vb: Equal(ReadOnlySpan(Of Char), ReadOnlySpan(Of Char), Boolean, Boolean, Boolean, Boolean)
- uid: v3.1.0.1:Xunit.Assert.Equal(System.Memory{System.Char},System.Memory{System.Char})
  commentId: M:Xunit.Assert.Equal(System.Memory{System.Char},System.Memory{System.Char})
  id: Equal(System.Memory{System.Char},System.Memory{System.Char})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Equal(Memory<char>, Memory<char>)
  nameWithType: Assert.Equal(Memory<char>, Memory<char>)
  fullName: Xunit.Assert.Equal(System.Memory<char>, System.Memory<char>)
  type: Method
  source:
    id: Equal
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 975
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that two strings are equivalent.
  example: []
  syntax:
    content: public static void Equal(Memory<char> expected, Memory<char> actual)
    parameters:
    - id: expected
      type: System.Memory{System.Char}
      description: The expected string value.
    - id: actual
      type: System.Memory{System.Char}
      description: The actual string value.
    content.vb: Public Shared Sub Equal(expected As Memory(Of Char), actual As Memory(Of Char))
  overload: v3.1.0.1:Xunit.Assert.Equal*
  exceptions:
  - type: Xunit.Sdk.EqualException
    commentId: T:Xunit.Sdk.EqualException
    description: Thrown when the strings are not equivalent.
  nameWithType.vb: Assert.Equal(Memory(Of Char), Memory(Of Char))
  fullName.vb: Xunit.Assert.Equal(System.Memory(Of Char), System.Memory(Of Char))
  name.vb: Equal(Memory(Of Char), Memory(Of Char))
- uid: v3.1.0.1:Xunit.Assert.Equal(System.Memory{System.Char},System.ReadOnlyMemory{System.Char})
  commentId: M:Xunit.Assert.Equal(System.Memory{System.Char},System.ReadOnlyMemory{System.Char})
  id: Equal(System.Memory{System.Char},System.ReadOnlyMemory{System.Char})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Equal(Memory<char>, ReadOnlyMemory<char>)
  nameWithType: Assert.Equal(Memory<char>, ReadOnlyMemory<char>)
  fullName: Xunit.Assert.Equal(System.Memory<char>, System.ReadOnlyMemory<char>)
  type: Method
  source:
    id: Equal
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 986
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that two strings are equivalent.
  example: []
  syntax:
    content: public static void Equal(Memory<char> expected, ReadOnlyMemory<char> actual)
    parameters:
    - id: expected
      type: System.Memory{System.Char}
      description: The expected string value.
    - id: actual
      type: System.ReadOnlyMemory{System.Char}
      description: The actual string value.
    content.vb: Public Shared Sub Equal(expected As Memory(Of Char), actual As ReadOnlyMemory(Of Char))
  overload: v3.1.0.1:Xunit.Assert.Equal*
  exceptions:
  - type: Xunit.Sdk.EqualException
    commentId: T:Xunit.Sdk.EqualException
    description: Thrown when the strings are not equivalent.
  nameWithType.vb: Assert.Equal(Memory(Of Char), ReadOnlyMemory(Of Char))
  fullName.vb: Xunit.Assert.Equal(System.Memory(Of Char), System.ReadOnlyMemory(Of Char))
  name.vb: Equal(Memory(Of Char), ReadOnlyMemory(Of Char))
- uid: v3.1.0.1:Xunit.Assert.Equal(System.ReadOnlyMemory{System.Char},System.Memory{System.Char})
  commentId: M:Xunit.Assert.Equal(System.ReadOnlyMemory{System.Char},System.Memory{System.Char})
  id: Equal(System.ReadOnlyMemory{System.Char},System.Memory{System.Char})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Equal(ReadOnlyMemory<char>, Memory<char>)
  nameWithType: Assert.Equal(ReadOnlyMemory<char>, Memory<char>)
  fullName: Xunit.Assert.Equal(System.ReadOnlyMemory<char>, System.Memory<char>)
  type: Method
  source:
    id: Equal
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 997
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that two strings are equivalent.
  example: []
  syntax:
    content: public static void Equal(ReadOnlyMemory<char> expected, Memory<char> actual)
    parameters:
    - id: expected
      type: System.ReadOnlyMemory{System.Char}
      description: The expected string value.
    - id: actual
      type: System.Memory{System.Char}
      description: The actual string value.
    content.vb: Public Shared Sub Equal(expected As ReadOnlyMemory(Of Char), actual As Memory(Of Char))
  overload: v3.1.0.1:Xunit.Assert.Equal*
  exceptions:
  - type: Xunit.Sdk.EqualException
    commentId: T:Xunit.Sdk.EqualException
    description: Thrown when the strings are not equivalent.
  nameWithType.vb: Assert.Equal(ReadOnlyMemory(Of Char), Memory(Of Char))
  fullName.vb: Xunit.Assert.Equal(System.ReadOnlyMemory(Of Char), System.Memory(Of Char))
  name.vb: Equal(ReadOnlyMemory(Of Char), Memory(Of Char))
- uid: v3.1.0.1:Xunit.Assert.Equal(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char})
  commentId: M:Xunit.Assert.Equal(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char})
  id: Equal(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Equal(ReadOnlyMemory<char>, ReadOnlyMemory<char>)
  nameWithType: Assert.Equal(ReadOnlyMemory<char>, ReadOnlyMemory<char>)
  fullName: Xunit.Assert.Equal(System.ReadOnlyMemory<char>, System.ReadOnlyMemory<char>)
  type: Method
  source:
    id: Equal
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 1008
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that two strings are equivalent.
  example: []
  syntax:
    content: public static void Equal(ReadOnlyMemory<char> expected, ReadOnlyMemory<char> actual)
    parameters:
    - id: expected
      type: System.ReadOnlyMemory{System.Char}
      description: The expected string value.
    - id: actual
      type: System.ReadOnlyMemory{System.Char}
      description: The actual string value.
    content.vb: Public Shared Sub Equal(expected As ReadOnlyMemory(Of Char), actual As ReadOnlyMemory(Of Char))
  overload: v3.1.0.1:Xunit.Assert.Equal*
  exceptions:
  - type: Xunit.Sdk.EqualException
    commentId: T:Xunit.Sdk.EqualException
    description: Thrown when the strings are not equivalent.
  nameWithType.vb: Assert.Equal(ReadOnlyMemory(Of Char), ReadOnlyMemory(Of Char))
  fullName.vb: Xunit.Assert.Equal(System.ReadOnlyMemory(Of Char), System.ReadOnlyMemory(Of Char))
  name.vb: Equal(ReadOnlyMemory(Of Char), ReadOnlyMemory(Of Char))
- uid: v3.1.0.1:Xunit.Assert.Equal(System.Memory{System.Char},System.Memory{System.Char},System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  commentId: M:Xunit.Assert.Equal(System.Memory{System.Char},System.Memory{System.Char},System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  id: Equal(System.Memory{System.Char},System.Memory{System.Char},System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Equal(Memory<char>, Memory<char>, bool, bool, bool, bool)
  nameWithType: Assert.Equal(Memory<char>, Memory<char>, bool, bool, bool, bool)
  fullName: Xunit.Assert.Equal(System.Memory<char>, System.Memory<char>, bool, bool, bool, bool)
  type: Method
  source:
    id: Equal
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 1023
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that two strings are equivalent.
  example: []
  syntax:
    content: public static void Equal(Memory<char> expected, Memory<char> actual, bool ignoreCase = false, bool ignoreLineEndingDifferences = false, bool ignoreWhiteSpaceDifferences = false, bool ignoreAllWhiteSpace = false)
    parameters:
    - id: expected
      type: System.Memory{System.Char}
      description: The expected string value.
    - id: actual
      type: System.Memory{System.Char}
      description: The actual string value.
    - id: ignoreCase
      type: System.Boolean
      description: If set to <code>true</code>, ignores cases differences. The invariant culture is used.
    - id: ignoreLineEndingDifferences
      type: System.Boolean
      description: If set to <code>true</code>, treats \r\n, \r, and \n as equivalent.
    - id: ignoreWhiteSpaceDifferences
      type: System.Boolean
      description: If set to <code>true</code>, treats horizontal white-space (i.e. spaces, tabs, and others; see remarks) in any non-zero quantity as equivalent.
    - id: ignoreAllWhiteSpace
      type: System.Boolean
      description: If set to <code>true</code>, treats horizontal white-space (i.e. spaces, tabs, and others; see remarks), including zero quantities, as equivalent.
    content.vb: Public Shared Sub Equal(expected As Memory(Of Char), actual As Memory(Of Char), ignoreCase As Boolean = False, ignoreLineEndingDifferences As Boolean = False, ignoreWhiteSpaceDifferences As Boolean = False, ignoreAllWhiteSpace As Boolean = False)
  overload: v3.1.0.1:Xunit.Assert.Equal*
  exceptions:
  - type: Xunit.Sdk.EqualException
    commentId: T:Xunit.Sdk.EqualException
    description: Thrown when the strings are not equivalent.
  nameWithType.vb: Assert.Equal(Memory(Of Char), Memory(Of Char), Boolean, Boolean, Boolean, Boolean)
  fullName.vb: Xunit.Assert.Equal(System.Memory(Of Char), System.Memory(Of Char), Boolean, Boolean, Boolean, Boolean)
  name.vb: Equal(Memory(Of Char), Memory(Of Char), Boolean, Boolean, Boolean, Boolean)
- uid: v3.1.0.1:Xunit.Assert.Equal(System.Memory{System.Char},System.ReadOnlyMemory{System.Char},System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  commentId: M:Xunit.Assert.Equal(System.Memory{System.Char},System.ReadOnlyMemory{System.Char},System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  id: Equal(System.Memory{System.Char},System.ReadOnlyMemory{System.Char},System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Equal(Memory<char>, ReadOnlyMemory<char>, bool, bool, bool, bool)
  nameWithType: Assert.Equal(Memory<char>, ReadOnlyMemory<char>, bool, bool, bool, bool)
  fullName: Xunit.Assert.Equal(System.Memory<char>, System.ReadOnlyMemory<char>, bool, bool, bool, bool)
  type: Method
  source:
    id: Equal
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 1042
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that two strings are equivalent.
  example: []
  syntax:
    content: public static void Equal(Memory<char> expected, ReadOnlyMemory<char> actual, bool ignoreCase = false, bool ignoreLineEndingDifferences = false, bool ignoreWhiteSpaceDifferences = false, bool ignoreAllWhiteSpace = false)
    parameters:
    - id: expected
      type: System.Memory{System.Char}
      description: The expected string value.
    - id: actual
      type: System.ReadOnlyMemory{System.Char}
      description: The actual string value.
    - id: ignoreCase
      type: System.Boolean
      description: If set to <code>true</code>, ignores cases differences. The invariant culture is used.
    - id: ignoreLineEndingDifferences
      type: System.Boolean
      description: If set to <code>true</code>, treats \r\n, \r, and \n as equivalent.
    - id: ignoreWhiteSpaceDifferences
      type: System.Boolean
      description: If set to <code>true</code>, treats horizontal white-space (i.e. spaces, tabs, and others; see remarks) in any non-zero quantity as equivalent.
    - id: ignoreAllWhiteSpace
      type: System.Boolean
      description: If set to <code>true</code>, treats horizontal white-space (i.e. spaces, tabs, and others; see remarks), including zero quantities, as equivalent.
    content.vb: Public Shared Sub Equal(expected As Memory(Of Char), actual As ReadOnlyMemory(Of Char), ignoreCase As Boolean = False, ignoreLineEndingDifferences As Boolean = False, ignoreWhiteSpaceDifferences As Boolean = False, ignoreAllWhiteSpace As Boolean = False)
  overload: v3.1.0.1:Xunit.Assert.Equal*
  exceptions:
  - type: Xunit.Sdk.EqualException
    commentId: T:Xunit.Sdk.EqualException
    description: Thrown when the strings are not equivalent.
  nameWithType.vb: Assert.Equal(Memory(Of Char), ReadOnlyMemory(Of Char), Boolean, Boolean, Boolean, Boolean)
  fullName.vb: Xunit.Assert.Equal(System.Memory(Of Char), System.ReadOnlyMemory(Of Char), Boolean, Boolean, Boolean, Boolean)
  name.vb: Equal(Memory(Of Char), ReadOnlyMemory(Of Char), Boolean, Boolean, Boolean, Boolean)
- uid: v3.1.0.1:Xunit.Assert.Equal(System.ReadOnlyMemory{System.Char},System.Memory{System.Char},System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  commentId: M:Xunit.Assert.Equal(System.ReadOnlyMemory{System.Char},System.Memory{System.Char},System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  id: Equal(System.ReadOnlyMemory{System.Char},System.Memory{System.Char},System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Equal(ReadOnlyMemory<char>, Memory<char>, bool, bool, bool, bool)
  nameWithType: Assert.Equal(ReadOnlyMemory<char>, Memory<char>, bool, bool, bool, bool)
  fullName: Xunit.Assert.Equal(System.ReadOnlyMemory<char>, System.Memory<char>, bool, bool, bool, bool)
  type: Method
  source:
    id: Equal
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 1061
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that two strings are equivalent.
  example: []
  syntax:
    content: public static void Equal(ReadOnlyMemory<char> expected, Memory<char> actual, bool ignoreCase = false, bool ignoreLineEndingDifferences = false, bool ignoreWhiteSpaceDifferences = false, bool ignoreAllWhiteSpace = false)
    parameters:
    - id: expected
      type: System.ReadOnlyMemory{System.Char}
      description: The expected string value.
    - id: actual
      type: System.Memory{System.Char}
      description: The actual string value.
    - id: ignoreCase
      type: System.Boolean
      description: If set to <code>true</code>, ignores cases differences. The invariant culture is used.
    - id: ignoreLineEndingDifferences
      type: System.Boolean
      description: If set to <code>true</code>, treats \r\n, \r, and \n as equivalent.
    - id: ignoreWhiteSpaceDifferences
      type: System.Boolean
      description: If set to <code>true</code>, treats horizontal white-space (i.e. spaces, tabs, and others; see remarks) in any non-zero quantity as equivalent.
    - id: ignoreAllWhiteSpace
      type: System.Boolean
      description: If set to <code>true</code>, treats horizontal white-space (i.e. spaces, tabs, and others; see remarks), including zero quantities, as equivalent.
    content.vb: Public Shared Sub Equal(expected As ReadOnlyMemory(Of Char), actual As Memory(Of Char), ignoreCase As Boolean = False, ignoreLineEndingDifferences As Boolean = False, ignoreWhiteSpaceDifferences As Boolean = False, ignoreAllWhiteSpace As Boolean = False)
  overload: v3.1.0.1:Xunit.Assert.Equal*
  exceptions:
  - type: Xunit.Sdk.EqualException
    commentId: T:Xunit.Sdk.EqualException
    description: Thrown when the strings are not equivalent.
  nameWithType.vb: Assert.Equal(ReadOnlyMemory(Of Char), Memory(Of Char), Boolean, Boolean, Boolean, Boolean)
  fullName.vb: Xunit.Assert.Equal(System.ReadOnlyMemory(Of Char), System.Memory(Of Char), Boolean, Boolean, Boolean, Boolean)
  name.vb: Equal(ReadOnlyMemory(Of Char), Memory(Of Char), Boolean, Boolean, Boolean, Boolean)
- uid: v3.1.0.1:Xunit.Assert.Equal(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char},System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  commentId: M:Xunit.Assert.Equal(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char},System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  id: Equal(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char},System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Equal(ReadOnlyMemory<char>, ReadOnlyMemory<char>, bool, bool, bool, bool)
  nameWithType: Assert.Equal(ReadOnlyMemory<char>, ReadOnlyMemory<char>, bool, bool, bool, bool)
  fullName: Xunit.Assert.Equal(System.ReadOnlyMemory<char>, System.ReadOnlyMemory<char>, bool, bool, bool, bool)
  type: Method
  source:
    id: Equal
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 1080
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that two strings are equivalent.
  example: []
  syntax:
    content: public static void Equal(ReadOnlyMemory<char> expected, ReadOnlyMemory<char> actual, bool ignoreCase = false, bool ignoreLineEndingDifferences = false, bool ignoreWhiteSpaceDifferences = false, bool ignoreAllWhiteSpace = false)
    parameters:
    - id: expected
      type: System.ReadOnlyMemory{System.Char}
      description: The expected string value.
    - id: actual
      type: System.ReadOnlyMemory{System.Char}
      description: The actual string value.
    - id: ignoreCase
      type: System.Boolean
      description: If set to <code>true</code>, ignores cases differences. The invariant culture is used.
    - id: ignoreLineEndingDifferences
      type: System.Boolean
      description: If set to <code>true</code>, treats \r\n, \r, and \n as equivalent.
    - id: ignoreWhiteSpaceDifferences
      type: System.Boolean
      description: If set to <code>true</code>, treats horizontal white-space (i.e. spaces, tabs, and others; see remarks) in any non-zero quantity as equivalent.
    - id: ignoreAllWhiteSpace
      type: System.Boolean
      description: If set to <code>true</code>, treats horizontal white-space (i.e. spaces, tabs, and others; see remarks), including zero quantities, as equivalent.
    content.vb: Public Shared Sub Equal(expected As ReadOnlyMemory(Of Char), actual As ReadOnlyMemory(Of Char), ignoreCase As Boolean = False, ignoreLineEndingDifferences As Boolean = False, ignoreWhiteSpaceDifferences As Boolean = False, ignoreAllWhiteSpace As Boolean = False)
  overload: v3.1.0.1:Xunit.Assert.Equal*
  exceptions:
  - type: Xunit.Sdk.EqualException
    commentId: T:Xunit.Sdk.EqualException
    description: Thrown when the strings are not equivalent.
  nameWithType.vb: Assert.Equal(ReadOnlyMemory(Of Char), ReadOnlyMemory(Of Char), Boolean, Boolean, Boolean, Boolean)
  fullName.vb: Xunit.Assert.Equal(System.ReadOnlyMemory(Of Char), System.ReadOnlyMemory(Of Char), Boolean, Boolean, Boolean, Boolean)
  name.vb: Equal(ReadOnlyMemory(Of Char), ReadOnlyMemory(Of Char), Boolean, Boolean, Boolean, Boolean)
- uid: v3.1.0.1:Xunit.Assert.Equal(System.Span{System.Char},System.Span{System.Char})
  commentId: M:Xunit.Assert.Equal(System.Span{System.Char},System.Span{System.Char})
  id: Equal(System.Span{System.Char},System.Span{System.Char})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Equal(Span<char>, Span<char>)
  nameWithType: Assert.Equal(Span<char>, Span<char>)
  fullName: Xunit.Assert.Equal(System.Span<char>, System.Span<char>)
  type: Method
  source:
    id: Equal
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 1106
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that two strings are equivalent.
  example: []
  syntax:
    content: public static void Equal(Span<char> expected, Span<char> actual)
    parameters:
    - id: expected
      type: System.Span{System.Char}
      description: The expected string value.
    - id: actual
      type: System.Span{System.Char}
      description: The actual string value.
    content.vb: Public Shared Sub Equal(expected As Span(Of Char), actual As Span(Of Char))
  overload: v3.1.0.1:Xunit.Assert.Equal*
  exceptions:
  - type: Xunit.Sdk.EqualException
    commentId: T:Xunit.Sdk.EqualException
    description: Thrown when the strings are not equivalent.
  nameWithType.vb: Assert.Equal(Span(Of Char), Span(Of Char))
  fullName.vb: Xunit.Assert.Equal(System.Span(Of Char), System.Span(Of Char))
  name.vb: Equal(Span(Of Char), Span(Of Char))
- uid: v3.1.0.1:Xunit.Assert.Equal(System.Span{System.Char},System.ReadOnlySpan{System.Char})
  commentId: M:Xunit.Assert.Equal(System.Span{System.Char},System.ReadOnlySpan{System.Char})
  id: Equal(System.Span{System.Char},System.ReadOnlySpan{System.Char})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Equal(Span<char>, ReadOnlySpan<char>)
  nameWithType: Assert.Equal(Span<char>, ReadOnlySpan<char>)
  fullName: Xunit.Assert.Equal(System.Span<char>, System.ReadOnlySpan<char>)
  type: Method
  source:
    id: Equal
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 1117
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that two strings are equivalent.
  example: []
  syntax:
    content: public static void Equal(Span<char> expected, ReadOnlySpan<char> actual)
    parameters:
    - id: expected
      type: System.Span{System.Char}
      description: The expected string value.
    - id: actual
      type: System.ReadOnlySpan{System.Char}
      description: The actual string value.
    content.vb: Public Shared Sub Equal(expected As Span(Of Char), actual As ReadOnlySpan(Of Char))
  overload: v3.1.0.1:Xunit.Assert.Equal*
  exceptions:
  - type: Xunit.Sdk.EqualException
    commentId: T:Xunit.Sdk.EqualException
    description: Thrown when the strings are not equivalent.
  nameWithType.vb: Assert.Equal(Span(Of Char), ReadOnlySpan(Of Char))
  fullName.vb: Xunit.Assert.Equal(System.Span(Of Char), System.ReadOnlySpan(Of Char))
  name.vb: Equal(Span(Of Char), ReadOnlySpan(Of Char))
- uid: v3.1.0.1:Xunit.Assert.Equal(System.ReadOnlySpan{System.Char},System.Span{System.Char})
  commentId: M:Xunit.Assert.Equal(System.ReadOnlySpan{System.Char},System.Span{System.Char})
  id: Equal(System.ReadOnlySpan{System.Char},System.Span{System.Char})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Equal(ReadOnlySpan<char>, Span<char>)
  nameWithType: Assert.Equal(ReadOnlySpan<char>, Span<char>)
  fullName: Xunit.Assert.Equal(System.ReadOnlySpan<char>, System.Span<char>)
  type: Method
  source:
    id: Equal
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 1128
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that two strings are equivalent.
  example: []
  syntax:
    content: public static void Equal(ReadOnlySpan<char> expected, Span<char> actual)
    parameters:
    - id: expected
      type: System.ReadOnlySpan{System.Char}
      description: The expected string value.
    - id: actual
      type: System.Span{System.Char}
      description: The actual string value.
    content.vb: Public Shared Sub Equal(expected As ReadOnlySpan(Of Char), actual As Span(Of Char))
  overload: v3.1.0.1:Xunit.Assert.Equal*
  exceptions:
  - type: Xunit.Sdk.EqualException
    commentId: T:Xunit.Sdk.EqualException
    description: Thrown when the strings are not equivalent.
  nameWithType.vb: Assert.Equal(ReadOnlySpan(Of Char), Span(Of Char))
  fullName.vb: Xunit.Assert.Equal(System.ReadOnlySpan(Of Char), System.Span(Of Char))
  name.vb: Equal(ReadOnlySpan(Of Char), Span(Of Char))
- uid: v3.1.0.1:Xunit.Assert.Equal(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})
  commentId: M:Xunit.Assert.Equal(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})
  id: Equal(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Equal(ReadOnlySpan<char>, ReadOnlySpan<char>)
  nameWithType: Assert.Equal(ReadOnlySpan<char>, ReadOnlySpan<char>)
  fullName: Xunit.Assert.Equal(System.ReadOnlySpan<char>, System.ReadOnlySpan<char>)
  type: Method
  source:
    id: Equal
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 1139
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that two strings are equivalent.
  example: []
  syntax:
    content: public static void Equal(ReadOnlySpan<char> expected, ReadOnlySpan<char> actual)
    parameters:
    - id: expected
      type: System.ReadOnlySpan{System.Char}
      description: The expected string value.
    - id: actual
      type: System.ReadOnlySpan{System.Char}
      description: The actual string value.
    content.vb: Public Shared Sub Equal(expected As ReadOnlySpan(Of Char), actual As ReadOnlySpan(Of Char))
  overload: v3.1.0.1:Xunit.Assert.Equal*
  exceptions:
  - type: Xunit.Sdk.EqualException
    commentId: T:Xunit.Sdk.EqualException
    description: Thrown when the strings are not equivalent.
  nameWithType.vb: Assert.Equal(ReadOnlySpan(Of Char), ReadOnlySpan(Of Char))
  fullName.vb: Xunit.Assert.Equal(System.ReadOnlySpan(Of Char), System.ReadOnlySpan(Of Char))
  name.vb: Equal(ReadOnlySpan(Of Char), ReadOnlySpan(Of Char))
- uid: v3.1.0.1:Xunit.Assert.Equal(System.Span{System.Char},System.Span{System.Char},System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  commentId: M:Xunit.Assert.Equal(System.Span{System.Char},System.Span{System.Char},System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  id: Equal(System.Span{System.Char},System.Span{System.Char},System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Equal(Span<char>, Span<char>, bool, bool, bool, bool)
  nameWithType: Assert.Equal(Span<char>, Span<char>, bool, bool, bool, bool)
  fullName: Xunit.Assert.Equal(System.Span<char>, System.Span<char>, bool, bool, bool, bool)
  type: Method
  source:
    id: Equal
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 1181
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that two strings are equivalent.
  remarks: >-
    The <code class="paramref">ignoreWhiteSpaceDifferences</code> and <code class="paramref">ignoreAllWhiteSpace</code> flags consider

    the following characters to be white-space:

    <a href="https://unicode-explorer.com/c/0009">Tab</a> (\t),

    <a href="https://unicode-explorer.com/c/0020">Space</a> (\u0020),

    <a href="https://unicode-explorer.com/c/00A0">No-Break Space</a> (\u00A0),

    <a href="https://unicode-explorer.com/c/1680">Ogham Space Mark</a> (\u1680),

    <a href="https://unicode-explorer.com/c/180E">Mongolian Vowel Separator</a> (\u180E),

    <a href="https://unicode-explorer.com/c/2000">En Quad</a> (\u2000),

    <a href="https://unicode-explorer.com/c/2001">Em Quad</a> (\u2001),

    <a href="https://unicode-explorer.com/c/2002">En Space</a> (\u2002),

    <a href="https://unicode-explorer.com/c/2003">Em Space</a> (\u2003),

    <a href="https://unicode-explorer.com/c/2004">Three-Per-Em Space</a> (\u2004),

    <a href="https://unicode-explorer.com/c/2005">Four-Per-Em Space</a> (\u2004),

    <a href="https://unicode-explorer.com/c/2006">Six-Per-Em Space</a> (\u2006),

    <a href="https://unicode-explorer.com/c/2007">Figure Space</a> (\u2007),

    <a href="https://unicode-explorer.com/c/2008">Punctuation Space</a> (\u2008),

    <a href="https://unicode-explorer.com/c/2009">Thin Space</a> (\u2009),

    <a href="https://unicode-explorer.com/c/200A">Hair Space</a> (\u200A),

    <a href="https://unicode-explorer.com/c/200B">Zero Width Space</a> (\u200B),

    <a href="https://unicode-explorer.com/c/202F">Narrow No-Break Space</a> (\u202F),

    <a href="https://unicode-explorer.com/c/205F">Medium Mathematical Space</a> (\u205F),

    <a href="https://unicode-explorer.com/c/3000">Ideographic Space</a> (\u3000),

    and <a href="https://unicode-explorer.com/c/FEFF">Zero Width No-Break Space</a> (\uFEFF).

    In particular, it does not include carriage return (\r) or line feed (\n), which are covered by

    <code class="paramref">ignoreLineEndingDifferences</code>.
  example: []
  syntax:
    content: public static void Equal(Span<char> expected, Span<char> actual, bool ignoreCase = false, bool ignoreLineEndingDifferences = false, bool ignoreWhiteSpaceDifferences = false, bool ignoreAllWhiteSpace = false)
    parameters:
    - id: expected
      type: System.Span{System.Char}
      description: The expected string value.
    - id: actual
      type: System.Span{System.Char}
      description: The actual string value.
    - id: ignoreCase
      type: System.Boolean
      description: If set to <code>true</code>, ignores cases differences. The invariant culture is used.
    - id: ignoreLineEndingDifferences
      type: System.Boolean
      description: If set to <code>true</code>, treats \r\n, \r, and \n as equivalent.
    - id: ignoreWhiteSpaceDifferences
      type: System.Boolean
      description: If set to <code>true</code>, treats spaces and tabs (in any non-zero quantity) as equivalent.
    - id: ignoreAllWhiteSpace
      type: System.Boolean
      description: If set to <code>true</code>, ignores all white space differences during comparison.
    content.vb: Public Shared Sub Equal(expected As Span(Of Char), actual As Span(Of Char), ignoreCase As Boolean = False, ignoreLineEndingDifferences As Boolean = False, ignoreWhiteSpaceDifferences As Boolean = False, ignoreAllWhiteSpace As Boolean = False)
  overload: v3.1.0.1:Xunit.Assert.Equal*
  exceptions:
  - type: Xunit.Sdk.EqualException
    commentId: T:Xunit.Sdk.EqualException
    description: Thrown when the strings are not equivalent.
  nameWithType.vb: Assert.Equal(Span(Of Char), Span(Of Char), Boolean, Boolean, Boolean, Boolean)
  fullName.vb: Xunit.Assert.Equal(System.Span(Of Char), System.Span(Of Char), Boolean, Boolean, Boolean, Boolean)
  name.vb: Equal(Span(Of Char), Span(Of Char), Boolean, Boolean, Boolean, Boolean)
- uid: v3.1.0.1:Xunit.Assert.Equal(System.Span{System.Char},System.ReadOnlySpan{System.Char},System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  commentId: M:Xunit.Assert.Equal(System.Span{System.Char},System.ReadOnlySpan{System.Char},System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  id: Equal(System.Span{System.Char},System.ReadOnlySpan{System.Char},System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Equal(Span<char>, ReadOnlySpan<char>, bool, bool, bool, bool)
  nameWithType: Assert.Equal(Span<char>, ReadOnlySpan<char>, bool, bool, bool, bool)
  fullName: Xunit.Assert.Equal(System.Span<char>, System.ReadOnlySpan<char>, bool, bool, bool, bool)
  type: Method
  source:
    id: Equal
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 1227
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that two strings are equivalent.
  remarks: >-
    The <code class="paramref">ignoreWhiteSpaceDifferences</code> and <code class="paramref">ignoreAllWhiteSpace</code> flags consider

    the following characters to be white-space:

    <a href="https://unicode-explorer.com/c/0009">Tab</a> (\t),

    <a href="https://unicode-explorer.com/c/0020">Space</a> (\u0020),

    <a href="https://unicode-explorer.com/c/00A0">No-Break Space</a> (\u00A0),

    <a href="https://unicode-explorer.com/c/1680">Ogham Space Mark</a> (\u1680),

    <a href="https://unicode-explorer.com/c/180E">Mongolian Vowel Separator</a> (\u180E),

    <a href="https://unicode-explorer.com/c/2000">En Quad</a> (\u2000),

    <a href="https://unicode-explorer.com/c/2001">Em Quad</a> (\u2001),

    <a href="https://unicode-explorer.com/c/2002">En Space</a> (\u2002),

    <a href="https://unicode-explorer.com/c/2003">Em Space</a> (\u2003),

    <a href="https://unicode-explorer.com/c/2004">Three-Per-Em Space</a> (\u2004),

    <a href="https://unicode-explorer.com/c/2005">Four-Per-Em Space</a> (\u2004),

    <a href="https://unicode-explorer.com/c/2006">Six-Per-Em Space</a> (\u2006),

    <a href="https://unicode-explorer.com/c/2007">Figure Space</a> (\u2007),

    <a href="https://unicode-explorer.com/c/2008">Punctuation Space</a> (\u2008),

    <a href="https://unicode-explorer.com/c/2009">Thin Space</a> (\u2009),

    <a href="https://unicode-explorer.com/c/200A">Hair Space</a> (\u200A),

    <a href="https://unicode-explorer.com/c/200B">Zero Width Space</a> (\u200B),

    <a href="https://unicode-explorer.com/c/202F">Narrow No-Break Space</a> (\u202F),

    <a href="https://unicode-explorer.com/c/205F">Medium Mathematical Space</a> (\u205F),

    <a href="https://unicode-explorer.com/c/3000">Ideographic Space</a> (\u3000),

    and <a href="https://unicode-explorer.com/c/FEFF">Zero Width No-Break Space</a> (\uFEFF).

    In particular, it does not include carriage return (\r) or line feed (\n), which are covered by

    <code class="paramref">ignoreLineEndingDifferences</code>.
  example: []
  syntax:
    content: public static void Equal(Span<char> expected, ReadOnlySpan<char> actual, bool ignoreCase = false, bool ignoreLineEndingDifferences = false, bool ignoreWhiteSpaceDifferences = false, bool ignoreAllWhiteSpace = false)
    parameters:
    - id: expected
      type: System.Span{System.Char}
      description: The expected string value.
    - id: actual
      type: System.ReadOnlySpan{System.Char}
      description: The actual string value.
    - id: ignoreCase
      type: System.Boolean
      description: If set to <code>true</code>, ignores cases differences. The invariant culture is used.
    - id: ignoreLineEndingDifferences
      type: System.Boolean
      description: If set to <code>true</code>, treats \r\n, \r, and \n as equivalent.
    - id: ignoreWhiteSpaceDifferences
      type: System.Boolean
      description: If set to <code>true</code>, treats spaces and tabs (in any non-zero quantity) as equivalent.
    - id: ignoreAllWhiteSpace
      type: System.Boolean
      description: If set to <code>true</code>, ignores all white space differences during comparison.
    content.vb: Public Shared Sub Equal(expected As Span(Of Char), actual As ReadOnlySpan(Of Char), ignoreCase As Boolean = False, ignoreLineEndingDifferences As Boolean = False, ignoreWhiteSpaceDifferences As Boolean = False, ignoreAllWhiteSpace As Boolean = False)
  overload: v3.1.0.1:Xunit.Assert.Equal*
  exceptions:
  - type: Xunit.Sdk.EqualException
    commentId: T:Xunit.Sdk.EqualException
    description: Thrown when the strings are not equivalent.
  nameWithType.vb: Assert.Equal(Span(Of Char), ReadOnlySpan(Of Char), Boolean, Boolean, Boolean, Boolean)
  fullName.vb: Xunit.Assert.Equal(System.Span(Of Char), System.ReadOnlySpan(Of Char), Boolean, Boolean, Boolean, Boolean)
  name.vb: Equal(Span(Of Char), ReadOnlySpan(Of Char), Boolean, Boolean, Boolean, Boolean)
- uid: v3.1.0.1:Xunit.Assert.Equal(System.ReadOnlySpan{System.Char},System.Span{System.Char},System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  commentId: M:Xunit.Assert.Equal(System.ReadOnlySpan{System.Char},System.Span{System.Char},System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  id: Equal(System.ReadOnlySpan{System.Char},System.Span{System.Char},System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Equal(ReadOnlySpan<char>, Span<char>, bool, bool, bool, bool)
  nameWithType: Assert.Equal(ReadOnlySpan<char>, Span<char>, bool, bool, bool, bool)
  fullName: Xunit.Assert.Equal(System.ReadOnlySpan<char>, System.Span<char>, bool, bool, bool, bool)
  type: Method
  source:
    id: Equal
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 1273
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that two strings are equivalent.
  remarks: >-
    The <code class="paramref">ignoreWhiteSpaceDifferences</code> and <code class="paramref">ignoreAllWhiteSpace</code> flags consider

    the following characters to be white-space:

    <a href="https://unicode-explorer.com/c/0009">Tab</a> (\t),

    <a href="https://unicode-explorer.com/c/0020">Space</a> (\u0020),

    <a href="https://unicode-explorer.com/c/00A0">No-Break Space</a> (\u00A0),

    <a href="https://unicode-explorer.com/c/1680">Ogham Space Mark</a> (\u1680),

    <a href="https://unicode-explorer.com/c/180E">Mongolian Vowel Separator</a> (\u180E),

    <a href="https://unicode-explorer.com/c/2000">En Quad</a> (\u2000),

    <a href="https://unicode-explorer.com/c/2001">Em Quad</a> (\u2001),

    <a href="https://unicode-explorer.com/c/2002">En Space</a> (\u2002),

    <a href="https://unicode-explorer.com/c/2003">Em Space</a> (\u2003),

    <a href="https://unicode-explorer.com/c/2004">Three-Per-Em Space</a> (\u2004),

    <a href="https://unicode-explorer.com/c/2005">Four-Per-Em Space</a> (\u2004),

    <a href="https://unicode-explorer.com/c/2006">Six-Per-Em Space</a> (\u2006),

    <a href="https://unicode-explorer.com/c/2007">Figure Space</a> (\u2007),

    <a href="https://unicode-explorer.com/c/2008">Punctuation Space</a> (\u2008),

    <a href="https://unicode-explorer.com/c/2009">Thin Space</a> (\u2009),

    <a href="https://unicode-explorer.com/c/200A">Hair Space</a> (\u200A),

    <a href="https://unicode-explorer.com/c/200B">Zero Width Space</a> (\u200B),

    <a href="https://unicode-explorer.com/c/202F">Narrow No-Break Space</a> (\u202F),

    <a href="https://unicode-explorer.com/c/205F">Medium Mathematical Space</a> (\u205F),

    <a href="https://unicode-explorer.com/c/3000">Ideographic Space</a> (\u3000),

    and <a href="https://unicode-explorer.com/c/FEFF">Zero Width No-Break Space</a> (\uFEFF).

    In particular, it does not include carriage return (\r) or line feed (\n), which are covered by

    <code class="paramref">ignoreLineEndingDifferences</code>.
  example: []
  syntax:
    content: public static void Equal(ReadOnlySpan<char> expected, Span<char> actual, bool ignoreCase = false, bool ignoreLineEndingDifferences = false, bool ignoreWhiteSpaceDifferences = false, bool ignoreAllWhiteSpace = false)
    parameters:
    - id: expected
      type: System.ReadOnlySpan{System.Char}
      description: The expected string value.
    - id: actual
      type: System.Span{System.Char}
      description: The actual string value.
    - id: ignoreCase
      type: System.Boolean
      description: If set to <code>true</code>, ignores cases differences. The invariant culture is used.
    - id: ignoreLineEndingDifferences
      type: System.Boolean
      description: If set to <code>true</code>, treats \r\n, \r, and \n as equivalent.
    - id: ignoreWhiteSpaceDifferences
      type: System.Boolean
      description: If set to <code>true</code>, treats spaces and tabs (in any non-zero quantity) as equivalent.
    - id: ignoreAllWhiteSpace
      type: System.Boolean
      description: If set to <code>true</code>, removes all whitespaces and tabs before comparing.
    content.vb: Public Shared Sub Equal(expected As ReadOnlySpan(Of Char), actual As Span(Of Char), ignoreCase As Boolean = False, ignoreLineEndingDifferences As Boolean = False, ignoreWhiteSpaceDifferences As Boolean = False, ignoreAllWhiteSpace As Boolean = False)
  overload: v3.1.0.1:Xunit.Assert.Equal*
  exceptions:
  - type: Xunit.Sdk.EqualException
    commentId: T:Xunit.Sdk.EqualException
    description: Thrown when the strings are not equivalent.
  nameWithType.vb: Assert.Equal(ReadOnlySpan(Of Char), Span(Of Char), Boolean, Boolean, Boolean, Boolean)
  fullName.vb: Xunit.Assert.Equal(System.ReadOnlySpan(Of Char), System.Span(Of Char), Boolean, Boolean, Boolean, Boolean)
  name.vb: Equal(ReadOnlySpan(Of Char), Span(Of Char), Boolean, Boolean, Boolean, Boolean)
- uid: v3.1.0.1:Xunit.Assert.Equal(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  commentId: M:Xunit.Assert.Equal(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  id: Equal(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Equal(string?, string?, bool, bool, bool, bool)
  nameWithType: Assert.Equal(string?, string?, bool, bool, bool, bool)
  fullName: Xunit.Assert.Equal(string?, string?, bool, bool, bool, bool)
  type: Method
  source:
    id: Equal
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 1320
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that two strings are equivalent.
  remarks: >-
    The <code class="paramref">ignoreWhiteSpaceDifferences</code> and <code class="paramref">ignoreAllWhiteSpace</code> flags consider

    the following characters to be white-space:

    <a href="https://unicode-explorer.com/c/0009">Tab</a> (\t),

    <a href="https://unicode-explorer.com/c/0020">Space</a> (\u0020),

    <a href="https://unicode-explorer.com/c/00A0">No-Break Space</a> (\u00A0),

    <a href="https://unicode-explorer.com/c/1680">Ogham Space Mark</a> (\u1680),

    <a href="https://unicode-explorer.com/c/180E">Mongolian Vowel Separator</a> (\u180E),

    <a href="https://unicode-explorer.com/c/2000">En Quad</a> (\u2000),

    <a href="https://unicode-explorer.com/c/2001">Em Quad</a> (\u2001),

    <a href="https://unicode-explorer.com/c/2002">En Space</a> (\u2002),

    <a href="https://unicode-explorer.com/c/2003">Em Space</a> (\u2003),

    <a href="https://unicode-explorer.com/c/2004">Three-Per-Em Space</a> (\u2004),

    <a href="https://unicode-explorer.com/c/2005">Four-Per-Em Space</a> (\u2004),

    <a href="https://unicode-explorer.com/c/2006">Six-Per-Em Space</a> (\u2006),

    <a href="https://unicode-explorer.com/c/2007">Figure Space</a> (\u2007),

    <a href="https://unicode-explorer.com/c/2008">Punctuation Space</a> (\u2008),

    <a href="https://unicode-explorer.com/c/2009">Thin Space</a> (\u2009),

    <a href="https://unicode-explorer.com/c/200A">Hair Space</a> (\u200A),

    <a href="https://unicode-explorer.com/c/200B">Zero Width Space</a> (\u200B),

    <a href="https://unicode-explorer.com/c/202F">Narrow No-Break Space</a> (\u202F),

    <a href="https://unicode-explorer.com/c/205F">Medium Mathematical Space</a> (\u205F),

    <a href="https://unicode-explorer.com/c/3000">Ideographic Space</a> (\u3000),

    and <a href="https://unicode-explorer.com/c/FEFF">Zero Width No-Break Space</a> (\uFEFF).

    In particular, it does not include carriage return (\r) or line feed (\n), which are covered by

    <code class="paramref">ignoreLineEndingDifferences</code>.
  example: []
  syntax:
    content: public static void Equal(string? expected, string? actual, bool ignoreCase = false, bool ignoreLineEndingDifferences = false, bool ignoreWhiteSpaceDifferences = false, bool ignoreAllWhiteSpace = false)
    parameters:
    - id: expected
      type: System.String
      description: The expected string value.
    - id: actual
      type: System.String
      description: The actual string value.
    - id: ignoreCase
      type: System.Boolean
      description: If set to <code>true</code>, ignores cases differences. The invariant culture is used.
    - id: ignoreLineEndingDifferences
      type: System.Boolean
      description: If set to <code>true</code>, treats \r\n, \r, and \n as equivalent.
    - id: ignoreWhiteSpaceDifferences
      type: System.Boolean
      description: If set to <code>true</code>, treats horizontal white-space (i.e. spaces, tabs, and others; see remarks) in any non-zero quantity as equivalent.
    - id: ignoreAllWhiteSpace
      type: System.Boolean
      description: If set to <code>true</code>, treats horizontal white-space (i.e. spaces, tabs, and others; see remarks), including zero quantities, as equivalent.
    content.vb: Public Shared Sub Equal(expected As String, actual As String, ignoreCase As Boolean = False, ignoreLineEndingDifferences As Boolean = False, ignoreWhiteSpaceDifferences As Boolean = False, ignoreAllWhiteSpace As Boolean = False)
  overload: v3.1.0.1:Xunit.Assert.Equal*
  exceptions:
  - type: Xunit.Sdk.EqualException
    commentId: T:Xunit.Sdk.EqualException
    description: Thrown when the strings are not equivalent.
  nameWithType.vb: Assert.Equal(String, String, Boolean, Boolean, Boolean, Boolean)
  fullName.vb: Xunit.Assert.Equal(String, String, Boolean, Boolean, Boolean, Boolean)
  name.vb: Equal(String, String, Boolean, Boolean, Boolean, Boolean)
- uid: v3.1.0.1:Xunit.Assert.Matches(System.String,System.String)
  commentId: M:Xunit.Assert.Matches(System.String,System.String)
  id: Matches(System.String,System.String)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Matches(string, string?)
  nameWithType: Assert.Matches(string, string?)
  fullName: Xunit.Assert.Matches(string, string?)
  type: Method
  source:
    id: Matches
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 1352
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a string matches a regular expression.
  example: []
  syntax:
    content: public static void Matches(string expectedRegexPattern, string? actualString)
    parameters:
    - id: expectedRegexPattern
      type: System.String
      description: The regex pattern expected to match
    - id: actualString
      type: System.String
      description: The string to be inspected
    content.vb: Public Shared Sub Matches(expectedRegexPattern As String, actualString As String)
  overload: v3.1.0.1:Xunit.Assert.Matches*
  exceptions:
  - type: Xunit.Sdk.MatchesException
    commentId: T:Xunit.Sdk.MatchesException
    description: Thrown when the string does not match the regex pattern
  nameWithType.vb: Assert.Matches(String, String)
  fullName.vb: Xunit.Assert.Matches(String, String)
  name.vb: Matches(String, String)
- uid: v3.1.0.1:Xunit.Assert.Matches(System.Text.RegularExpressions.Regex,System.String)
  commentId: M:Xunit.Assert.Matches(System.Text.RegularExpressions.Regex,System.String)
  id: Matches(System.Text.RegularExpressions.Regex,System.String)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: Matches(Regex, string?)
  nameWithType: Assert.Matches(Regex, string?)
  fullName: Xunit.Assert.Matches(System.Text.RegularExpressions.Regex, string?)
  type: Method
  source:
    id: Matches
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 1373
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a string matches a regular expression.
  example: []
  syntax:
    content: public static void Matches(Regex expectedRegex, string? actualString)
    parameters:
    - id: expectedRegex
      type: System.Text.RegularExpressions.Regex
      description: The regex expected to match
    - id: actualString
      type: System.String
      description: The string to be inspected
    content.vb: Public Shared Sub Matches(expectedRegex As Regex, actualString As String)
  overload: v3.1.0.1:Xunit.Assert.Matches*
  exceptions:
  - type: Xunit.Sdk.MatchesException
    commentId: T:Xunit.Sdk.MatchesException
    description: Thrown when the string does not match the regex
  nameWithType.vb: Assert.Matches(Regex, String)
  fullName.vb: Xunit.Assert.Matches(System.Text.RegularExpressions.Regex, String)
  name.vb: Matches(Regex, String)
- uid: v3.1.0.1:Xunit.Assert.StartsWith(System.String,System.String)
  commentId: M:Xunit.Assert.StartsWith(System.String,System.String)
  id: StartsWith(System.String,System.String)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: StartsWith(string?, string?)
  nameWithType: Assert.StartsWith(string?, string?)
  fullName: Xunit.Assert.StartsWith(string?, string?)
  type: Method
  source:
    id: StartsWith
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 1393
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a string starts with a given string, using the current culture.
  example: []
  syntax:
    content: public static void StartsWith(string? expectedStartString, string? actualString)
    parameters:
    - id: expectedStartString
      type: System.String
      description: The string expected to be at the start of the string
    - id: actualString
      type: System.String
      description: The string to be inspected
    content.vb: Public Shared Sub StartsWith(expectedStartString As String, actualString As String)
  overload: v3.1.0.1:Xunit.Assert.StartsWith*
  exceptions:
  - type: Xunit.Sdk.ContainsException
    commentId: T:Xunit.Sdk.ContainsException
    description: Thrown when the string does not start with the expected sub-string
  nameWithType.vb: Assert.StartsWith(String, String)
  fullName.vb: Xunit.Assert.StartsWith(String, String)
  name.vb: StartsWith(String, String)
- uid: v3.1.0.1:Xunit.Assert.StartsWith(System.String,System.String,System.StringComparison)
  commentId: M:Xunit.Assert.StartsWith(System.String,System.String,System.StringComparison)
  id: StartsWith(System.String,System.String,System.StringComparison)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: StartsWith(string?, string?, StringComparison)
  nameWithType: Assert.StartsWith(string?, string?, StringComparison)
  fullName: Xunit.Assert.StartsWith(string?, string?, System.StringComparison)
  type: Method
  source:
    id: StartsWith
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 1410
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a string starts with a given sub-string, using the given comparison type.
  example: []
  syntax:
    content: public static void StartsWith(string? expectedStartString, string? actualString, StringComparison comparisonType)
    parameters:
    - id: expectedStartString
      type: System.String
      description: The sub-string expected to be at the start of the string
    - id: actualString
      type: System.String
      description: The string to be inspected
    - id: comparisonType
      type: System.StringComparison
      description: The type of string comparison to perform
    content.vb: Public Shared Sub StartsWith(expectedStartString As String, actualString As String, comparisonType As StringComparison)
  overload: v3.1.0.1:Xunit.Assert.StartsWith*
  exceptions:
  - type: Xunit.Sdk.ContainsException
    commentId: T:Xunit.Sdk.ContainsException
    description: Thrown when the string does not start with the expected sub-string
  nameWithType.vb: Assert.StartsWith(String, String, StringComparison)
  fullName.vb: Xunit.Assert.StartsWith(String, String, System.StringComparison)
  name.vb: StartsWith(String, String, StringComparison)
- uid: v3.1.0.1:Xunit.Assert.StartsWith(System.Memory{System.Char},System.Memory{System.Char})
  commentId: M:Xunit.Assert.StartsWith(System.Memory{System.Char},System.Memory{System.Char})
  id: StartsWith(System.Memory{System.Char},System.Memory{System.Char})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: StartsWith(Memory<char>, Memory<char>)
  nameWithType: Assert.StartsWith(Memory<char>, Memory<char>)
  fullName: Xunit.Assert.StartsWith(System.Memory<char>, System.Memory<char>)
  type: Method
  source:
    id: StartsWith
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 1432
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a string starts with a given sub-string, using the current culture.
  example: []
  syntax:
    content: public static void StartsWith(Memory<char> expectedStartString, Memory<char> actualString)
    parameters:
    - id: expectedStartString
      type: System.Memory{System.Char}
      description: The sub-string expected to be at the start of the string
    - id: actualString
      type: System.Memory{System.Char}
      description: The string to be inspected
    content.vb: Public Shared Sub StartsWith(expectedStartString As Memory(Of Char), actualString As Memory(Of Char))
  overload: v3.1.0.1:Xunit.Assert.StartsWith*
  exceptions:
  - type: Xunit.Sdk.StartsWithException
    commentId: T:Xunit.Sdk.StartsWithException
    description: Thrown when the string does not start with the expected sub-string
  nameWithType.vb: Assert.StartsWith(Memory(Of Char), Memory(Of Char))
  fullName.vb: Xunit.Assert.StartsWith(System.Memory(Of Char), System.Memory(Of Char))
  name.vb: StartsWith(Memory(Of Char), Memory(Of Char))
- uid: v3.1.0.1:Xunit.Assert.StartsWith(System.Memory{System.Char},System.ReadOnlyMemory{System.Char})
  commentId: M:Xunit.Assert.StartsWith(System.Memory{System.Char},System.ReadOnlyMemory{System.Char})
  id: StartsWith(System.Memory{System.Char},System.ReadOnlyMemory{System.Char})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: StartsWith(Memory<char>, ReadOnlyMemory<char>)
  nameWithType: Assert.StartsWith(Memory<char>, ReadOnlyMemory<char>)
  fullName: Xunit.Assert.StartsWith(System.Memory<char>, System.ReadOnlyMemory<char>)
  type: Method
  source:
    id: StartsWith
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 1443
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a string starts with a given sub-string, using the current culture.
  example: []
  syntax:
    content: public static void StartsWith(Memory<char> expectedStartString, ReadOnlyMemory<char> actualString)
    parameters:
    - id: expectedStartString
      type: System.Memory{System.Char}
      description: The sub-string expected to be at the start of the string
    - id: actualString
      type: System.ReadOnlyMemory{System.Char}
      description: The string to be inspected
    content.vb: Public Shared Sub StartsWith(expectedStartString As Memory(Of Char), actualString As ReadOnlyMemory(Of Char))
  overload: v3.1.0.1:Xunit.Assert.StartsWith*
  exceptions:
  - type: Xunit.Sdk.StartsWithException
    commentId: T:Xunit.Sdk.StartsWithException
    description: Thrown when the string does not start with the expected sub-string
  nameWithType.vb: Assert.StartsWith(Memory(Of Char), ReadOnlyMemory(Of Char))
  fullName.vb: Xunit.Assert.StartsWith(System.Memory(Of Char), System.ReadOnlyMemory(Of Char))
  name.vb: StartsWith(Memory(Of Char), ReadOnlyMemory(Of Char))
- uid: v3.1.0.1:Xunit.Assert.StartsWith(System.ReadOnlyMemory{System.Char},System.Memory{System.Char})
  commentId: M:Xunit.Assert.StartsWith(System.ReadOnlyMemory{System.Char},System.Memory{System.Char})
  id: StartsWith(System.ReadOnlyMemory{System.Char},System.Memory{System.Char})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: StartsWith(ReadOnlyMemory<char>, Memory<char>)
  nameWithType: Assert.StartsWith(ReadOnlyMemory<char>, Memory<char>)
  fullName: Xunit.Assert.StartsWith(System.ReadOnlyMemory<char>, System.Memory<char>)
  type: Method
  source:
    id: StartsWith
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 1454
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a string starts with a given sub-string, using the current culture.
  example: []
  syntax:
    content: public static void StartsWith(ReadOnlyMemory<char> expectedStartString, Memory<char> actualString)
    parameters:
    - id: expectedStartString
      type: System.ReadOnlyMemory{System.Char}
      description: The sub-string expected to be at the start of the string
    - id: actualString
      type: System.Memory{System.Char}
      description: The string to be inspected
    content.vb: Public Shared Sub StartsWith(expectedStartString As ReadOnlyMemory(Of Char), actualString As Memory(Of Char))
  overload: v3.1.0.1:Xunit.Assert.StartsWith*
  exceptions:
  - type: Xunit.Sdk.StartsWithException
    commentId: T:Xunit.Sdk.StartsWithException
    description: Thrown when the string does not start with the expected sub-string
  nameWithType.vb: Assert.StartsWith(ReadOnlyMemory(Of Char), Memory(Of Char))
  fullName.vb: Xunit.Assert.StartsWith(System.ReadOnlyMemory(Of Char), System.Memory(Of Char))
  name.vb: StartsWith(ReadOnlyMemory(Of Char), Memory(Of Char))
- uid: v3.1.0.1:Xunit.Assert.StartsWith(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char})
  commentId: M:Xunit.Assert.StartsWith(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char})
  id: StartsWith(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: StartsWith(ReadOnlyMemory<char>, ReadOnlyMemory<char>)
  nameWithType: Assert.StartsWith(ReadOnlyMemory<char>, ReadOnlyMemory<char>)
  fullName: Xunit.Assert.StartsWith(System.ReadOnlyMemory<char>, System.ReadOnlyMemory<char>)
  type: Method
  source:
    id: StartsWith
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 1465
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a string starts with a given sub-string, using the default StringComparison.CurrentCulture comparison type.
  example: []
  syntax:
    content: public static void StartsWith(ReadOnlyMemory<char> expectedStartString, ReadOnlyMemory<char> actualString)
    parameters:
    - id: expectedStartString
      type: System.ReadOnlyMemory{System.Char}
      description: The sub-string expected to be at the start of the string
    - id: actualString
      type: System.ReadOnlyMemory{System.Char}
      description: The string to be inspected
    content.vb: Public Shared Sub StartsWith(expectedStartString As ReadOnlyMemory(Of Char), actualString As ReadOnlyMemory(Of Char))
  overload: v3.1.0.1:Xunit.Assert.StartsWith*
  exceptions:
  - type: Xunit.Sdk.StartsWithException
    commentId: T:Xunit.Sdk.StartsWithException
    description: Thrown when the string does not start with the expected sub-string
  nameWithType.vb: Assert.StartsWith(ReadOnlyMemory(Of Char), ReadOnlyMemory(Of Char))
  fullName.vb: Xunit.Assert.StartsWith(System.ReadOnlyMemory(Of Char), System.ReadOnlyMemory(Of Char))
  name.vb: StartsWith(ReadOnlyMemory(Of Char), ReadOnlyMemory(Of Char))
- uid: v3.1.0.1:Xunit.Assert.StartsWith(System.Memory{System.Char},System.Memory{System.Char},System.StringComparison)
  commentId: M:Xunit.Assert.StartsWith(System.Memory{System.Char},System.Memory{System.Char},System.StringComparison)
  id: StartsWith(System.Memory{System.Char},System.Memory{System.Char},System.StringComparison)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: StartsWith(Memory<char>, Memory<char>, StringComparison)
  nameWithType: Assert.StartsWith(Memory<char>, Memory<char>, StringComparison)
  fullName: Xunit.Assert.StartsWith(System.Memory<char>, System.Memory<char>, System.StringComparison)
  type: Method
  source:
    id: StartsWith
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 1477
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a string starts with a given sub-string, using the given comparison type.
  example: []
  syntax:
    content: public static void StartsWith(Memory<char> expectedStartString, Memory<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture)
    parameters:
    - id: expectedStartString
      type: System.Memory{System.Char}
      description: The sub-string expected to be at the start of the string
    - id: actualString
      type: System.Memory{System.Char}
      description: The string to be inspected
    - id: comparisonType
      type: System.StringComparison
      description: The type of string comparison to perform
    content.vb: Public Shared Sub StartsWith(expectedStartString As Memory(Of Char), actualString As Memory(Of Char), comparisonType As StringComparison = StringComparison.CurrentCulture)
  overload: v3.1.0.1:Xunit.Assert.StartsWith*
  exceptions:
  - type: Xunit.Sdk.StartsWithException
    commentId: T:Xunit.Sdk.StartsWithException
    description: Thrown when the string does not start with the expected sub-string
  nameWithType.vb: Assert.StartsWith(Memory(Of Char), Memory(Of Char), StringComparison)
  fullName.vb: Xunit.Assert.StartsWith(System.Memory(Of Char), System.Memory(Of Char), System.StringComparison)
  name.vb: StartsWith(Memory(Of Char), Memory(Of Char), StringComparison)
- uid: v3.1.0.1:Xunit.Assert.StartsWith(System.Memory{System.Char},System.ReadOnlyMemory{System.Char},System.StringComparison)
  commentId: M:Xunit.Assert.StartsWith(System.Memory{System.Char},System.ReadOnlyMemory{System.Char},System.StringComparison)
  id: StartsWith(System.Memory{System.Char},System.ReadOnlyMemory{System.Char},System.StringComparison)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: StartsWith(Memory<char>, ReadOnlyMemory<char>, StringComparison)
  nameWithType: Assert.StartsWith(Memory<char>, ReadOnlyMemory<char>, StringComparison)
  fullName: Xunit.Assert.StartsWith(System.Memory<char>, System.ReadOnlyMemory<char>, System.StringComparison)
  type: Method
  source:
    id: StartsWith
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 1490
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a string starts with a given sub-string, using the given comparison type.
  example: []
  syntax:
    content: public static void StartsWith(Memory<char> expectedStartString, ReadOnlyMemory<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture)
    parameters:
    - id: expectedStartString
      type: System.Memory{System.Char}
      description: The sub-string expected to be at the start of the string
    - id: actualString
      type: System.ReadOnlyMemory{System.Char}
      description: The string to be inspected
    - id: comparisonType
      type: System.StringComparison
      description: The type of string comparison to perform
    content.vb: Public Shared Sub StartsWith(expectedStartString As Memory(Of Char), actualString As ReadOnlyMemory(Of Char), comparisonType As StringComparison = StringComparison.CurrentCulture)
  overload: v3.1.0.1:Xunit.Assert.StartsWith*
  exceptions:
  - type: Xunit.Sdk.StartsWithException
    commentId: T:Xunit.Sdk.StartsWithException
    description: Thrown when the string does not start with the expected sub-string
  nameWithType.vb: Assert.StartsWith(Memory(Of Char), ReadOnlyMemory(Of Char), StringComparison)
  fullName.vb: Xunit.Assert.StartsWith(System.Memory(Of Char), System.ReadOnlyMemory(Of Char), System.StringComparison)
  name.vb: StartsWith(Memory(Of Char), ReadOnlyMemory(Of Char), StringComparison)
- uid: v3.1.0.1:Xunit.Assert.StartsWith(System.ReadOnlyMemory{System.Char},System.Memory{System.Char},System.StringComparison)
  commentId: M:Xunit.Assert.StartsWith(System.ReadOnlyMemory{System.Char},System.Memory{System.Char},System.StringComparison)
  id: StartsWith(System.ReadOnlyMemory{System.Char},System.Memory{System.Char},System.StringComparison)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: StartsWith(ReadOnlyMemory<char>, Memory<char>, StringComparison)
  nameWithType: Assert.StartsWith(ReadOnlyMemory<char>, Memory<char>, StringComparison)
  fullName: Xunit.Assert.StartsWith(System.ReadOnlyMemory<char>, System.Memory<char>, System.StringComparison)
  type: Method
  source:
    id: StartsWith
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 1503
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a string starts with a given sub-string, using the given comparison type.
  example: []
  syntax:
    content: public static void StartsWith(ReadOnlyMemory<char> expectedStartString, Memory<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture)
    parameters:
    - id: expectedStartString
      type: System.ReadOnlyMemory{System.Char}
      description: The sub-string expected to be at the start of the string
    - id: actualString
      type: System.Memory{System.Char}
      description: The string to be inspected
    - id: comparisonType
      type: System.StringComparison
      description: The type of string comparison to perform
    content.vb: Public Shared Sub StartsWith(expectedStartString As ReadOnlyMemory(Of Char), actualString As Memory(Of Char), comparisonType As StringComparison = StringComparison.CurrentCulture)
  overload: v3.1.0.1:Xunit.Assert.StartsWith*
  exceptions:
  - type: Xunit.Sdk.StartsWithException
    commentId: T:Xunit.Sdk.StartsWithException
    description: Thrown when the string does not start with the expected sub-string
  nameWithType.vb: Assert.StartsWith(ReadOnlyMemory(Of Char), Memory(Of Char), StringComparison)
  fullName.vb: Xunit.Assert.StartsWith(System.ReadOnlyMemory(Of Char), System.Memory(Of Char), System.StringComparison)
  name.vb: StartsWith(ReadOnlyMemory(Of Char), Memory(Of Char), StringComparison)
- uid: v3.1.0.1:Xunit.Assert.StartsWith(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char},System.StringComparison)
  commentId: M:Xunit.Assert.StartsWith(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char},System.StringComparison)
  id: StartsWith(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char},System.StringComparison)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: StartsWith(ReadOnlyMemory<char>, ReadOnlyMemory<char>, StringComparison)
  nameWithType: Assert.StartsWith(ReadOnlyMemory<char>, ReadOnlyMemory<char>, StringComparison)
  fullName: Xunit.Assert.StartsWith(System.ReadOnlyMemory<char>, System.ReadOnlyMemory<char>, System.StringComparison)
  type: Method
  source:
    id: StartsWith
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 1516
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a string starts with a given sub-string, using the given comparison type.
  example: []
  syntax:
    content: public static void StartsWith(ReadOnlyMemory<char> expectedStartString, ReadOnlyMemory<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture)
    parameters:
    - id: expectedStartString
      type: System.ReadOnlyMemory{System.Char}
      description: The sub-string expected to be at the start of the string
    - id: actualString
      type: System.ReadOnlyMemory{System.Char}
      description: The string to be inspected
    - id: comparisonType
      type: System.StringComparison
      description: The type of string comparison to perform
    content.vb: Public Shared Sub StartsWith(expectedStartString As ReadOnlyMemory(Of Char), actualString As ReadOnlyMemory(Of Char), comparisonType As StringComparison = StringComparison.CurrentCulture)
  overload: v3.1.0.1:Xunit.Assert.StartsWith*
  exceptions:
  - type: Xunit.Sdk.StartsWithException
    commentId: T:Xunit.Sdk.StartsWithException
    description: Thrown when the string does not start with the expected sub-string
  nameWithType.vb: Assert.StartsWith(ReadOnlyMemory(Of Char), ReadOnlyMemory(Of Char), StringComparison)
  fullName.vb: Xunit.Assert.StartsWith(System.ReadOnlyMemory(Of Char), System.ReadOnlyMemory(Of Char), System.StringComparison)
  name.vb: StartsWith(ReadOnlyMemory(Of Char), ReadOnlyMemory(Of Char), StringComparison)
- uid: v3.1.0.1:Xunit.Assert.StartsWith(System.Span{System.Char},System.Span{System.Char})
  commentId: M:Xunit.Assert.StartsWith(System.Span{System.Char},System.Span{System.Char})
  id: StartsWith(System.Span{System.Char},System.Span{System.Char})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: StartsWith(Span<char>, Span<char>)
  nameWithType: Assert.StartsWith(Span<char>, Span<char>)
  fullName: Xunit.Assert.StartsWith(System.Span<char>, System.Span<char>)
  type: Method
  source:
    id: StartsWith
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 1532
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a string starts with a given sub-string, using the current culture.
  example: []
  syntax:
    content: public static void StartsWith(Span<char> expectedStartString, Span<char> actualString)
    parameters:
    - id: expectedStartString
      type: System.Span{System.Char}
      description: The sub-string expected to be at the start of the string
    - id: actualString
      type: System.Span{System.Char}
      description: The string to be inspected
    content.vb: Public Shared Sub StartsWith(expectedStartString As Span(Of Char), actualString As Span(Of Char))
  overload: v3.1.0.1:Xunit.Assert.StartsWith*
  exceptions:
  - type: Xunit.Sdk.StartsWithException
    commentId: T:Xunit.Sdk.StartsWithException
    description: Thrown when the string does not start with the expected sub-string
  nameWithType.vb: Assert.StartsWith(Span(Of Char), Span(Of Char))
  fullName.vb: Xunit.Assert.StartsWith(System.Span(Of Char), System.Span(Of Char))
  name.vb: StartsWith(Span(Of Char), Span(Of Char))
- uid: v3.1.0.1:Xunit.Assert.StartsWith(System.Span{System.Char},System.ReadOnlySpan{System.Char})
  commentId: M:Xunit.Assert.StartsWith(System.Span{System.Char},System.ReadOnlySpan{System.Char})
  id: StartsWith(System.Span{System.Char},System.ReadOnlySpan{System.Char})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: StartsWith(Span<char>, ReadOnlySpan<char>)
  nameWithType: Assert.StartsWith(Span<char>, ReadOnlySpan<char>)
  fullName: Xunit.Assert.StartsWith(System.Span<char>, System.ReadOnlySpan<char>)
  type: Method
  source:
    id: StartsWith
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 1543
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a string starts with a given sub-string, using the current culture.
  example: []
  syntax:
    content: public static void StartsWith(Span<char> expectedStartString, ReadOnlySpan<char> actualString)
    parameters:
    - id: expectedStartString
      type: System.Span{System.Char}
      description: The sub-string expected to be at the start of the string
    - id: actualString
      type: System.ReadOnlySpan{System.Char}
      description: The string to be inspected
    content.vb: Public Shared Sub StartsWith(expectedStartString As Span(Of Char), actualString As ReadOnlySpan(Of Char))
  overload: v3.1.0.1:Xunit.Assert.StartsWith*
  exceptions:
  - type: Xunit.Sdk.StartsWithException
    commentId: T:Xunit.Sdk.StartsWithException
    description: Thrown when the string does not start with the expected sub-string
  nameWithType.vb: Assert.StartsWith(Span(Of Char), ReadOnlySpan(Of Char))
  fullName.vb: Xunit.Assert.StartsWith(System.Span(Of Char), System.ReadOnlySpan(Of Char))
  name.vb: StartsWith(Span(Of Char), ReadOnlySpan(Of Char))
- uid: v3.1.0.1:Xunit.Assert.StartsWith(System.ReadOnlySpan{System.Char},System.Span{System.Char})
  commentId: M:Xunit.Assert.StartsWith(System.ReadOnlySpan{System.Char},System.Span{System.Char})
  id: StartsWith(System.ReadOnlySpan{System.Char},System.Span{System.Char})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: StartsWith(ReadOnlySpan<char>, Span<char>)
  nameWithType: Assert.StartsWith(ReadOnlySpan<char>, Span<char>)
  fullName: Xunit.Assert.StartsWith(System.ReadOnlySpan<char>, System.Span<char>)
  type: Method
  source:
    id: StartsWith
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 1554
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a string starts with a given sub-string, using the current culture.
  example: []
  syntax:
    content: public static void StartsWith(ReadOnlySpan<char> expectedStartString, Span<char> actualString)
    parameters:
    - id: expectedStartString
      type: System.ReadOnlySpan{System.Char}
      description: The sub-string expected to be at the start of the string
    - id: actualString
      type: System.Span{System.Char}
      description: The string to be inspected
    content.vb: Public Shared Sub StartsWith(expectedStartString As ReadOnlySpan(Of Char), actualString As Span(Of Char))
  overload: v3.1.0.1:Xunit.Assert.StartsWith*
  exceptions:
  - type: Xunit.Sdk.StartsWithException
    commentId: T:Xunit.Sdk.StartsWithException
    description: Thrown when the string does not start with the expected sub-string
  nameWithType.vb: Assert.StartsWith(ReadOnlySpan(Of Char), Span(Of Char))
  fullName.vb: Xunit.Assert.StartsWith(System.ReadOnlySpan(Of Char), System.Span(Of Char))
  name.vb: StartsWith(ReadOnlySpan(Of Char), Span(Of Char))
- uid: v3.1.0.1:Xunit.Assert.StartsWith(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})
  commentId: M:Xunit.Assert.StartsWith(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})
  id: StartsWith(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: StartsWith(ReadOnlySpan<char>, ReadOnlySpan<char>)
  nameWithType: Assert.StartsWith(ReadOnlySpan<char>, ReadOnlySpan<char>)
  fullName: Xunit.Assert.StartsWith(System.ReadOnlySpan<char>, System.ReadOnlySpan<char>)
  type: Method
  source:
    id: StartsWith
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 1565
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a string starts with a given sub-string, using the current culture.
  example: []
  syntax:
    content: public static void StartsWith(ReadOnlySpan<char> expectedStartString, ReadOnlySpan<char> actualString)
    parameters:
    - id: expectedStartString
      type: System.ReadOnlySpan{System.Char}
      description: The sub-string expected to be at the start of the string
    - id: actualString
      type: System.ReadOnlySpan{System.Char}
      description: The string to be inspected
    content.vb: Public Shared Sub StartsWith(expectedStartString As ReadOnlySpan(Of Char), actualString As ReadOnlySpan(Of Char))
  overload: v3.1.0.1:Xunit.Assert.StartsWith*
  exceptions:
  - type: Xunit.Sdk.StartsWithException
    commentId: T:Xunit.Sdk.StartsWithException
    description: Thrown when the string does not start with the expected sub-string
  nameWithType.vb: Assert.StartsWith(ReadOnlySpan(Of Char), ReadOnlySpan(Of Char))
  fullName.vb: Xunit.Assert.StartsWith(System.ReadOnlySpan(Of Char), System.ReadOnlySpan(Of Char))
  name.vb: StartsWith(ReadOnlySpan(Of Char), ReadOnlySpan(Of Char))
- uid: v3.1.0.1:Xunit.Assert.StartsWith(System.Span{System.Char},System.Span{System.Char},System.StringComparison)
  commentId: M:Xunit.Assert.StartsWith(System.Span{System.Char},System.Span{System.Char},System.StringComparison)
  id: StartsWith(System.Span{System.Char},System.Span{System.Char},System.StringComparison)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: StartsWith(Span<char>, Span<char>, StringComparison)
  nameWithType: Assert.StartsWith(Span<char>, Span<char>, StringComparison)
  fullName: Xunit.Assert.StartsWith(System.Span<char>, System.Span<char>, System.StringComparison)
  type: Method
  source:
    id: StartsWith
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 1577
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a string starts with a given sub-string, using the given comparison type.
  example: []
  syntax:
    content: public static void StartsWith(Span<char> expectedStartString, Span<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture)
    parameters:
    - id: expectedStartString
      type: System.Span{System.Char}
      description: The sub-string expected to be at the start of the string
    - id: actualString
      type: System.Span{System.Char}
      description: The string to be inspected
    - id: comparisonType
      type: System.StringComparison
      description: The type of string comparison to perform
    content.vb: Public Shared Sub StartsWith(expectedStartString As Span(Of Char), actualString As Span(Of Char), comparisonType As StringComparison = StringComparison.CurrentCulture)
  overload: v3.1.0.1:Xunit.Assert.StartsWith*
  exceptions:
  - type: Xunit.Sdk.StartsWithException
    commentId: T:Xunit.Sdk.StartsWithException
    description: Thrown when the string does not start with the expected sub-string
  nameWithType.vb: Assert.StartsWith(Span(Of Char), Span(Of Char), StringComparison)
  fullName.vb: Xunit.Assert.StartsWith(System.Span(Of Char), System.Span(Of Char), System.StringComparison)
  name.vb: StartsWith(Span(Of Char), Span(Of Char), StringComparison)
- uid: v3.1.0.1:Xunit.Assert.StartsWith(System.Span{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)
  commentId: M:Xunit.Assert.StartsWith(System.Span{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)
  id: StartsWith(System.Span{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: StartsWith(Span<char>, ReadOnlySpan<char>, StringComparison)
  nameWithType: Assert.StartsWith(Span<char>, ReadOnlySpan<char>, StringComparison)
  fullName: Xunit.Assert.StartsWith(System.Span<char>, System.ReadOnlySpan<char>, System.StringComparison)
  type: Method
  source:
    id: StartsWith
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 1590
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a string starts with a given sub-string, using the given comparison type.
  example: []
  syntax:
    content: public static void StartsWith(Span<char> expectedStartString, ReadOnlySpan<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture)
    parameters:
    - id: expectedStartString
      type: System.Span{System.Char}
      description: The sub-string expected to be at the start of the string
    - id: actualString
      type: System.ReadOnlySpan{System.Char}
      description: The string to be inspected
    - id: comparisonType
      type: System.StringComparison
      description: The type of string comparison to perform
    content.vb: Public Shared Sub StartsWith(expectedStartString As Span(Of Char), actualString As ReadOnlySpan(Of Char), comparisonType As StringComparison = StringComparison.CurrentCulture)
  overload: v3.1.0.1:Xunit.Assert.StartsWith*
  exceptions:
  - type: Xunit.Sdk.StartsWithException
    commentId: T:Xunit.Sdk.StartsWithException
    description: Thrown when the string does not start with the expected sub-string
  nameWithType.vb: Assert.StartsWith(Span(Of Char), ReadOnlySpan(Of Char), StringComparison)
  fullName.vb: Xunit.Assert.StartsWith(System.Span(Of Char), System.ReadOnlySpan(Of Char), System.StringComparison)
  name.vb: StartsWith(Span(Of Char), ReadOnlySpan(Of Char), StringComparison)
- uid: v3.1.0.1:Xunit.Assert.StartsWith(System.ReadOnlySpan{System.Char},System.Span{System.Char},System.StringComparison)
  commentId: M:Xunit.Assert.StartsWith(System.ReadOnlySpan{System.Char},System.Span{System.Char},System.StringComparison)
  id: StartsWith(System.ReadOnlySpan{System.Char},System.Span{System.Char},System.StringComparison)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: StartsWith(ReadOnlySpan<char>, Span<char>, StringComparison)
  nameWithType: Assert.StartsWith(ReadOnlySpan<char>, Span<char>, StringComparison)
  fullName: Xunit.Assert.StartsWith(System.ReadOnlySpan<char>, System.Span<char>, System.StringComparison)
  type: Method
  source:
    id: StartsWith
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 1603
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a string starts with a given sub-string, using the given comparison type.
  example: []
  syntax:
    content: public static void StartsWith(ReadOnlySpan<char> expectedStartString, Span<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture)
    parameters:
    - id: expectedStartString
      type: System.ReadOnlySpan{System.Char}
      description: The sub-string expected to be at the start of the string
    - id: actualString
      type: System.Span{System.Char}
      description: The string to be inspected
    - id: comparisonType
      type: System.StringComparison
      description: The type of string comparison to perform
    content.vb: Public Shared Sub StartsWith(expectedStartString As ReadOnlySpan(Of Char), actualString As Span(Of Char), comparisonType As StringComparison = StringComparison.CurrentCulture)
  overload: v3.1.0.1:Xunit.Assert.StartsWith*
  exceptions:
  - type: Xunit.Sdk.StartsWithException
    commentId: T:Xunit.Sdk.StartsWithException
    description: Thrown when the string does not start with the expected sub-string
  nameWithType.vb: Assert.StartsWith(ReadOnlySpan(Of Char), Span(Of Char), StringComparison)
  fullName.vb: Xunit.Assert.StartsWith(System.ReadOnlySpan(Of Char), System.Span(Of Char), System.StringComparison)
  name.vb: StartsWith(ReadOnlySpan(Of Char), Span(Of Char), StringComparison)
- uid: v3.1.0.1:Xunit.Assert.StartsWith(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)
  commentId: M:Xunit.Assert.StartsWith(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)
  id: StartsWith(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: StartsWith(ReadOnlySpan<char>, ReadOnlySpan<char>, StringComparison)
  nameWithType: Assert.StartsWith(ReadOnlySpan<char>, ReadOnlySpan<char>, StringComparison)
  fullName: Xunit.Assert.StartsWith(System.ReadOnlySpan<char>, System.ReadOnlySpan<char>, System.StringComparison)
  type: Method
  source:
    id: StartsWith
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 1616
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a string starts with a given sub-string, using the given comparison type.
  example: []
  syntax:
    content: public static void StartsWith(ReadOnlySpan<char> expectedStartString, ReadOnlySpan<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture)
    parameters:
    - id: expectedStartString
      type: System.ReadOnlySpan{System.Char}
      description: The sub-string expected to be at the start of the string
    - id: actualString
      type: System.ReadOnlySpan{System.Char}
      description: The string to be inspected
    - id: comparisonType
      type: System.StringComparison
      description: The type of string comparison to perform
    content.vb: Public Shared Sub StartsWith(expectedStartString As ReadOnlySpan(Of Char), actualString As ReadOnlySpan(Of Char), comparisonType As StringComparison = StringComparison.CurrentCulture)
  overload: v3.1.0.1:Xunit.Assert.StartsWith*
  exceptions:
  - type: Xunit.Sdk.StartsWithException
    commentId: T:Xunit.Sdk.StartsWithException
    description: Thrown when the string does not start with the expected sub-string
  nameWithType.vb: Assert.StartsWith(ReadOnlySpan(Of Char), ReadOnlySpan(Of Char), StringComparison)
  fullName.vb: Xunit.Assert.StartsWith(System.ReadOnlySpan(Of Char), System.ReadOnlySpan(Of Char), System.StringComparison)
  name.vb: StartsWith(ReadOnlySpan(Of Char), ReadOnlySpan(Of Char), StringComparison)
- uid: v3.1.0.1:Xunit.Assert.IsAssignableFrom``1(System.Object)
  commentId: M:Xunit.Assert.IsAssignableFrom``1(System.Object)
  id: IsAssignableFrom``1(System.Object)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: IsAssignableFrom<T>(object?)
  nameWithType: Assert.IsAssignableFrom<T>(object?)
  fullName: Xunit.Assert.IsAssignableFrom<T>(object?)
  type: Method
  source:
    id: IsAssignableFrom
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\TypeAsserts.cs
    startLine: 39
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that an object is of the given type or a derived type.
  example: []
  syntax:
    content: public static T IsAssignableFrom<T>(object? @object)
    parameters:
    - id: object
      type: System.Object
      description: The object to be evaluated
    typeParameters:
    - id: T
      description: The type the object should be
    return:
      type: '{T}'
      description: The object, casted to type T when successful
    content.vb: Public Shared Function IsAssignableFrom(Of T)([object] As Object) As T
  overload: v3.1.0.1:Xunit.Assert.IsAssignableFrom*
  exceptions:
  - type: Xunit.Sdk.IsAssignableFromException
    commentId: T:Xunit.Sdk.IsAssignableFromException
    description: Thrown when the object is not the given type
  nameWithType.vb: Assert.IsAssignableFrom(Of T)(Object)
  fullName.vb: Xunit.Assert.IsAssignableFrom(Of T)(Object)
  name.vb: IsAssignableFrom(Of T)(Object)
- uid: v3.1.0.1:Xunit.Assert.IsAssignableFrom(System.Type,System.Object)
  commentId: M:Xunit.Assert.IsAssignableFrom(System.Type,System.Object)
  id: IsAssignableFrom(System.Type,System.Object)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: IsAssignableFrom(Type, object?)
  nameWithType: Assert.IsAssignableFrom(Type, object?)
  fullName: Xunit.Assert.IsAssignableFrom(System.Type, object?)
  type: Method
  source:
    id: IsAssignableFrom
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\TypeAsserts.cs
    startLine: 56
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that an object is of the given type or a derived type.
  example: []
  syntax:
    content: public static void IsAssignableFrom(Type expectedType, object? @object)
    parameters:
    - id: expectedType
      type: System.Type
      description: The type the object should be
    - id: object
      type: System.Object
      description: The object to be evaluated
    content.vb: Public Shared Sub IsAssignableFrom(expectedType As Type, [object] As Object)
  overload: v3.1.0.1:Xunit.Assert.IsAssignableFrom*
  exceptions:
  - type: Xunit.Sdk.IsAssignableFromException
    commentId: T:Xunit.Sdk.IsAssignableFromException
    description: Thrown when the object is not the given type
  nameWithType.vb: Assert.IsAssignableFrom(Type, Object)
  fullName.vb: Xunit.Assert.IsAssignableFrom(System.Type, Object)
  name.vb: IsAssignableFrom(Type, Object)
- uid: v3.1.0.1:Xunit.Assert.IsNotAssignableFrom``1(System.Object)
  commentId: M:Xunit.Assert.IsNotAssignableFrom``1(System.Object)
  id: IsNotAssignableFrom``1(System.Object)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: IsNotAssignableFrom<T>(object?)
  nameWithType: Assert.IsNotAssignableFrom<T>(object?)
  fullName: Xunit.Assert.IsNotAssignableFrom<T>(object?)
  type: Method
  source:
    id: IsNotAssignableFrom
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\TypeAsserts.cs
    startLine: 78
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that an object is not of the given type or a derived type.
  example: []
  syntax:
    content: public static void IsNotAssignableFrom<T>(object? @object)
    parameters:
    - id: object
      type: System.Object
      description: The object to be evaluated
    typeParameters:
    - id: T
      description: The type the object should not be
    content.vb: Public Shared Sub IsNotAssignableFrom(Of T)([object] As Object)
  overload: v3.1.0.1:Xunit.Assert.IsNotAssignableFrom*
  exceptions:
  - type: Xunit.Sdk.IsNotAssignableFromException
    commentId: T:Xunit.Sdk.IsNotAssignableFromException
    description: Thrown when the object is of the given type
  nameWithType.vb: Assert.IsNotAssignableFrom(Of T)(Object)
  fullName.vb: Xunit.Assert.IsNotAssignableFrom(Of T)(Object)
  name.vb: IsNotAssignableFrom(Of T)(Object)
- uid: v3.1.0.1:Xunit.Assert.IsNotAssignableFrom(System.Type,System.Object)
  commentId: M:Xunit.Assert.IsNotAssignableFrom(System.Type,System.Object)
  id: IsNotAssignableFrom(System.Type,System.Object)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: IsNotAssignableFrom(Type, object?)
  nameWithType: Assert.IsNotAssignableFrom(Type, object?)
  fullName: Xunit.Assert.IsNotAssignableFrom(System.Type, object?)
  type: Method
  source:
    id: IsNotAssignableFrom
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\TypeAsserts.cs
    startLine: 90
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that an object is not of the given type or a derived type.
  example: []
  syntax:
    content: public static void IsNotAssignableFrom(Type expectedType, object? @object)
    parameters:
    - id: expectedType
      type: System.Type
      description: The type the object should not be
    - id: object
      type: System.Object
      description: The object to be evaluated
    content.vb: Public Shared Sub IsNotAssignableFrom(expectedType As Type, [object] As Object)
  overload: v3.1.0.1:Xunit.Assert.IsNotAssignableFrom*
  exceptions:
  - type: Xunit.Sdk.IsNotAssignableFromException
    commentId: T:Xunit.Sdk.IsNotAssignableFromException
    description: Thrown when the object is of the given type
  nameWithType.vb: Assert.IsNotAssignableFrom(Type, Object)
  fullName.vb: Xunit.Assert.IsNotAssignableFrom(System.Type, Object)
  name.vb: IsNotAssignableFrom(Type, Object)
- uid: v3.1.0.1:Xunit.Assert.IsNotType``1(System.Object)
  commentId: M:Xunit.Assert.IsNotType``1(System.Object)
  id: IsNotType``1(System.Object)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: IsNotType<T>(object?)
  nameWithType: Assert.IsNotType<T>(object?)
  fullName: Xunit.Assert.IsNotType<T>(object?)
  type: Method
  source:
    id: IsNotType
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\TypeAsserts.cs
    startLine: 111
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that an object is not exactly the given type.
  example: []
  syntax:
    content: public static void IsNotType<T>(object? @object)
    parameters:
    - id: object
      type: System.Object
      description: The object to be evaluated
    typeParameters:
    - id: T
      description: The type the object should not be
    content.vb: Public Shared Sub IsNotType(Of T)([object] As Object)
  overload: v3.1.0.1:Xunit.Assert.IsNotType*
  exceptions:
  - type: Xunit.Sdk.IsNotTypeException
    commentId: T:Xunit.Sdk.IsNotTypeException
    description: Thrown when the object is the given type
  nameWithType.vb: Assert.IsNotType(Of T)(Object)
  fullName.vb: Xunit.Assert.IsNotType(Of T)(Object)
  name.vb: IsNotType(Of T)(Object)
- uid: v3.1.0.1:Xunit.Assert.IsNotType``1(System.Object,System.Boolean)
  commentId: M:Xunit.Assert.IsNotType``1(System.Object,System.Boolean)
  id: IsNotType``1(System.Object,System.Boolean)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: IsNotType<T>(object?, bool)
  nameWithType: Assert.IsNotType<T>(object?, bool)
  fullName: Xunit.Assert.IsNotType<T>(object?, bool)
  type: Method
  source:
    id: IsNotType
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\TypeAsserts.cs
    startLine: 128
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that an object is not of the given type.
  example: []
  syntax:
    content: public static void IsNotType<T>(object? @object, bool exactMatch)
    parameters:
    - id: object
      type: System.Object
      description: The object to be evaluated
    - id: exactMatch
      type: System.Boolean
      description: >-
        Will only fail with an exact type match when <code>true</code> is
            passed; will fail with a compatible type match when <code>false</code> is passed.
    typeParameters:
    - id: T
      description: The type the object should not be
    content.vb: Public Shared Sub IsNotType(Of T)([object] As Object, exactMatch As Boolean)
  overload: v3.1.0.1:Xunit.Assert.IsNotType*
  exceptions:
  - type: Xunit.Sdk.IsNotTypeException
    commentId: T:Xunit.Sdk.IsNotTypeException
    description: Thrown when the object is the given type
  nameWithType.vb: Assert.IsNotType(Of T)(Object, Boolean)
  fullName.vb: Xunit.Assert.IsNotType(Of T)(Object, Boolean)
  name.vb: IsNotType(Of T)(Object, Boolean)
- uid: v3.1.0.1:Xunit.Assert.IsNotType(System.Type,System.Object)
  commentId: M:Xunit.Assert.IsNotType(System.Type,System.Object)
  id: IsNotType(System.Type,System.Object)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: IsNotType(Type, object?)
  nameWithType: Assert.IsNotType(Type, object?)
  fullName: Xunit.Assert.IsNotType(System.Type, object?)
  type: Method
  source:
    id: IsNotType
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\TypeAsserts.cs
    startLine: 145
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that an object is not exactly the given type.
  example: []
  syntax:
    content: public static void IsNotType(Type expectedType, object? @object)
    parameters:
    - id: expectedType
      type: System.Type
      description: The type the object should not be
    - id: object
      type: System.Object
      description: The object to be evaluated
    content.vb: Public Shared Sub IsNotType(expectedType As Type, [object] As Object)
  overload: v3.1.0.1:Xunit.Assert.IsNotType*
  exceptions:
  - type: Xunit.Sdk.IsNotTypeException
    commentId: T:Xunit.Sdk.IsNotTypeException
    description: Thrown when the object is the given type
  nameWithType.vb: Assert.IsNotType(Type, Object)
  fullName.vb: Xunit.Assert.IsNotType(System.Type, Object)
  name.vb: IsNotType(Type, Object)
- uid: v3.1.0.1:Xunit.Assert.IsNotType(System.Type,System.Object,System.Boolean)
  commentId: M:Xunit.Assert.IsNotType(System.Type,System.Object,System.Boolean)
  id: IsNotType(System.Type,System.Object,System.Boolean)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: IsNotType(Type, object?, bool)
  nameWithType: Assert.IsNotType(Type, object?, bool)
  fullName: Xunit.Assert.IsNotType(System.Type, object?, bool)
  type: Method
  source:
    id: IsNotType
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\TypeAsserts.cs
    startLine: 162
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that an object is not of the given type.
  example: []
  syntax:
    content: public static void IsNotType(Type expectedType, object? @object, bool exactMatch)
    parameters:
    - id: expectedType
      type: System.Type
      description: The type the object should not be
    - id: object
      type: System.Object
      description: The object to be evaluated
    - id: exactMatch
      type: System.Boolean
      description: >-
        Will only fail with an exact type match when <code>true</code> is
            passed; will fail with a compatible type match when <code>false</code> is passed.
    content.vb: Public Shared Sub IsNotType(expectedType As Type, [object] As Object, exactMatch As Boolean)
  overload: v3.1.0.1:Xunit.Assert.IsNotType*
  exceptions:
  - type: Xunit.Sdk.IsNotTypeException
    commentId: T:Xunit.Sdk.IsNotTypeException
    description: Thrown when the object is the given type
  nameWithType.vb: Assert.IsNotType(Type, Object, Boolean)
  fullName.vb: Xunit.Assert.IsNotType(System.Type, Object, Boolean)
  name.vb: IsNotType(Type, Object, Boolean)
- uid: v3.1.0.1:Xunit.Assert.IsType``1(System.Object)
  commentId: M:Xunit.Assert.IsType``1(System.Object)
  id: IsType``1(System.Object)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: IsType<T>(object?)
  nameWithType: Assert.IsType<T>(object?)
  fullName: Xunit.Assert.IsType<T>(object?)
  type: Method
  source:
    id: IsType
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\TypeAsserts.cs
    startLine: 195
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that an object is exactly the given type (and not a derived type).
  example: []
  syntax:
    content: public static T IsType<T>(object? @object)
    parameters:
    - id: object
      type: System.Object
      description: The object to be evaluated
    typeParameters:
    - id: T
      description: The type the object should be
    return:
      type: '{T}'
      description: The object, casted to type T when successful
    content.vb: Public Shared Function IsType(Of T)([object] As Object) As T
  overload: v3.1.0.1:Xunit.Assert.IsType*
  exceptions:
  - type: Xunit.Sdk.IsTypeException
    commentId: T:Xunit.Sdk.IsTypeException
    description: Thrown when the object is not the given type
  nameWithType.vb: Assert.IsType(Of T)(Object)
  fullName.vb: Xunit.Assert.IsType(Of T)(Object)
  name.vb: IsType(Of T)(Object)
- uid: v3.1.0.1:Xunit.Assert.IsType``1(System.Object,System.Boolean)
  commentId: M:Xunit.Assert.IsType``1(System.Object,System.Boolean)
  id: IsType``1(System.Object,System.Boolean)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: IsType<T>(object?, bool)
  nameWithType: Assert.IsType<T>(object?, bool)
  fullName: Xunit.Assert.IsType<T>(object?, bool)
  type: Method
  source:
    id: IsType
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\TypeAsserts.cs
    startLine: 218
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that an object of is the given type.
  example: []
  syntax:
    content: public static T IsType<T>(object? @object, bool exactMatch)
    parameters:
    - id: object
      type: System.Object
      description: The object to be evaluated
    - id: exactMatch
      type: System.Boolean
      description: >-
        Will only pass with an exact type match when <code>true</code> is
            passed; will pass with a compatible type match when <code>false</code> is passed.
    typeParameters:
    - id: T
      description: The type the object should be
    return:
      type: '{T}'
      description: The object, casted to type T when successful
    content.vb: Public Shared Function IsType(Of T)([object] As Object, exactMatch As Boolean) As T
  overload: v3.1.0.1:Xunit.Assert.IsType*
  exceptions:
  - type: Xunit.Sdk.IsTypeException
    commentId: T:Xunit.Sdk.IsTypeException
    description: Thrown when the object is not the given type
  nameWithType.vb: Assert.IsType(Of T)(Object, Boolean)
  fullName.vb: Xunit.Assert.IsType(Of T)(Object, Boolean)
  name.vb: IsType(Of T)(Object, Boolean)
- uid: v3.1.0.1:Xunit.Assert.IsType(System.Type,System.Object)
  commentId: M:Xunit.Assert.IsType(System.Type,System.Object)
  id: IsType(System.Type,System.Object)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: IsType(Type, object?)
  nameWithType: Assert.IsType(Type, object?)
  fullName: Xunit.Assert.IsType(System.Type, object?)
  type: Method
  source:
    id: IsType
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\TypeAsserts.cs
    startLine: 238
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that an object is exactly the given type (and not a derived type).
  example: []
  syntax:
    content: public static void IsType(Type expectedType, object? @object)
    parameters:
    - id: expectedType
      type: System.Type
      description: The type the object should be
    - id: object
      type: System.Object
      description: The object to be evaluated
    content.vb: Public Shared Sub IsType(expectedType As Type, [object] As Object)
  overload: v3.1.0.1:Xunit.Assert.IsType*
  exceptions:
  - type: Xunit.Sdk.IsTypeException
    commentId: T:Xunit.Sdk.IsTypeException
    description: Thrown when the object is not the given type
  nameWithType.vb: Assert.IsType(Type, Object)
  fullName.vb: Xunit.Assert.IsType(System.Type, Object)
  name.vb: IsType(Type, Object)
- uid: v3.1.0.1:Xunit.Assert.IsType(System.Type,System.Object,System.Boolean)
  commentId: M:Xunit.Assert.IsType(System.Type,System.Object,System.Boolean)
  id: IsType(System.Type,System.Object,System.Boolean)
  parent: v3.1.0.1:Xunit.Assert
  langs:
  - csharp
  - vb
  name: IsType(Type, object?, bool)
  nameWithType: Assert.IsType(Type, object?, bool)
  fullName: Xunit.Assert.IsType(System.Type, object?, bool)
  type: Method
  source:
    id: IsType
    path: C:\Dev\xunit\xunit\src\xunit.v3.assert\Asserts\TypeAsserts.cs
    startLine: 255
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that an object is of the given type.
  example: []
  syntax:
    content: public static void IsType(Type expectedType, object? @object, bool exactMatch)
    parameters:
    - id: expectedType
      type: System.Type
      description: The type the object should be
    - id: object
      type: System.Object
      description: The object to be evaluated
    - id: exactMatch
      type: System.Boolean
      description: >-
        Will only pass with an exact type match when <code>true</code> is
            passed; will pass with a compatible type match when <code>false</code> is passed.
    content.vb: Public Shared Sub IsType(expectedType As Type, [object] As Object, exactMatch As Boolean)
  overload: v3.1.0.1:Xunit.Assert.IsType*
  exceptions:
  - type: Xunit.Sdk.IsTypeException
    commentId: T:Xunit.Sdk.IsTypeException
    description: Thrown when the object is not the given type
  nameWithType.vb: Assert.IsType(Type, Object, Boolean)
  fullName.vb: Xunit.Assert.IsType(System.Type, Object, Boolean)
  name.vb: IsType(Type, Object, Boolean)
references:
- uid: v3.1.0.1:Xunit
  commentId: N:Xunit
  href: Xunit.html
  name: Xunit
  nameWithType: Xunit
  fullName: Xunit
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: v3.1.0.1:Xunit.Assert
  commentId: T:Xunit.Assert
  href: Xunit.Assert.html
  name: Assert
  nameWithType: Assert
  fullName: Xunit.Assert
- uid: v3.1.0.1:Xunit.Assert.#ctor*
  commentId: Overload:Xunit.Assert.#ctor
  href: Xunit.Assert.-ctor.html#Xunit_Assert__ctor
  name: Assert
  nameWithType: Assert.Assert
  fullName: Xunit.Assert.Assert
  nameWithType.vb: Assert.New
  fullName.vb: Xunit.Assert.New
  name.vb: New
- uid: v3.1.0.1:Xunit.Sdk.FalseException
  commentId: T:Xunit.Sdk.FalseException
  parent: v3.1.0.1:Xunit.Sdk
  href: Xunit.Sdk.FalseException.html
  name: FalseException
  nameWithType: FalseException
  fullName: Xunit.Sdk.FalseException
- uid: v3.1.0.1:Xunit.Assert.False*
  commentId: Overload:Xunit.Assert.False
  href: Xunit.Assert.False.html#Xunit_Assert_False_System_Boolean_
  name: "False"
  nameWithType: Assert.False
  fullName: Xunit.Assert.False
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: v3.1.0.1:Xunit.Sdk
  commentId: N:Xunit.Sdk
  href: Xunit.html
  name: Xunit.Sdk
  nameWithType: Xunit.Sdk
  fullName: Xunit.Sdk
  spec.csharp:
  - uid: v3.1.0.1:Xunit
    name: Xunit
    href: Xunit.html
  - name: .
  - uid: v3.1.0.1:Xunit.Sdk
    name: Sdk
    href: Xunit.Sdk.html
  spec.vb:
  - uid: v3.1.0.1:Xunit
    name: Xunit
    href: Xunit.html
  - name: .
  - uid: v3.1.0.1:Xunit.Sdk
    name: Sdk
    href: Xunit.Sdk.html
- uid: System.Nullable{System.Boolean}
  commentId: T:System.Nullable{System.Boolean}
  parent: System
  definition: System.Nullable`1
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool?
  nameWithType: bool?
  fullName: bool?
  nameWithType.vb: Boolean?
  fullName.vb: Boolean?
  name.vb: Boolean?
  spec.csharp:
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '?'
  spec.vb:
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '?'
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: v3.1.0.1:Xunit.Sdk.TrueException
  commentId: T:Xunit.Sdk.TrueException
  parent: v3.1.0.1:Xunit.Sdk
  href: Xunit.Sdk.TrueException.html
  name: TrueException
  nameWithType: TrueException
  fullName: Xunit.Sdk.TrueException
- uid: v3.1.0.1:Xunit.Assert.True*
  commentId: Overload:Xunit.Assert.True
  href: Xunit.Assert.True.html#Xunit_Assert_True_System_Boolean_
  name: "True"
  nameWithType: Assert.True
  fullName: Xunit.Assert.True
- uid: v3.1.0.1:Xunit.Sdk.AllException
  commentId: T:Xunit.Sdk.AllException
  parent: v3.1.0.1:Xunit.Sdk
  href: Xunit.Sdk.AllException.html
  name: AllException
  nameWithType: AllException
  fullName: Xunit.Sdk.AllException
- uid: v3.1.0.1:Xunit.Assert.All*
  commentId: Overload:Xunit.Assert.All
  href: Xunit.Assert.All.html#Xunit_Assert_All__1_System_Collections_Generic_IEnumerable___0__System_Action___0__
  name: All
  nameWithType: Assert.All
  fullName: Xunit.Assert.All
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Action{{T}}
  commentId: T:System.Action{``0}
  parent: System
  definition: System.Action`1
  href: https://learn.microsoft.com/dotnet/api/system.action-1
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.action-1
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Action{{T},System.Int32}
  commentId: T:System.Action{``0,System.Int32}
  parent: System
  definition: System.Action`2
  href: https://learn.microsoft.com/dotnet/api/system.action-2
  name: Action<T, int>
  nameWithType: Action<T, int>
  fullName: System.Action<T, int>
  nameWithType.vb: Action(Of T, Integer)
  fullName.vb: System.Action(Of T, Integer)
  name.vb: Action(Of T, Integer)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-2
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-2
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: System.Action`2
  commentId: T:System.Action`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.action-2
  name: Action<T1, T2>
  nameWithType: Action<T1, T2>
  fullName: System.Action<T1, T2>
  nameWithType.vb: Action(Of T1, T2)
  fullName.vb: System.Action(Of T1, T2)
  name.vb: Action(Of T1, T2)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-2
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-2
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: )
- uid: v3.1.0.1:Xunit.Assert.AllAsync*
  commentId: Overload:Xunit.Assert.AllAsync
  href: Xunit.Assert.AllAsync.html#Xunit_Assert_AllAsync__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Threading_Tasks_Task__
  name: AllAsync
  nameWithType: Assert.AllAsync
  fullName: Xunit.Assert.AllAsync
- uid: System.Func{{T},System.Threading.Tasks.Task}
  commentId: T:System.Func{``0,System.Threading.Tasks.Task}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<T, Task>
  nameWithType: Func<T, Task>
  fullName: System.Func<T, System.Threading.Tasks.Task>
  nameWithType.vb: Func(Of T, Task)
  fullName.vb: System.Func(Of T, System.Threading.Tasks.Task)
  name.vb: Func(Of T, Task)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task
  - name: )
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
- uid: System.Func{{T},System.Int32,System.Threading.Tasks.Task}
  commentId: T:System.Func{``0,System.Int32,System.Threading.Tasks.Task}
  parent: System
  definition: System.Func`3
  href: https://learn.microsoft.com/dotnet/api/system.func-3
  name: Func<T, int, Task>
  nameWithType: Func<T, int, Task>
  fullName: System.Func<T, int, System.Threading.Tasks.Task>
  nameWithType.vb: Func(Of T, Integer, Task)
  fullName.vb: System.Func(Of T, Integer, System.Threading.Tasks.Task)
  name.vb: Func(Of T, Integer, Task)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task
  - name: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task
  - name: )
- uid: System.Func`3
  commentId: T:System.Func`3
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-3
  name: Func<T1, T2, TResult>
  nameWithType: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  fullName.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: v3.1.0.1:Xunit.Assert.Collection*
  commentId: Overload:Xunit.Assert.Collection
  href: Xunit.Assert.Collection.html#Xunit_Assert_Collection__1_System_Collections_Generic_IEnumerable___0__System_Action___0____
  name: Collection
  nameWithType: Assert.Collection
  fullName: Xunit.Assert.Collection
- uid: System.Action{{T}}[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.action-1
  name: Action<T>[]
  nameWithType: Action<T>[]
  fullName: System.Action<T>[]
  nameWithType.vb: Action(Of T)()
  fullName.vb: System.Action(Of T)()
  name.vb: Action(Of T)()
  spec.csharp:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: <
  - name: T
  - name: '>'
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: )
- uid: v3.1.0.1:Xunit.Assert.CollectionAsync*
  commentId: Overload:Xunit.Assert.CollectionAsync
  href: Xunit.Assert.CollectionAsync.html#Xunit_Assert_CollectionAsync__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Threading_Tasks_Task____
  name: CollectionAsync
  nameWithType: Assert.CollectionAsync
  fullName: Xunit.Assert.CollectionAsync
- uid: System.Func{{T},System.Threading.Tasks.Task}[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<T, Task>[]
  nameWithType: Func<T, Task>[]
  fullName: System.Func<T, System.Threading.Tasks.Task>[]
  nameWithType.vb: Func(Of T, Task)()
  fullName.vb: System.Func(Of T, System.Threading.Tasks.Task)()
  name.vb: Func(Of T, Task)()
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task
  - name: '>'
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task
  - name: )
  - name: (
  - name: )
- uid: v3.1.0.1:Xunit.Sdk.ContainsException
  commentId: T:Xunit.Sdk.ContainsException
  parent: v3.1.0.1:Xunit.Sdk
  href: Xunit.Sdk.ContainsException.html
  name: ContainsException
  nameWithType: ContainsException
  fullName: Xunit.Sdk.ContainsException
- uid: v3.1.0.1:Xunit.Assert.Contains*
  commentId: Overload:Xunit.Assert.Contains
  href: Xunit.Assert.Contains.html#Xunit_Assert_Contains__1___0_System_Collections_Generic_IEnumerable___0__
  name: Contains
  nameWithType: Assert.Contains
  fullName: Xunit.Assert.Contains
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Collections.Generic.IEqualityComparer{{T}}
  commentId: T:System.Collections.Generic.IEqualityComparer{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEqualityComparer`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.iequalitycomparer-1
  name: IEqualityComparer<T>
  nameWithType: IEqualityComparer<T>
  fullName: System.Collections.Generic.IEqualityComparer<T>
  nameWithType.vb: IEqualityComparer(Of T)
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of T)
  name.vb: IEqualityComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.iequalitycomparer-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.iequalitycomparer-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic.IEqualityComparer`1
  commentId: T:System.Collections.Generic.IEqualityComparer`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.iequalitycomparer-1
  name: IEqualityComparer<T>
  nameWithType: IEqualityComparer<T>
  fullName: System.Collections.Generic.IEqualityComparer<T>
  nameWithType.vb: IEqualityComparer(Of T)
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of T)
  name.vb: IEqualityComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.iequalitycomparer-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.iequalitycomparer-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Predicate{{T}}
  commentId: T:System.Predicate{``0}
  parent: System
  definition: System.Predicate`1
  href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  name: Predicate<T>
  nameWithType: Predicate<T>
  fullName: System.Predicate<T>
  nameWithType.vb: Predicate(Of T)
  fullName.vb: System.Predicate(Of T)
  name.vb: Predicate(Of T)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Predicate`1
  commentId: T:System.Predicate`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  name: Predicate<T>
  nameWithType: Predicate<T>
  fullName: System.Predicate<T>
  nameWithType.vb: Predicate(Of T)
  fullName.vb: System.Predicate(Of T)
  name.vb: Predicate(Of T)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: v3.1.0.1:Xunit.Sdk.DistinctException
  commentId: T:Xunit.Sdk.DistinctException
  parent: v3.1.0.1:Xunit.Sdk
  href: Xunit.Sdk.DistinctException.html
  name: DistinctException
  nameWithType: DistinctException
  fullName: Xunit.Sdk.DistinctException
- uid: v3.1.0.1:Xunit.Assert.Distinct*
  commentId: Overload:Xunit.Assert.Distinct
  href: Xunit.Assert.Distinct.html#Xunit_Assert_Distinct__1_System_Collections_Generic_IEnumerable___0__
  name: Distinct
  nameWithType: Assert.Distinct
  fullName: Xunit.Assert.Distinct
- uid: v3.1.0.1:Xunit.Sdk.DoesNotContainException
  commentId: T:Xunit.Sdk.DoesNotContainException
  parent: v3.1.0.1:Xunit.Sdk
  href: Xunit.Sdk.DoesNotContainException.html
  name: DoesNotContainException
  nameWithType: DoesNotContainException
  fullName: Xunit.Sdk.DoesNotContainException
- uid: v3.1.0.1:Xunit.Assert.DoesNotContain*
  commentId: Overload:Xunit.Assert.DoesNotContain
  href: Xunit.Assert.DoesNotContain.html#Xunit_Assert_DoesNotContain__1___0_System_Collections_Generic_IEnumerable___0__
  name: DoesNotContain
  nameWithType: Assert.DoesNotContain
  fullName: Xunit.Assert.DoesNotContain
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.argumentnullexception
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: v3.1.0.1:Xunit.Sdk.EmptyException
  commentId: T:Xunit.Sdk.EmptyException
  parent: v3.1.0.1:Xunit.Sdk
  href: Xunit.Sdk.EmptyException.html
  name: EmptyException
  nameWithType: EmptyException
  fullName: Xunit.Sdk.EmptyException
- uid: v3.1.0.1:Xunit.Assert.Empty*
  commentId: Overload:Xunit.Assert.Empty
  href: Xunit.Assert.Empty.html#Xunit_Assert_Empty_System_Collections_IEnumerable_
  name: Empty
  nameWithType: Assert.Empty
  fullName: Xunit.Assert.Empty
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.ienumerable
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
- uid: v3.1.0.1:Xunit.Sdk.EqualException
  commentId: T:Xunit.Sdk.EqualException
  parent: v3.1.0.1:Xunit.Sdk
  href: Xunit.Sdk.EqualException.html
  name: EqualException
  nameWithType: EqualException
  fullName: Xunit.Sdk.EqualException
- uid: v3.1.0.1:Xunit.Assert.Equal*
  commentId: Overload:Xunit.Assert.Equal
  href: Xunit.Assert.Equal.html#Xunit_Assert_Equal__1_System_Collections_Generic_IEnumerable___0__System_Collections_Generic_IEnumerable___0__
  name: Equal
  nameWithType: Assert.Equal
  fullName: Xunit.Assert.Equal
- uid: System.Func{{T},{T},System.Boolean}
  commentId: T:System.Func{``0,``0,System.Boolean}
  parent: System
  definition: System.Func`3
  href: https://learn.microsoft.com/dotnet/api/system.func-3
  name: Func<T, T, bool>
  nameWithType: Func<T, T, bool>
  fullName: System.Func<T, T, bool>
  nameWithType.vb: Func(Of T, T, Boolean)
  fullName.vb: System.Func(Of T, T, Boolean)
  name.vb: Func(Of T, T, Boolean)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: v3.1.0.1:Xunit.Sdk.NotEmptyException
  commentId: T:Xunit.Sdk.NotEmptyException
  parent: v3.1.0.1:Xunit.Sdk
  href: Xunit.Sdk.NotEmptyException.html
  name: NotEmptyException
  nameWithType: NotEmptyException
  fullName: Xunit.Sdk.NotEmptyException
- uid: v3.1.0.1:Xunit.Assert.NotEmpty*
  commentId: Overload:Xunit.Assert.NotEmpty
  href: Xunit.Assert.NotEmpty.html#Xunit_Assert_NotEmpty_System_Collections_IEnumerable_
  name: NotEmpty
  nameWithType: Assert.NotEmpty
  fullName: Xunit.Assert.NotEmpty
- uid: v3.1.0.1:Xunit.Sdk.NotEqualException
  commentId: T:Xunit.Sdk.NotEqualException
  parent: v3.1.0.1:Xunit.Sdk
  href: Xunit.Sdk.NotEqualException.html
  name: NotEqualException
  nameWithType: NotEqualException
  fullName: Xunit.Sdk.NotEqualException
- uid: v3.1.0.1:Xunit.Assert.NotEqual*
  commentId: Overload:Xunit.Assert.NotEqual
  href: Xunit.Assert.NotEqual.html#Xunit_Assert_NotEqual__1_System_Collections_Generic_IEnumerable___0__System_Collections_Generic_IEnumerable___0__
  name: NotEqual
  nameWithType: Assert.NotEqual
  fullName: Xunit.Assert.NotEqual
- uid: v3.1.0.1:Xunit.Sdk.SingleException
  commentId: T:Xunit.Sdk.SingleException
  parent: v3.1.0.1:Xunit.Sdk
  href: Xunit.Sdk.SingleException.html
  name: SingleException
  nameWithType: SingleException
  fullName: Xunit.Sdk.SingleException
- uid: v3.1.0.1:Xunit.Assert.Single*
  commentId: Overload:Xunit.Assert.Single
  href: Xunit.Assert.Single.html#Xunit_Assert_Single_System_Collections_IEnumerable_
  name: Single
  nameWithType: Assert.Single
  fullName: Xunit.Assert.Single
- uid: '{TKey}'
  commentId: '!:TKey'
  definition: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: System.Collections.Generic.IDictionary{{TKey},{TValue}}
  commentId: T:System.Collections.Generic.IDictionary{``0,``1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: '{TValue}'
  commentId: '!:TValue'
  definition: TValue
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: TValue
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: System.Collections.Generic.IReadOnlyDictionary{{TKey},{TValue}}
  commentId: T:System.Collections.Generic.IReadOnlyDictionary{``0,``1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyDictionary`2
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlydictionary-2
  name: IReadOnlyDictionary<TKey, TValue>
  nameWithType: IReadOnlyDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>
  nameWithType.vb: IReadOnlyDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IReadOnlyDictionary(Of TKey, TValue)
  name.vb: IReadOnlyDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlydictionary-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlydictionary-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: System.Collections.Generic.IReadOnlyDictionary`2
  commentId: T:System.Collections.Generic.IReadOnlyDictionary`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlydictionary-2
  name: IReadOnlyDictionary<TKey, TValue>
  nameWithType: IReadOnlyDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>
  nameWithType.vb: IReadOnlyDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IReadOnlyDictionary(Of TKey, TValue)
  name.vb: IReadOnlyDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlydictionary-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlydictionary-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: System.Collections.Concurrent.ConcurrentDictionary{{TKey},{TValue}}
  commentId: T:System.Collections.Concurrent.ConcurrentDictionary{``0,``1}
  parent: System.Collections.Concurrent
  definition: System.Collections.Concurrent.ConcurrentDictionary`2
  href: https://learn.microsoft.com/dotnet/api/system.collections.concurrent.concurrentdictionary-2
  name: ConcurrentDictionary<TKey, TValue>
  nameWithType: ConcurrentDictionary<TKey, TValue>
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>
  nameWithType.vb: ConcurrentDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue)
  name.vb: ConcurrentDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2
    name: ConcurrentDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.concurrent.concurrentdictionary-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2
    name: ConcurrentDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.concurrent.concurrentdictionary-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: System.Collections.Concurrent.ConcurrentDictionary`2
  commentId: T:System.Collections.Concurrent.ConcurrentDictionary`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.concurrent.concurrentdictionary-2
  name: ConcurrentDictionary<TKey, TValue>
  nameWithType: ConcurrentDictionary<TKey, TValue>
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>
  nameWithType.vb: ConcurrentDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue)
  name.vb: ConcurrentDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2
    name: ConcurrentDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.concurrent.concurrentdictionary-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2
    name: ConcurrentDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.concurrent.concurrentdictionary-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: System.Collections.Concurrent
  commentId: N:System.Collections.Concurrent
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Concurrent
  nameWithType: System.Collections.Concurrent
  fullName: System.Collections.Concurrent
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Concurrent
    name: Concurrent
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.concurrent
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Concurrent
    name: Concurrent
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.concurrent
- uid: System.Collections.Generic.Dictionary{{TKey},{TValue}}
  commentId: T:System.Collections.Generic.Dictionary{``0,``1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: System.Collections.ObjectModel.ReadOnlyDictionary{{TKey},{TValue}}
  commentId: T:System.Collections.ObjectModel.ReadOnlyDictionary{``0,``1}
  parent: System.Collections.ObjectModel
  definition: System.Collections.ObjectModel.ReadOnlyDictionary`2
  href: https://learn.microsoft.com/dotnet/api/system.collections.objectmodel.readonlydictionary-2
  name: ReadOnlyDictionary<TKey, TValue>
  nameWithType: ReadOnlyDictionary<TKey, TValue>
  fullName: System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>
  nameWithType.vb: ReadOnlyDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyDictionary(Of TKey, TValue)
  name.vb: ReadOnlyDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyDictionary`2
    name: ReadOnlyDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.objectmodel.readonlydictionary-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyDictionary`2
    name: ReadOnlyDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.objectmodel.readonlydictionary-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: System.Collections.ObjectModel.ReadOnlyDictionary`2
  commentId: T:System.Collections.ObjectModel.ReadOnlyDictionary`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.objectmodel.readonlydictionary-2
  name: ReadOnlyDictionary<TKey, TValue>
  nameWithType: ReadOnlyDictionary<TKey, TValue>
  fullName: System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>
  nameWithType.vb: ReadOnlyDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyDictionary(Of TKey, TValue)
  name.vb: ReadOnlyDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyDictionary`2
    name: ReadOnlyDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.objectmodel.readonlydictionary-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyDictionary`2
    name: ReadOnlyDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.objectmodel.readonlydictionary-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: System.Collections.ObjectModel
  commentId: N:System.Collections.ObjectModel
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.ObjectModel
  nameWithType: System.Collections.ObjectModel
  fullName: System.Collections.ObjectModel
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.ObjectModel
    name: ObjectModel
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.objectmodel
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.ObjectModel
    name: ObjectModel
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.objectmodel
- uid: System.Collections.Immutable.ImmutableDictionary{{TKey},{TValue}}
  commentId: T:System.Collections.Immutable.ImmutableDictionary{``0,``1}
  parent: System.Collections.Immutable
  definition: System.Collections.Immutable.ImmutableDictionary`2
  href: https://learn.microsoft.com/dotnet/api/system.collections.immutable.immutabledictionary-2
  name: ImmutableDictionary<TKey, TValue>
  nameWithType: ImmutableDictionary<TKey, TValue>
  fullName: System.Collections.Immutable.ImmutableDictionary<TKey, TValue>
  nameWithType.vb: ImmutableDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Immutable.ImmutableDictionary(Of TKey, TValue)
  name.vb: ImmutableDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Immutable.ImmutableDictionary`2
    name: ImmutableDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.immutable.immutabledictionary-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Immutable.ImmutableDictionary`2
    name: ImmutableDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.immutable.immutabledictionary-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: System.Collections.Immutable.ImmutableDictionary`2
  commentId: T:System.Collections.Immutable.ImmutableDictionary`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.immutable.immutabledictionary-2
  name: ImmutableDictionary<TKey, TValue>
  nameWithType: ImmutableDictionary<TKey, TValue>
  fullName: System.Collections.Immutable.ImmutableDictionary<TKey, TValue>
  nameWithType.vb: ImmutableDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Immutable.ImmutableDictionary(Of TKey, TValue)
  name.vb: ImmutableDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Immutable.ImmutableDictionary`2
    name: ImmutableDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.immutable.immutabledictionary-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Immutable.ImmutableDictionary`2
    name: ImmutableDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.immutable.immutabledictionary-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: System.Collections.Immutable
  commentId: N:System.Collections.Immutable
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Immutable
  nameWithType: System.Collections.Immutable
  fullName: System.Collections.Immutable
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Immutable
    name: Immutable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.immutable
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Immutable
    name: Immutable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.immutable
- uid: System.MemoryExtensions.SequenceEqual``1(System.Span{``0},System.ReadOnlySpan{``0})
  commentId: M:System.MemoryExtensions.SequenceEqual``1(System.Span{``0},System.ReadOnlySpan{``0})
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.memoryextensions.sequenceequal#system-memoryextensions-sequenceequal-1(system-span((-0))-system-readonlyspan((-0)))
  name: SequenceEqual<T>(Span<T>, ReadOnlySpan<T>)
  nameWithType: MemoryExtensions.SequenceEqual<T>(Span<T>, ReadOnlySpan<T>)
  fullName: System.MemoryExtensions.SequenceEqual<T>(System.Span<T>, System.ReadOnlySpan<T>)
  nameWithType.vb: MemoryExtensions.SequenceEqual(Of T)(Span(Of T), ReadOnlySpan(Of T))
  fullName.vb: System.MemoryExtensions.SequenceEqual(Of T)(System.Span(Of T), System.ReadOnlySpan(Of T))
  name.vb: SequenceEqual(Of T)(Span(Of T), ReadOnlySpan(Of T))
  spec.csharp:
  - uid: System.MemoryExtensions.SequenceEqual``1(System.Span{``0},System.ReadOnlySpan{``0})
    name: SequenceEqual
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.memoryextensions.sequenceequal#system-memoryextensions-sequenceequal-1(system-span((-0))-system-readonlyspan((-0)))
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: System.Span`1
    name: Span
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.span-1
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: System.MemoryExtensions.SequenceEqual``1(System.Span{``0},System.ReadOnlySpan{``0})
    name: SequenceEqual
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.memoryextensions.sequenceequal#system-memoryextensions-sequenceequal-1(system-span((-0))-system-readonlyspan((-0)))
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: System.Span`1
    name: Span
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.span-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: v3.1.0.1:Xunit.Assert.Equal``1(``0,``0)
  commentId: M:Xunit.Assert.Equal``1(``0,``0)
  href: Xunit.Assert.Equal.html#Xunit_Assert_Equal__1___0___0_
  name: Equal<T>(T, T)
  nameWithType: Assert.Equal<T>(T, T)
  fullName: Xunit.Assert.Equal<T>(T, T)
  nameWithType.vb: Assert.Equal(Of T)(T, T)
  fullName.vb: Xunit.Assert.Equal(Of T)(T, T)
  name.vb: Equal(Of T)(T, T)
  spec.csharp:
  - uid: v3.1.0.1:Xunit.Assert.Equal``1(``0,``0)
    name: Equal
    href: Xunit.Assert.Equal.html#Xunit_Assert_Equal__1___0___0_
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: ','
  - name: " "
  - name: T
  - name: )
  spec.vb:
  - uid: v3.1.0.1:Xunit.Assert.Equal``1(``0,``0)
    name: Equal
    href: Xunit.Assert.Equal.html#Xunit_Assert_Equal__1___0___0_
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: ','
  - name: " "
  - name: T
  - name: )
- uid: '{T}[]'
  isExternal: true
  name: T[]
  nameWithType: T[]
  fullName: T[]
  nameWithType.vb: T()
  fullName.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
  - name: '['
  - name: ']'
  spec.vb:
  - name: T
  - name: (
  - name: )
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.double
  name: double
  nameWithType: double
  fullName: double
  nameWithType.vb: Double
  fullName.vb: Double
  name.vb: Double
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: System.MidpointRounding
  commentId: T:System.MidpointRounding
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.midpointrounding
  name: MidpointRounding
  nameWithType: MidpointRounding
  fullName: System.MidpointRounding
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: float
  nameWithType: float
  fullName: float
  nameWithType.vb: Single
  fullName.vb: Single
  name.vb: Single
- uid: System.Decimal
  commentId: T:System.Decimal
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.decimal
  name: decimal
  nameWithType: decimal
  fullName: decimal
  nameWithType.vb: Decimal
  fullName.vb: Decimal
  name.vb: Decimal
- uid: System.DateTime
  commentId: T:System.DateTime
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.datetime
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
  nameWithType.vb: Date
  fullName.vb: Date
  name.vb: Date
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.timespan
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.DateTimeOffset
  commentId: T:System.DateTimeOffset
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.datetimeoffset
  name: DateTimeOffset
  nameWithType: DateTimeOffset
  fullName: System.DateTimeOffset
- uid: v3.1.0.1:Xunit.Assert.NotStrictEqual*
  commentId: Overload:Xunit.Assert.NotStrictEqual
  href: Xunit.Assert.NotStrictEqual.html#Xunit_Assert_NotStrictEqual__1___0___0_
  name: NotStrictEqual
  nameWithType: Assert.NotStrictEqual
  fullName: Xunit.Assert.NotStrictEqual
- uid: v3.1.0.1:Xunit.Assert.StrictEqual*
  commentId: Overload:Xunit.Assert.StrictEqual
  href: Xunit.Assert.StrictEqual.html#Xunit_Assert_StrictEqual__1___0___0_
  name: StrictEqual
  nameWithType: Assert.StrictEqual
  fullName: Xunit.Assert.StrictEqual
- uid: v3.1.0.1:Xunit.Assert.Equivalent*
  commentId: Overload:Xunit.Assert.Equivalent
  href: Xunit.Assert.Equivalent.html#Xunit_Assert_Equivalent_System_Object_System_Object_System_Boolean_
  name: Equivalent
  nameWithType: Assert.Equivalent
  fullName: Xunit.Assert.Equivalent
- uid: v3.1.0.1:Xunit.Sdk.RaisesException
  commentId: T:Xunit.Sdk.RaisesException
  parent: v3.1.0.1:Xunit.Sdk
  href: Xunit.Sdk.RaisesException.html
  name: RaisesException
  nameWithType: RaisesException
  fullName: Xunit.Sdk.RaisesException
- uid: v3.1.0.1:Xunit.Assert.Raises*
  commentId: Overload:Xunit.Assert.Raises
  href: Xunit.Assert.Raises.html#Xunit_Assert_Raises_System_Action_System_Action__System_Action_System_Action__System_Action_
  name: Raises
  nameWithType: Assert.Raises
  fullName: Xunit.Assert.Raises
- uid: System.Action{System.Action}
  commentId: T:System.Action{System.Action}
  parent: System
  definition: System.Action`1
  href: https://learn.microsoft.com/dotnet/api/system.action-1
  name: Action<Action>
  nameWithType: Action<Action>
  fullName: System.Action<System.Action>
  nameWithType.vb: Action(Of Action)
  fullName.vb: System.Action(Of System.Action)
  name.vb: Action(Of Action)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: <
  - uid: System.Action
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action
  - name: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Action
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action
  - name: )
- uid: System.Action
  commentId: T:System.Action
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.action
  name: Action
  nameWithType: Action
  fullName: System.Action
- uid: System.Action{System.Action{{T}}}
  commentId: T:System.Action{System.Action{``0}}
  parent: System
  definition: System.Action`1
  href: https://learn.microsoft.com/dotnet/api/system.action-1
  name: Action<Action<T>>
  nameWithType: Action<Action<T>>
  fullName: System.Action<System.Action<T>>
  nameWithType.vb: Action(Of Action(Of T))
  fullName.vb: System.Action(Of System.Action(Of T))
  name.vb: Action(Of Action(Of T))
  spec.csharp:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: <
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: <
  - name: T
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: v3.1.0.1:Xunit.Assert.RaisedEvent{{T}}
  commentId: T:Xunit.Assert.RaisedEvent{``0}
  parent: v3.1.0.1:Xunit
  definition: Xunit.Assert.RaisedEvent`1
  href: Xunit.Assert.html
  name: Assert.RaisedEvent<T>
  nameWithType: Assert.RaisedEvent<T>
  fullName: Xunit.Assert.RaisedEvent<T>
  nameWithType.vb: Assert.RaisedEvent(Of T)
  fullName.vb: Xunit.Assert.RaisedEvent(Of T)
  name.vb: Assert.RaisedEvent(Of T)
  spec.csharp:
  - uid: v3.1.0.1:Xunit.Assert
    name: Assert
    href: Xunit.Assert.html
  - name: .
  - uid: v3.1.0.1:Xunit.Assert.RaisedEvent`1
    name: RaisedEvent
    href: Xunit.Assert.RaisedEvent-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: v3.1.0.1:Xunit.Assert
    name: Assert
    href: Xunit.Assert.html
  - name: .
  - uid: v3.1.0.1:Xunit.Assert.RaisedEvent`1
    name: RaisedEvent
    href: Xunit.Assert.RaisedEvent-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: v3.1.0.1:Xunit.Assert.RaisedEvent`1
  commentId: T:Xunit.Assert.RaisedEvent`1
  href: Xunit.Assert.html
  name: Assert.RaisedEvent<T>
  nameWithType: Assert.RaisedEvent<T>
  fullName: Xunit.Assert.RaisedEvent<T>
  nameWithType.vb: Assert.RaisedEvent(Of T)
  fullName.vb: Xunit.Assert.RaisedEvent(Of T)
  name.vb: Assert.RaisedEvent(Of T)
  spec.csharp:
  - uid: v3.1.0.1:Xunit.Assert
    name: Assert
    href: Xunit.Assert.html
  - name: .
  - uid: v3.1.0.1:Xunit.Assert.RaisedEvent`1
    name: RaisedEvent
    href: Xunit.Assert.RaisedEvent-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: v3.1.0.1:Xunit.Assert
    name: Assert
    href: Xunit.Assert.html
  - name: .
  - uid: v3.1.0.1:Xunit.Assert.RaisedEvent`1
    name: RaisedEvent
    href: Xunit.Assert.RaisedEvent-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Action{System.EventHandler{{T}}}
  commentId: T:System.Action{System.EventHandler{``0}}
  parent: System
  definition: System.Action`1
  href: https://learn.microsoft.com/dotnet/api/system.action-1
  name: Action<EventHandler<T>>
  nameWithType: Action<EventHandler<T>>
  fullName: System.Action<System.EventHandler<T>>
  nameWithType.vb: Action(Of EventHandler(Of T))
  fullName.vb: System.Action(Of System.EventHandler(Of T))
  name.vb: Action(Of EventHandler(Of T))
  spec.csharp:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: <
  - uid: System.EventHandler`1
    name: EventHandler
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.eventhandler-1
  - name: <
  - name: T
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.EventHandler`1
    name: EventHandler
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.eventhandler-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: System.Func{Xunit.Assert.RaisedEvent{{T}}}
  commentId: T:System.Func{Xunit.Assert.RaisedEvent{``0}}
  parent: System
  definition: System.Func`1
  href: https://learn.microsoft.com/dotnet/api/system.func-1
  name: Func<Assert.RaisedEvent<T>>
  nameWithType: Func<Assert.RaisedEvent<T>>
  fullName: System.Func<Xunit.Assert.RaisedEvent<T>>
  nameWithType.vb: Func(Of Assert.RaisedEvent(Of T))
  fullName.vb: System.Func(Of Xunit.Assert.RaisedEvent(Of T))
  name.vb: Func(Of Assert.RaisedEvent(Of T))
  spec.csharp:
  - uid: System.Func`1
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-1
  - name: <
  - uid: v3.1.0.1:Xunit.Assert
    name: Assert
    href: Xunit.Assert.html
  - name: .
  - uid: v3.1.0.1:Xunit.Assert.RaisedEvent`1
    name: RaisedEvent
    href: Xunit.Assert.RaisedEvent-1.html
  - name: <
  - name: T
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-1
  - name: (
  - name: Of
  - name: " "
  - uid: v3.1.0.1:Xunit.Assert
    name: Assert
    href: Xunit.Assert.html
  - name: .
  - uid: v3.1.0.1:Xunit.Assert.RaisedEvent`1
    name: RaisedEvent
    href: Xunit.Assert.RaisedEvent-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: System.Func`1
  commentId: T:System.Func`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-1
  name: Func<TResult>
  nameWithType: Func<TResult>
  fullName: System.Func<TResult>
  nameWithType.vb: Func(Of TResult)
  fullName.vb: System.Func(Of TResult)
  name.vb: Func(Of TResult)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-1
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: v3.1.0.1:Xunit.Assert.RaisesAny*
  commentId: Overload:Xunit.Assert.RaisesAny
  href: Xunit.Assert.RaisesAny.html#Xunit_Assert_RaisesAny_System_Action_System_EventHandler__System_Action_System_EventHandler__System_Action_
  name: RaisesAny
  nameWithType: Assert.RaisesAny
  fullName: Xunit.Assert.RaisesAny
- uid: System.Action{System.EventHandler}
  commentId: T:System.Action{System.EventHandler}
  parent: System
  definition: System.Action`1
  href: https://learn.microsoft.com/dotnet/api/system.action-1
  name: Action<EventHandler>
  nameWithType: Action<EventHandler>
  fullName: System.Action<System.EventHandler>
  nameWithType.vb: Action(Of EventHandler)
  fullName.vb: System.Action(Of System.EventHandler)
  name.vb: Action(Of EventHandler)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: <
  - uid: System.EventHandler
    name: EventHandler
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.eventhandler
  - name: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.EventHandler
    name: EventHandler
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.eventhandler
  - name: )
- uid: v3.1.0.1:Xunit.Assert.RaisedEvent{System.EventArgs}
  commentId: T:Xunit.Assert.RaisedEvent{System.EventArgs}
  parent: v3.1.0.1:Xunit
  definition: Xunit.Assert.RaisedEvent`1
  href: Xunit.Assert.html
  name: Assert.RaisedEvent<EventArgs>
  nameWithType: Assert.RaisedEvent<EventArgs>
  fullName: Xunit.Assert.RaisedEvent<System.EventArgs>
  nameWithType.vb: Assert.RaisedEvent(Of EventArgs)
  fullName.vb: Xunit.Assert.RaisedEvent(Of System.EventArgs)
  name.vb: Assert.RaisedEvent(Of EventArgs)
  spec.csharp:
  - uid: v3.1.0.1:Xunit.Assert
    name: Assert
    href: Xunit.Assert.html
  - name: .
  - uid: v3.1.0.1:Xunit.Assert.RaisedEvent`1
    name: RaisedEvent
    href: Xunit.Assert.RaisedEvent-1.html
  - name: <
  - uid: System.EventArgs
    name: EventArgs
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.eventargs
  - name: '>'
  spec.vb:
  - uid: v3.1.0.1:Xunit.Assert
    name: Assert
    href: Xunit.Assert.html
  - name: .
  - uid: v3.1.0.1:Xunit.Assert.RaisedEvent`1
    name: RaisedEvent
    href: Xunit.Assert.RaisedEvent-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: System.EventArgs
    name: EventArgs
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.eventargs
  - name: )
- uid: v3.1.0.1:Xunit.Assert.RaisesAnyAsync*
  commentId: Overload:Xunit.Assert.RaisesAnyAsync
  href: Xunit.Assert.RaisesAnyAsync.html#Xunit_Assert_RaisesAnyAsync_System_Action_System_EventHandler__System_Action_System_EventHandler__System_Func_System_Threading_Tasks_Task__
  name: RaisesAnyAsync
  nameWithType: Assert.RaisesAnyAsync
  fullName: Xunit.Assert.RaisesAnyAsync
- uid: System.Func{System.Threading.Tasks.Task}
  commentId: T:System.Func{System.Threading.Tasks.Task}
  parent: System
  definition: System.Func`1
  href: https://learn.microsoft.com/dotnet/api/system.func-1
  name: Func<Task>
  nameWithType: Func<Task>
  fullName: System.Func<System.Threading.Tasks.Task>
  nameWithType.vb: Func(Of Task)
  fullName.vb: System.Func(Of System.Threading.Tasks.Task)
  name.vb: Func(Of Task)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-1
  - name: <
  - uid: System.Threading.Tasks.Task
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task
  - name: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Threading.Tasks.Task
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task
  - name: )
- uid: System.Threading.Tasks.Task{Xunit.Assert.RaisedEvent{System.EventArgs}}
  commentId: T:System.Threading.Tasks.Task{Xunit.Assert.RaisedEvent{System.EventArgs}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<Assert.RaisedEvent<EventArgs>>
  nameWithType: Task<Assert.RaisedEvent<EventArgs>>
  fullName: System.Threading.Tasks.Task<Xunit.Assert.RaisedEvent<System.EventArgs>>
  nameWithType.vb: Task(Of Assert.RaisedEvent(Of EventArgs))
  fullName.vb: System.Threading.Tasks.Task(Of Xunit.Assert.RaisedEvent(Of System.EventArgs))
  name.vb: Task(Of Assert.RaisedEvent(Of EventArgs))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: v3.1.0.1:Xunit.Assert
    name: Assert
    href: Xunit.Assert.html
  - name: .
  - uid: v3.1.0.1:Xunit.Assert.RaisedEvent`1
    name: RaisedEvent
    href: Xunit.Assert.RaisedEvent-1.html
  - name: <
  - uid: System.EventArgs
    name: EventArgs
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.eventargs
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: v3.1.0.1:Xunit.Assert
    name: Assert
    href: Xunit.Assert.html
  - name: .
  - uid: v3.1.0.1:Xunit.Assert.RaisedEvent`1
    name: RaisedEvent
    href: Xunit.Assert.RaisedEvent-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: System.EventArgs
    name: EventArgs
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.eventargs
  - name: )
  - name: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: System.Threading.Tasks.Task{Xunit.Assert.RaisedEvent{{T}}}
  commentId: T:System.Threading.Tasks.Task{Xunit.Assert.RaisedEvent{``0}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<Assert.RaisedEvent<T>>
  nameWithType: Task<Assert.RaisedEvent<T>>
  fullName: System.Threading.Tasks.Task<Xunit.Assert.RaisedEvent<T>>
  nameWithType.vb: Task(Of Assert.RaisedEvent(Of T))
  fullName.vb: System.Threading.Tasks.Task(Of Xunit.Assert.RaisedEvent(Of T))
  name.vb: Task(Of Assert.RaisedEvent(Of T))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: v3.1.0.1:Xunit.Assert
    name: Assert
    href: Xunit.Assert.html
  - name: .
  - uid: v3.1.0.1:Xunit.Assert.RaisedEvent`1
    name: RaisedEvent
    href: Xunit.Assert.RaisedEvent-1.html
  - name: <
  - name: T
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: v3.1.0.1:Xunit.Assert
    name: Assert
    href: Xunit.Assert.html
  - name: .
  - uid: v3.1.0.1:Xunit.Assert.RaisedEvent`1
    name: RaisedEvent
    href: Xunit.Assert.RaisedEvent-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: v3.1.0.1:Xunit.Assert.RaisesAsync*
  commentId: Overload:Xunit.Assert.RaisesAsync
  href: Xunit.Assert.RaisesAsync.html#Xunit_Assert_RaisesAsync_System_Action_System_Action__System_Action_System_Action__System_Func_System_Threading_Tasks_Task__
  name: RaisesAsync
  nameWithType: Assert.RaisesAsync
  fullName: Xunit.Assert.RaisesAsync
- uid: v3.1.0.1:Xunit.Assert.Throws*
  commentId: Overload:Xunit.Assert.Throws
  href: Xunit.Assert.Throws.html#Xunit_Assert_Throws_System_Type_System_Action_
  name: Throws
  nameWithType: Assert.Throws
  fullName: Xunit.Assert.Throws
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.type
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Exception
  commentId: T:System.Exception
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.exception
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: System.Func{System.Object}
  commentId: T:System.Func{System.Object}
  parent: System
  definition: System.Func`1
  href: https://learn.microsoft.com/dotnet/api/system.func-1
  name: Func<object>
  nameWithType: Func<object>
  fullName: System.Func<object>
  nameWithType.vb: Func(Of Object)
  fullName.vb: System.Func(Of Object)
  name.vb: Func(Of Object)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-1
  - name: <
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.argumentexception
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: v3.1.0.1:Xunit.Assert.ThrowsAny*
  commentId: Overload:Xunit.Assert.ThrowsAny
  href: Xunit.Assert.ThrowsAny.html#Xunit_Assert_ThrowsAny__1_System_Action_
  name: ThrowsAny
  nameWithType: Assert.ThrowsAny
  fullName: Xunit.Assert.ThrowsAny
- uid: v3.1.0.1:Xunit.Assert.ThrowsAnyAsync*
  commentId: Overload:Xunit.Assert.ThrowsAnyAsync
  href: Xunit.Assert.ThrowsAnyAsync.html#Xunit_Assert_ThrowsAnyAsync__1_System_Func_System_Threading_Tasks_Task__
  name: ThrowsAnyAsync
  nameWithType: Assert.ThrowsAnyAsync
  fullName: Xunit.Assert.ThrowsAnyAsync
- uid: System.Threading.Tasks.Task{{T}}
  commentId: T:System.Threading.Tasks.Task{``0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<T>
  nameWithType: Task<T>
  fullName: System.Threading.Tasks.Task<T>
  nameWithType.vb: Task(Of T)
  fullName.vb: System.Threading.Tasks.Task(Of T)
  name.vb: Task(Of T)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: v3.1.0.1:Xunit.Assert.ThrowsAsync*
  commentId: Overload:Xunit.Assert.ThrowsAsync
  href: Xunit.Assert.ThrowsAsync.html#Xunit_Assert_ThrowsAsync_System_Type_System_Func_System_Threading_Tasks_Task__
  name: ThrowsAsync
  nameWithType: Assert.ThrowsAsync
  fullName: Xunit.Assert.ThrowsAsync
- uid: System.Threading.Tasks.Task{System.Exception}
  commentId: T:System.Threading.Tasks.Task{System.Exception}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<Exception>
  nameWithType: Task<Exception>
  fullName: System.Threading.Tasks.Task<System.Exception>
  nameWithType.vb: Task(Of Exception)
  fullName.vb: System.Threading.Tasks.Task(Of System.Exception)
  name.vb: Task(Of Exception)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.Exception
    name: Exception
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.exception
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Exception
    name: Exception
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.exception
  - name: )
- uid: v3.1.0.1:Xunit.Assert.Fail*
  commentId: Overload:Xunit.Assert.Fail
  href: Xunit.Assert.Fail.html#Xunit_Assert_Fail_System_String_
  name: Fail
  nameWithType: Assert.Fail
  fullName: Xunit.Assert.Fail
- uid: v3.1.0.1:Xunit.Sdk.NotSameException
  commentId: T:Xunit.Sdk.NotSameException
  parent: v3.1.0.1:Xunit.Sdk
  href: Xunit.Sdk.NotSameException.html
  name: NotSameException
  nameWithType: NotSameException
  fullName: Xunit.Sdk.NotSameException
- uid: v3.1.0.1:Xunit.Assert.NotSame*
  commentId: Overload:Xunit.Assert.NotSame
  href: Xunit.Assert.NotSame.html#Xunit_Assert_NotSame_System_Object_System_Object_
  name: NotSame
  nameWithType: Assert.NotSame
  fullName: Xunit.Assert.NotSame
- uid: v3.1.0.1:Xunit.Sdk.SameException
  commentId: T:Xunit.Sdk.SameException
  parent: v3.1.0.1:Xunit.Sdk
  href: Xunit.Sdk.SameException.html
  name: SameException
  nameWithType: SameException
  fullName: Xunit.Sdk.SameException
- uid: v3.1.0.1:Xunit.Assert.Same*
  commentId: Overload:Xunit.Assert.Same
  href: Xunit.Assert.Same.html#Xunit_Assert_Same_System_Object_System_Object_
  name: Same
  nameWithType: Assert.Same
  fullName: Xunit.Assert.Same
- uid: System.Memory{{T}}
  commentId: T:System.Memory{``0}
  parent: System
  definition: System.Memory`1
  href: https://learn.microsoft.com/dotnet/api/system.memory-1
  name: Memory<T>
  nameWithType: Memory<T>
  fullName: System.Memory<T>
  nameWithType.vb: Memory(Of T)
  fullName.vb: System.Memory(Of T)
  name.vb: Memory(Of T)
  spec.csharp:
  - uid: System.Memory`1
    name: Memory
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.memory-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Memory`1
    name: Memory
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.memory-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Memory`1
  commentId: T:System.Memory`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.memory-1
  name: Memory<T>
  nameWithType: Memory<T>
  fullName: System.Memory<T>
  nameWithType.vb: Memory(Of T)
  fullName.vb: System.Memory(Of T)
  name.vb: Memory(Of T)
  spec.csharp:
  - uid: System.Memory`1
    name: Memory
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.memory-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Memory`1
    name: Memory
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.memory-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.ReadOnlyMemory{{T}}
  commentId: T:System.ReadOnlyMemory{``0}
  parent: System
  definition: System.ReadOnlyMemory`1
  href: https://learn.microsoft.com/dotnet/api/system.readonlymemory-1
  name: ReadOnlyMemory<T>
  nameWithType: ReadOnlyMemory<T>
  fullName: System.ReadOnlyMemory<T>
  nameWithType.vb: ReadOnlyMemory(Of T)
  fullName.vb: System.ReadOnlyMemory(Of T)
  name.vb: ReadOnlyMemory(Of T)
  spec.csharp:
  - uid: System.ReadOnlyMemory`1
    name: ReadOnlyMemory
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlymemory-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.ReadOnlyMemory`1
    name: ReadOnlyMemory
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlymemory-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.ReadOnlyMemory`1
  commentId: T:System.ReadOnlyMemory`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.readonlymemory-1
  name: ReadOnlyMemory<T>
  nameWithType: ReadOnlyMemory<T>
  fullName: System.ReadOnlyMemory<T>
  nameWithType.vb: ReadOnlyMemory(Of T)
  fullName.vb: System.ReadOnlyMemory(Of T)
  name.vb: ReadOnlyMemory(Of T)
  spec.csharp:
  - uid: System.ReadOnlyMemory`1
    name: ReadOnlyMemory
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlymemory-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.ReadOnlyMemory`1
    name: ReadOnlyMemory
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlymemory-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: v3.1.0.1:Xunit.Assert.Multiple*
  commentId: Overload:Xunit.Assert.Multiple
  href: Xunit.Assert.Multiple.html#Xunit_Assert_Multiple_System_Action___
  name: Multiple
  nameWithType: Assert.Multiple
  fullName: Xunit.Assert.Multiple
- uid: System.Action[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.action
  name: Action[]
  nameWithType: Action[]
  fullName: System.Action[]
  nameWithType.vb: Action()
  fullName.vb: System.Action()
  name.vb: Action()
  spec.csharp:
  - uid: System.Action
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.Action
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action
  - name: (
  - name: )
- uid: v3.1.0.1:Xunit.Sdk.NotNullException
  commentId: T:Xunit.Sdk.NotNullException
  parent: v3.1.0.1:Xunit.Sdk
  href: Xunit.Sdk.NotNullException.html
  name: NotNullException
  nameWithType: NotNullException
  fullName: Xunit.Sdk.NotNullException
- uid: v3.1.0.1:Xunit.Assert.NotNull*
  commentId: Overload:Xunit.Assert.NotNull
  href: Xunit.Assert.NotNull.html#Xunit_Assert_NotNull_System_Object_
  name: NotNull
  nameWithType: Assert.NotNull
  fullName: Xunit.Assert.NotNull
- uid: System.Nullable{{T}}
  commentId: T:System.Nullable{``0}
  parent: System
  definition: System.Nullable`1
  name: T?
  nameWithType: T?
  fullName: T?
  spec.csharp:
  - name: T
  - name: '?'
  spec.vb:
  - name: T
  - name: '?'
- uid: v3.1.0.1:Xunit.Sdk.NullException
  commentId: T:Xunit.Sdk.NullException
  parent: v3.1.0.1:Xunit.Sdk
  href: Xunit.Sdk.NullException.html
  name: NullException
  nameWithType: NullException
  fullName: Xunit.Sdk.NullException
- uid: v3.1.0.1:Xunit.Assert.Null*
  commentId: Overload:Xunit.Assert.Null
  href: Xunit.Assert.Null.html#Xunit_Assert_Null_System_Object_
  name: "Null"
  nameWithType: Assert.Null
  fullName: Xunit.Assert.Null
- uid: System.ComponentModel.INotifyPropertyChanged.PropertyChanged
  commentId: E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.componentmodel.inotifypropertychanged.propertychanged
  name: PropertyChanged
  nameWithType: INotifyPropertyChanged.PropertyChanged
  fullName: System.ComponentModel.INotifyPropertyChanged.PropertyChanged
- uid: v3.1.0.1:Xunit.Sdk.PropertyChangedException
  commentId: T:Xunit.Sdk.PropertyChangedException
  parent: v3.1.0.1:Xunit.Sdk
  href: Xunit.Sdk.PropertyChangedException.html
  name: PropertyChangedException
  nameWithType: PropertyChangedException
  fullName: Xunit.Sdk.PropertyChangedException
- uid: v3.1.0.1:Xunit.Assert.PropertyChanged*
  commentId: Overload:Xunit.Assert.PropertyChanged
  href: Xunit.Assert.PropertyChanged.html#Xunit_Assert_PropertyChanged_System_ComponentModel_INotifyPropertyChanged_System_String_System_Action_
  name: PropertyChanged
  nameWithType: Assert.PropertyChanged
  fullName: Xunit.Assert.PropertyChanged
- uid: System.ComponentModel.INotifyPropertyChanged
  commentId: T:System.ComponentModel.INotifyPropertyChanged
  parent: System.ComponentModel
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.componentmodel.inotifypropertychanged
  name: INotifyPropertyChanged
  nameWithType: INotifyPropertyChanged
  fullName: System.ComponentModel.INotifyPropertyChanged
- uid: System.ComponentModel
  commentId: N:System.ComponentModel
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.ComponentModel
  nameWithType: System.ComponentModel
  fullName: System.ComponentModel
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.ComponentModel
    name: ComponentModel
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.componentmodel
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.ComponentModel
    name: ComponentModel
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.componentmodel
- uid: v3.1.0.1:Xunit.Assert.PropertyChangedAsync*
  commentId: Overload:Xunit.Assert.PropertyChangedAsync
  href: Xunit.Assert.PropertyChangedAsync.html#Xunit_Assert_PropertyChangedAsync_System_ComponentModel_INotifyPropertyChanged_System_String_System_Func_System_Threading_Tasks_Task__
  name: PropertyChangedAsync
  nameWithType: Assert.PropertyChangedAsync
  fullName: Xunit.Assert.PropertyChangedAsync
- uid: v3.1.0.1:Xunit.Sdk.InRangeException
  commentId: T:Xunit.Sdk.InRangeException
  parent: v3.1.0.1:Xunit.Sdk
  href: Xunit.Sdk.InRangeException.html
  name: InRangeException
  nameWithType: InRangeException
  fullName: Xunit.Sdk.InRangeException
- uid: v3.1.0.1:Xunit.Assert.InRange*
  commentId: Overload:Xunit.Assert.InRange
  href: Xunit.Assert.InRange.html#Xunit_Assert_InRange__1___0___0___0_
  name: InRange
  nameWithType: Assert.InRange
  fullName: Xunit.Assert.InRange
- uid: System.Collections.Generic.IComparer{{T}}
  commentId: T:System.Collections.Generic.IComparer{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IComparer`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icomparer-1
  name: IComparer<T>
  nameWithType: IComparer<T>
  fullName: System.Collections.Generic.IComparer<T>
  nameWithType.vb: IComparer(Of T)
  fullName.vb: System.Collections.Generic.IComparer(Of T)
  name.vb: IComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icomparer-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icomparer-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic.IComparer`1
  commentId: T:System.Collections.Generic.IComparer`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icomparer-1
  name: IComparer<T>
  nameWithType: IComparer<T>
  fullName: System.Collections.Generic.IComparer<T>
  nameWithType.vb: IComparer(Of T)
  fullName.vb: System.Collections.Generic.IComparer(Of T)
  name.vb: IComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icomparer-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icomparer-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: v3.1.0.1:Xunit.Sdk.NotInRangeException
  commentId: T:Xunit.Sdk.NotInRangeException
  parent: v3.1.0.1:Xunit.Sdk
  href: Xunit.Sdk.NotInRangeException.html
  name: NotInRangeException
  nameWithType: NotInRangeException
  fullName: Xunit.Sdk.NotInRangeException
- uid: v3.1.0.1:Xunit.Assert.NotInRange*
  commentId: Overload:Xunit.Assert.NotInRange
  href: Xunit.Assert.NotInRange.html#Xunit_Assert_NotInRange__1___0___0___0_
  name: NotInRange
  nameWithType: Assert.NotInRange
  fullName: Xunit.Assert.NotInRange
- uid: v3.1.0.1:Xunit.Assert.RecordException*
  commentId: Overload:Xunit.Assert.RecordException
  href: Xunit.Assert.RecordException.html#Xunit_Assert_RecordException_System_Action_
  name: RecordException
  nameWithType: Assert.RecordException
  fullName: Xunit.Assert.RecordException
- uid: v3.1.0.1:Xunit.Assert.RecordExceptionAsync*
  commentId: Overload:Xunit.Assert.RecordExceptionAsync
  href: Xunit.Assert.RecordExceptionAsync.html#Xunit_Assert_RecordExceptionAsync_System_Func_System_Threading_Tasks_Task__
  name: RecordExceptionAsync
  nameWithType: Assert.RecordExceptionAsync
  fullName: Xunit.Assert.RecordExceptionAsync
- uid: System.Collections.Generic.ISet{{T}}
  commentId: T:System.Collections.Generic.ISet{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ISet`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.iset-1
  name: ISet<T>
  nameWithType: ISet<T>
  fullName: System.Collections.Generic.ISet<T>
  nameWithType.vb: ISet(Of T)
  fullName.vb: System.Collections.Generic.ISet(Of T)
  name.vb: ISet(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ISet`1
    name: ISet
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.iset-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.ISet`1
    name: ISet
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.iset-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic.ISet`1
  commentId: T:System.Collections.Generic.ISet`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.iset-1
  name: ISet<T>
  nameWithType: ISet<T>
  fullName: System.Collections.Generic.ISet<T>
  nameWithType.vb: ISet(Of T)
  fullName.vb: System.Collections.Generic.ISet(Of T)
  name.vb: ISet(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ISet`1
    name: ISet
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.iset-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.ISet`1
    name: ISet
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.iset-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic.HashSet{{T}}
  commentId: T:System.Collections.Generic.HashSet{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.HashSet`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.hashset-1
  name: HashSet<T>
  nameWithType: HashSet<T>
  fullName: System.Collections.Generic.HashSet<T>
  nameWithType.vb: HashSet(Of T)
  fullName.vb: System.Collections.Generic.HashSet(Of T)
  name.vb: HashSet(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.hashset-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.hashset-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic.HashSet`1
  commentId: T:System.Collections.Generic.HashSet`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.hashset-1
  name: HashSet<T>
  nameWithType: HashSet<T>
  fullName: System.Collections.Generic.HashSet<T>
  nameWithType.vb: HashSet(Of T)
  fullName.vb: System.Collections.Generic.HashSet(Of T)
  name.vb: HashSet(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.hashset-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.hashset-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic.SortedSet{{T}}
  commentId: T:System.Collections.Generic.SortedSet{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.SortedSet`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.sortedset-1
  name: SortedSet<T>
  nameWithType: SortedSet<T>
  fullName: System.Collections.Generic.SortedSet<T>
  nameWithType.vb: SortedSet(Of T)
  fullName.vb: System.Collections.Generic.SortedSet(Of T)
  name.vb: SortedSet(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.SortedSet`1
    name: SortedSet
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.sortedset-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.SortedSet`1
    name: SortedSet
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.sortedset-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic.SortedSet`1
  commentId: T:System.Collections.Generic.SortedSet`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.sortedset-1
  name: SortedSet<T>
  nameWithType: SortedSet<T>
  fullName: System.Collections.Generic.SortedSet<T>
  nameWithType.vb: SortedSet(Of T)
  fullName.vb: System.Collections.Generic.SortedSet(Of T)
  name.vb: SortedSet(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.SortedSet`1
    name: SortedSet
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.sortedset-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.SortedSet`1
    name: SortedSet
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.sortedset-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Immutable.ImmutableHashSet{{T}}
  commentId: T:System.Collections.Immutable.ImmutableHashSet{``0}
  parent: System.Collections.Immutable
  definition: System.Collections.Immutable.ImmutableHashSet`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.immutable.immutablehashset-1
  name: ImmutableHashSet<T>
  nameWithType: ImmutableHashSet<T>
  fullName: System.Collections.Immutable.ImmutableHashSet<T>
  nameWithType.vb: ImmutableHashSet(Of T)
  fullName.vb: System.Collections.Immutable.ImmutableHashSet(Of T)
  name.vb: ImmutableHashSet(Of T)
  spec.csharp:
  - uid: System.Collections.Immutable.ImmutableHashSet`1
    name: ImmutableHashSet
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.immutable.immutablehashset-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Immutable.ImmutableHashSet`1
    name: ImmutableHashSet
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.immutable.immutablehashset-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Immutable.ImmutableHashSet`1
  commentId: T:System.Collections.Immutable.ImmutableHashSet`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.immutable.immutablehashset-1
  name: ImmutableHashSet<T>
  nameWithType: ImmutableHashSet<T>
  fullName: System.Collections.Immutable.ImmutableHashSet<T>
  nameWithType.vb: ImmutableHashSet(Of T)
  fullName.vb: System.Collections.Immutable.ImmutableHashSet(Of T)
  name.vb: ImmutableHashSet(Of T)
  spec.csharp:
  - uid: System.Collections.Immutable.ImmutableHashSet`1
    name: ImmutableHashSet
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.immutable.immutablehashset-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Immutable.ImmutableHashSet`1
    name: ImmutableHashSet
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.immutable.immutablehashset-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Immutable.ImmutableSortedSet{{T}}
  commentId: T:System.Collections.Immutable.ImmutableSortedSet{``0}
  parent: System.Collections.Immutable
  definition: System.Collections.Immutable.ImmutableSortedSet`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.immutable.immutablesortedset-1
  name: ImmutableSortedSet<T>
  nameWithType: ImmutableSortedSet<T>
  fullName: System.Collections.Immutable.ImmutableSortedSet<T>
  nameWithType.vb: ImmutableSortedSet(Of T)
  fullName.vb: System.Collections.Immutable.ImmutableSortedSet(Of T)
  name.vb: ImmutableSortedSet(Of T)
  spec.csharp:
  - uid: System.Collections.Immutable.ImmutableSortedSet`1
    name: ImmutableSortedSet
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.immutable.immutablesortedset-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Immutable.ImmutableSortedSet`1
    name: ImmutableSortedSet
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.immutable.immutablesortedset-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Immutable.ImmutableSortedSet`1
  commentId: T:System.Collections.Immutable.ImmutableSortedSet`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.immutable.immutablesortedset-1
  name: ImmutableSortedSet<T>
  nameWithType: ImmutableSortedSet<T>
  fullName: System.Collections.Immutable.ImmutableSortedSet<T>
  nameWithType.vb: ImmutableSortedSet(Of T)
  fullName.vb: System.Collections.Immutable.ImmutableSortedSet(Of T)
  name.vb: ImmutableSortedSet(Of T)
  spec.csharp:
  - uid: System.Collections.Immutable.ImmutableSortedSet`1
    name: ImmutableSortedSet
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.immutable.immutablesortedset-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Immutable.ImmutableSortedSet`1
    name: ImmutableSortedSet
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.immutable.immutablesortedset-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: v3.1.0.1:Xunit.Assert.ProperSubset*
  commentId: Overload:Xunit.Assert.ProperSubset
  href: Xunit.Assert.ProperSubset.html#Xunit_Assert_ProperSubset__1_System_Collections_Generic_ISet___0__System_Collections_Generic_ISet___0__
  name: ProperSubset
  nameWithType: Assert.ProperSubset
  fullName: Xunit.Assert.ProperSubset
- uid: v3.1.0.1:Xunit.Assert.ProperSuperset*
  commentId: Overload:Xunit.Assert.ProperSuperset
  href: Xunit.Assert.ProperSuperset.html#Xunit_Assert_ProperSuperset__1_System_Collections_Generic_ISet___0__System_Collections_Generic_ISet___0__
  name: ProperSuperset
  nameWithType: Assert.ProperSuperset
  fullName: Xunit.Assert.ProperSuperset
- uid: v3.1.0.1:Xunit.Assert.Subset*
  commentId: Overload:Xunit.Assert.Subset
  href: Xunit.Assert.Subset.html#Xunit_Assert_Subset__1_System_Collections_Generic_ISet___0__System_Collections_Generic_ISet___0__
  name: Subset
  nameWithType: Assert.Subset
  fullName: Xunit.Assert.Subset
- uid: v3.1.0.1:Xunit.Assert.Superset*
  commentId: Overload:Xunit.Assert.Superset
  href: Xunit.Assert.Superset.html#Xunit_Assert_Superset__1_System_Collections_Generic_ISet___0__System_Collections_Generic_ISet___0__
  name: Superset
  nameWithType: Assert.Superset
  fullName: Xunit.Assert.Superset
- uid: v3.1.0.1:Xunit.Assert.Skip*
  commentId: Overload:Xunit.Assert.Skip
  href: Xunit.Assert.Skip.html#Xunit_Assert_Skip_System_String_
  name: Skip
  nameWithType: Assert.Skip
  fullName: Xunit.Assert.Skip
- uid: v3.1.0.1:Xunit.Assert.SkipUnless*
  commentId: Overload:Xunit.Assert.SkipUnless
  href: Xunit.Assert.SkipUnless.html#Xunit_Assert_SkipUnless_System_Boolean_System_String_
  name: SkipUnless
  nameWithType: Assert.SkipUnless
  fullName: Xunit.Assert.SkipUnless
- uid: v3.1.0.1:Xunit.Assert.SkipWhen*
  commentId: Overload:Xunit.Assert.SkipWhen
  href: Xunit.Assert.SkipWhen.html#Xunit_Assert_SkipWhen_System_Boolean_System_String_
  name: SkipWhen
  nameWithType: Assert.SkipWhen
  fullName: Xunit.Assert.SkipWhen
- uid: System.Span{{T}}
  commentId: T:System.Span{``0}
  parent: System
  definition: System.Span`1
  href: https://learn.microsoft.com/dotnet/api/system.span-1
  name: Span<T>
  nameWithType: Span<T>
  fullName: System.Span<T>
  nameWithType.vb: Span(Of T)
  fullName.vb: System.Span(Of T)
  name.vb: Span(Of T)
  spec.csharp:
  - uid: System.Span`1
    name: Span
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.span-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Span`1
    name: Span
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.span-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Span`1
  commentId: T:System.Span`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.span-1
  name: Span<T>
  nameWithType: Span<T>
  fullName: System.Span<T>
  nameWithType.vb: Span(Of T)
  fullName.vb: System.Span(Of T)
  name.vb: Span(Of T)
  spec.csharp:
  - uid: System.Span`1
    name: Span
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.span-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Span`1
    name: Span
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.span-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.ReadOnlySpan{{T}}
  commentId: T:System.ReadOnlySpan{``0}
  parent: System
  definition: System.ReadOnlySpan`1
  href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  name: ReadOnlySpan<T>
  nameWithType: ReadOnlySpan<T>
  fullName: System.ReadOnlySpan<T>
  nameWithType.vb: ReadOnlySpan(Of T)
  fullName.vb: System.ReadOnlySpan(Of T)
  name.vb: ReadOnlySpan(Of T)
  spec.csharp:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.ReadOnlySpan`1
  commentId: T:System.ReadOnlySpan`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  name: ReadOnlySpan<T>
  nameWithType: ReadOnlySpan<T>
  fullName: System.ReadOnlySpan<T>
  nameWithType.vb: ReadOnlySpan(Of T)
  fullName.vb: System.ReadOnlySpan(Of T)
  name.vb: ReadOnlySpan(Of T)
  spec.csharp:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.StringComparison
  commentId: T:System.StringComparison
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.stringcomparison
  name: StringComparison
  nameWithType: StringComparison
  fullName: System.StringComparison
- uid: System.Memory{System.Char}
  commentId: T:System.Memory{System.Char}
  parent: System
  definition: System.Memory`1
  href: https://learn.microsoft.com/dotnet/api/system.memory-1
  name: Memory<char>
  nameWithType: Memory<char>
  fullName: System.Memory<char>
  nameWithType.vb: Memory(Of Char)
  fullName.vb: System.Memory(Of Char)
  name.vb: Memory(Of Char)
  spec.csharp:
  - uid: System.Memory`1
    name: Memory
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.memory-1
  - name: <
  - uid: System.Char
    name: char
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.char
  - name: '>'
  spec.vb:
  - uid: System.Memory`1
    name: Memory
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.memory-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Char
    name: Char
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.char
  - name: )
- uid: System.ReadOnlyMemory{System.Char}
  commentId: T:System.ReadOnlyMemory{System.Char}
  parent: System
  definition: System.ReadOnlyMemory`1
  href: https://learn.microsoft.com/dotnet/api/system.readonlymemory-1
  name: ReadOnlyMemory<char>
  nameWithType: ReadOnlyMemory<char>
  fullName: System.ReadOnlyMemory<char>
  nameWithType.vb: ReadOnlyMemory(Of Char)
  fullName.vb: System.ReadOnlyMemory(Of Char)
  name.vb: ReadOnlyMemory(Of Char)
  spec.csharp:
  - uid: System.ReadOnlyMemory`1
    name: ReadOnlyMemory
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlymemory-1
  - name: <
  - uid: System.Char
    name: char
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.char
  - name: '>'
  spec.vb:
  - uid: System.ReadOnlyMemory`1
    name: ReadOnlyMemory
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlymemory-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Char
    name: Char
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.char
  - name: )
- uid: System.Span{System.Char}
  commentId: T:System.Span{System.Char}
  parent: System
  definition: System.Span`1
  href: https://learn.microsoft.com/dotnet/api/system.span-1
  name: Span<char>
  nameWithType: Span<char>
  fullName: System.Span<char>
  nameWithType.vb: Span(Of Char)
  fullName.vb: System.Span(Of Char)
  name.vb: Span(Of Char)
  spec.csharp:
  - uid: System.Span`1
    name: Span
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.span-1
  - name: <
  - uid: System.Char
    name: char
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.char
  - name: '>'
  spec.vb:
  - uid: System.Span`1
    name: Span
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.span-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Char
    name: Char
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.char
  - name: )
- uid: System.ReadOnlySpan{System.Char}
  commentId: T:System.ReadOnlySpan{System.Char}
  parent: System
  definition: System.ReadOnlySpan`1
  href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  name: ReadOnlySpan<char>
  nameWithType: ReadOnlySpan<char>
  fullName: System.ReadOnlySpan<char>
  nameWithType.vb: ReadOnlySpan(Of Char)
  fullName.vb: System.ReadOnlySpan(Of Char)
  name.vb: ReadOnlySpan(Of Char)
  spec.csharp:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  - name: <
  - uid: System.Char
    name: char
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.char
  - name: '>'
  spec.vb:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Char
    name: Char
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.char
  - name: )
- uid: v3.1.0.1:Xunit.Sdk.DoesNotMatchException
  commentId: T:Xunit.Sdk.DoesNotMatchException
  parent: v3.1.0.1:Xunit.Sdk
  href: Xunit.Sdk.DoesNotMatchException.html
  name: DoesNotMatchException
  nameWithType: DoesNotMatchException
  fullName: Xunit.Sdk.DoesNotMatchException
- uid: v3.1.0.1:Xunit.Assert.DoesNotMatch*
  commentId: Overload:Xunit.Assert.DoesNotMatch
  href: Xunit.Assert.DoesNotMatch.html#Xunit_Assert_DoesNotMatch_System_String_System_String_
  name: DoesNotMatch
  nameWithType: Assert.DoesNotMatch
  fullName: Xunit.Assert.DoesNotMatch
- uid: System.Text.RegularExpressions.Regex
  commentId: T:System.Text.RegularExpressions.Regex
  parent: System.Text.RegularExpressions
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.text.regularexpressions.regex
  name: Regex
  nameWithType: Regex
  fullName: System.Text.RegularExpressions.Regex
- uid: System.Text.RegularExpressions
  commentId: N:System.Text.RegularExpressions
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Text.RegularExpressions
  nameWithType: System.Text.RegularExpressions
  fullName: System.Text.RegularExpressions
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Text
    name: Text
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.text
  - name: .
  - uid: System.Text.RegularExpressions
    name: RegularExpressions
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.text.regularexpressions
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Text
    name: Text
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.text
  - name: .
  - uid: System.Text.RegularExpressions
    name: RegularExpressions
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.text.regularexpressions
- uid: v3.1.0.1:Xunit.Assert.EndsWith*
  commentId: Overload:Xunit.Assert.EndsWith
  href: Xunit.Assert.EndsWith.html#Xunit_Assert_EndsWith_System_String_System_String_
  name: EndsWith
  nameWithType: Assert.EndsWith
  fullName: Xunit.Assert.EndsWith
- uid: v3.1.0.1:Xunit.Sdk.EndsWithException
  commentId: T:Xunit.Sdk.EndsWithException
  parent: v3.1.0.1:Xunit.Sdk
  href: Xunit.Sdk.EndsWithException.html
  name: EndsWithException
  nameWithType: EndsWithException
  fullName: Xunit.Sdk.EndsWithException
- uid: v3.1.0.1:Xunit.Sdk.MatchesException
  commentId: T:Xunit.Sdk.MatchesException
  parent: v3.1.0.1:Xunit.Sdk
  href: Xunit.Sdk.MatchesException.html
  name: MatchesException
  nameWithType: MatchesException
  fullName: Xunit.Sdk.MatchesException
- uid: v3.1.0.1:Xunit.Assert.Matches*
  commentId: Overload:Xunit.Assert.Matches
  href: Xunit.Assert.Matches.html#Xunit_Assert_Matches_System_String_System_String_
  name: Matches
  nameWithType: Assert.Matches
  fullName: Xunit.Assert.Matches
- uid: v3.1.0.1:Xunit.Assert.StartsWith*
  commentId: Overload:Xunit.Assert.StartsWith
  href: Xunit.Assert.StartsWith.html#Xunit_Assert_StartsWith_System_String_System_String_
  name: StartsWith
  nameWithType: Assert.StartsWith
  fullName: Xunit.Assert.StartsWith
- uid: v3.1.0.1:Xunit.Sdk.StartsWithException
  commentId: T:Xunit.Sdk.StartsWithException
  parent: v3.1.0.1:Xunit.Sdk
  href: Xunit.Sdk.StartsWithException.html
  name: StartsWithException
  nameWithType: StartsWithException
  fullName: Xunit.Sdk.StartsWithException
- uid: v3.1.0.1:Xunit.Sdk.IsAssignableFromException
  commentId: T:Xunit.Sdk.IsAssignableFromException
  parent: v3.1.0.1:Xunit.Sdk
  href: Xunit.Sdk.IsAssignableFromException.html
  name: IsAssignableFromException
  nameWithType: IsAssignableFromException
  fullName: Xunit.Sdk.IsAssignableFromException
- uid: v3.1.0.1:Xunit.Assert.IsAssignableFrom*
  commentId: Overload:Xunit.Assert.IsAssignableFrom
  href: Xunit.Assert.IsAssignableFrom.html#Xunit_Assert_IsAssignableFrom__1_System_Object_
  name: IsAssignableFrom
  nameWithType: Assert.IsAssignableFrom
  fullName: Xunit.Assert.IsAssignableFrom
- uid: v3.1.0.1:Xunit.Sdk.IsNotAssignableFromException
  commentId: T:Xunit.Sdk.IsNotAssignableFromException
  parent: v3.1.0.1:Xunit.Sdk
  href: Xunit.Sdk.IsNotAssignableFromException.html
  name: IsNotAssignableFromException
  nameWithType: IsNotAssignableFromException
  fullName: Xunit.Sdk.IsNotAssignableFromException
- uid: v3.1.0.1:Xunit.Assert.IsNotAssignableFrom*
  commentId: Overload:Xunit.Assert.IsNotAssignableFrom
  href: Xunit.Assert.IsNotAssignableFrom.html#Xunit_Assert_IsNotAssignableFrom__1_System_Object_
  name: IsNotAssignableFrom
  nameWithType: Assert.IsNotAssignableFrom
  fullName: Xunit.Assert.IsNotAssignableFrom
- uid: v3.1.0.1:Xunit.Sdk.IsNotTypeException
  commentId: T:Xunit.Sdk.IsNotTypeException
  parent: v3.1.0.1:Xunit.Sdk
  href: Xunit.Sdk.IsNotTypeException.html
  name: IsNotTypeException
  nameWithType: IsNotTypeException
  fullName: Xunit.Sdk.IsNotTypeException
- uid: v3.1.0.1:Xunit.Assert.IsNotType*
  commentId: Overload:Xunit.Assert.IsNotType
  href: Xunit.Assert.IsNotType.html#Xunit_Assert_IsNotType__1_System_Object_
  name: IsNotType
  nameWithType: Assert.IsNotType
  fullName: Xunit.Assert.IsNotType
- uid: v3.1.0.1:Xunit.Sdk.IsTypeException
  commentId: T:Xunit.Sdk.IsTypeException
  parent: v3.1.0.1:Xunit.Sdk
  href: Xunit.Sdk.IsTypeException.html
  name: IsTypeException
  nameWithType: IsTypeException
  fullName: Xunit.Sdk.IsTypeException
- uid: v3.1.0.1:Xunit.Assert.IsType*
  commentId: Overload:Xunit.Assert.IsType
  href: Xunit.Assert.IsType.html#Xunit_Assert_IsType__1_System_Object_
  name: IsType
  nameWithType: Assert.IsType
  fullName: Xunit.Assert.IsType
memberLayout: SeparatePages
