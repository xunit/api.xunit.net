### YamlMime:ManagedReference
items:
- uid: v3.2.0.2:Xunit.v3.FixtureMappingManager
  commentId: T:Xunit.v3.FixtureMappingManager
  id: FixtureMappingManager
  parent: v3.2.0.2:Xunit.v3
  children:
  - v3.2.0.2:Xunit.v3.FixtureMappingManager.#ctor(System.String,System.Object[])
  - v3.2.0.2:Xunit.v3.FixtureMappingManager.#ctor(System.String,Xunit.v3.FixtureMappingManager)
  - v3.2.0.2:Xunit.v3.FixtureMappingManager.DisposeAsync
  - v3.2.0.2:Xunit.v3.FixtureMappingManager.GetFixture(System.Type)
  - v3.2.0.2:Xunit.v3.FixtureMappingManager.GlobalFixtureTypes
  - v3.2.0.2:Xunit.v3.FixtureMappingManager.InitializeAsync(System.Collections.Generic.IReadOnlyCollection{System.Type})
  - v3.2.0.2:Xunit.v3.FixtureMappingManager.InitializeAsync(System.Type[])
  - v3.2.0.2:Xunit.v3.FixtureMappingManager.LocalFixtureTypes
  langs:
  - csharp
  - vb
  name: FixtureMappingManager
  nameWithType: FixtureMappingManager
  fullName: Xunit.v3.FixtureMappingManager
  type: Class
  source:
    remote:
      path: src/xunit.v3.core/Utility/FixtureMappingManager.cs
      branch: ccd27e9792077b9ee82f40320c6f414e6a0338de
      repo: https://github.com/xunit/xunit
    id: FixtureMappingManager
    path: ../src/xunit.v3.core/Utility/FixtureMappingManager.cs
    startLine: 20
  assemblies:
  - xunit.v3.core
  namespace: Xunit.v3
  summary: Maps fixture objects, including support for generic collection fixtures.
  remarks: Initializes a new instance of the <xref href="v3.2.0.2:Xunit.v3.FixtureMappingManager" data-throw-if-not-resolved="false"></xref> class.
  example: []
  syntax:
    content: 'public class FixtureMappingManager : IAsyncDisposable'
    content.vb: Public Class FixtureMappingManager Implements IAsyncDisposable
  inheritance:
  - System.Object
  implements:
  - System.IAsyncDisposable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: v3.2.0.2:Xunit.v3.FixtureMappingManager.#ctor(System.String,Xunit.v3.FixtureMappingManager)
  commentId: M:Xunit.v3.FixtureMappingManager.#ctor(System.String,Xunit.v3.FixtureMappingManager)
  id: '#ctor(System.String,Xunit.v3.FixtureMappingManager)'
  parent: v3.2.0.2:Xunit.v3.FixtureMappingManager
  langs:
  - csharp
  - vb
  name: FixtureMappingManager(string, FixtureMappingManager?)
  nameWithType: FixtureMappingManager.FixtureMappingManager(string, FixtureMappingManager?)
  fullName: Xunit.v3.FixtureMappingManager.FixtureMappingManager(string, Xunit.v3.FixtureMappingManager?)
  type: Constructor
  source:
    remote:
      path: src/xunit.v3.core/Utility/FixtureMappingManager.cs
      branch: ccd27e9792077b9ee82f40320c6f414e6a0338de
      repo: https://github.com/xunit/xunit
    id: .ctor
    path: ../src/xunit.v3.core/Utility/FixtureMappingManager.cs
    startLine: 20
  assemblies:
  - xunit.v3.core
  namespace: Xunit.v3
  summary: Maps fixture objects, including support for generic collection fixtures.
  remarks: Initializes a new instance of the <xref href="v3.2.0.2:Xunit.v3.FixtureMappingManager" data-throw-if-not-resolved="false"></xref> class.
  example: []
  syntax:
    content: public FixtureMappingManager(string fixtureCategory, FixtureMappingManager? parentMappingManager = null)
    parameters:
    - id: fixtureCategory
      type: System.String
      description: The category of fixture (i.e., "Assembly"); used in exception messages
    - id: parentMappingManager
      type: Xunit.v3.FixtureMappingManager
      description: The parent mapping manager (used to resolve constructor arguments)
    content.vb: Public Sub New(fixtureCategory As String, parentMappingManager As FixtureMappingManager = Nothing)
  overload: v3.2.0.2:Xunit.v3.FixtureMappingManager.#ctor*
  nameWithType.vb: FixtureMappingManager.New(String, FixtureMappingManager)
  fullName.vb: Xunit.v3.FixtureMappingManager.New(String, Xunit.v3.FixtureMappingManager)
  name.vb: New(String, FixtureMappingManager)
- uid: v3.2.0.2:Xunit.v3.FixtureMappingManager.#ctor(System.String,System.Object[])
  commentId: M:Xunit.v3.FixtureMappingManager.#ctor(System.String,System.Object[])
  id: '#ctor(System.String,System.Object[])'
  parent: v3.2.0.2:Xunit.v3.FixtureMappingManager
  langs:
  - csharp
  - vb
  name: FixtureMappingManager(string, object[])
  nameWithType: FixtureMappingManager.FixtureMappingManager(string, object[])
  fullName: Xunit.v3.FixtureMappingManager.FixtureMappingManager(string, object[])
  type: Constructor
  source:
    remote:
      path: src/xunit.v3.core/Utility/FixtureMappingManager.cs
      branch: ccd27e9792077b9ee82f40320c6f414e6a0338de
      repo: https://github.com/xunit/xunit
    id: .ctor
    path: ../src/xunit.v3.core/Utility/FixtureMappingManager.cs
    startLine: 37
  assemblies:
  - xunit.v3.core
  namespace: Xunit.v3
  summary: FOR TESTING PURPOSES ONLY.
  example: []
  syntax:
    content: protected FixtureMappingManager(string fixtureCategory, object[] cachedFixtureValues)
    parameters:
    - id: fixtureCategory
      type: System.String
    - id: cachedFixtureValues
      type: System.Object[]
    content.vb: Protected Sub New(fixtureCategory As String, cachedFixtureValues As Object())
  overload: v3.2.0.2:Xunit.v3.FixtureMappingManager.#ctor*
  nameWithType.vb: FixtureMappingManager.New(String, Object())
  fullName.vb: Xunit.v3.FixtureMappingManager.New(String, Object())
  name.vb: New(String, Object())
- uid: v3.2.0.2:Xunit.v3.FixtureMappingManager.LocalFixtureTypes
  commentId: P:Xunit.v3.FixtureMappingManager.LocalFixtureTypes
  id: LocalFixtureTypes
  parent: v3.2.0.2:Xunit.v3.FixtureMappingManager
  langs:
  - csharp
  - vb
  name: LocalFixtureTypes
  nameWithType: FixtureMappingManager.LocalFixtureTypes
  fullName: Xunit.v3.FixtureMappingManager.LocalFixtureTypes
  type: Property
  source:
    remote:
      path: src/xunit.v3.core/Utility/FixtureMappingManager.cs
      branch: ccd27e9792077b9ee82f40320c6f414e6a0338de
      repo: https://github.com/xunit/xunit
    id: LocalFixtureTypes
    path: ../src/xunit.v3.core/Utility/FixtureMappingManager.cs
    startLine: 52
  assemblies:
  - xunit.v3.core
  namespace: Xunit.v3
  summary: >-
    Returns a list of the known fixture types at this category level. This will not include fixture

    types known from parent categories and above.
  example: []
  syntax:
    content: public IReadOnlyCollection<Type> LocalFixtureTypes { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IReadOnlyCollection{System.Type}
    content.vb: Public ReadOnly Property LocalFixtureTypes As IReadOnlyCollection(Of Type)
  overload: v3.2.0.2:Xunit.v3.FixtureMappingManager.LocalFixtureTypes*
- uid: v3.2.0.2:Xunit.v3.FixtureMappingManager.GlobalFixtureTypes
  commentId: P:Xunit.v3.FixtureMappingManager.GlobalFixtureTypes
  id: GlobalFixtureTypes
  parent: v3.2.0.2:Xunit.v3.FixtureMappingManager
  langs:
  - csharp
  - vb
  name: GlobalFixtureTypes
  nameWithType: FixtureMappingManager.GlobalFixtureTypes
  fullName: Xunit.v3.FixtureMappingManager.GlobalFixtureTypes
  type: Property
  source:
    remote:
      path: src/xunit.v3.core/Utility/FixtureMappingManager.cs
      branch: ccd27e9792077b9ee82f40320c6f414e6a0338de
      repo: https://github.com/xunit/xunit
    id: GlobalFixtureTypes
    path: ../src/xunit.v3.core/Utility/FixtureMappingManager.cs
    startLine: 57
  assemblies:
  - xunit.v3.core
  namespace: Xunit.v3
  summary: Returns a list of all known fixture types at all category levels.
  example: []
  syntax:
    content: public IReadOnlyCollection<Type> GlobalFixtureTypes { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IReadOnlyCollection{System.Type}
    content.vb: Public ReadOnly Property GlobalFixtureTypes As IReadOnlyCollection(Of Type)
  overload: v3.2.0.2:Xunit.v3.FixtureMappingManager.GlobalFixtureTypes*
- uid: v3.2.0.2:Xunit.v3.FixtureMappingManager.DisposeAsync
  commentId: M:Xunit.v3.FixtureMappingManager.DisposeAsync
  id: DisposeAsync
  parent: v3.2.0.2:Xunit.v3.FixtureMappingManager
  langs:
  - csharp
  - vb
  name: DisposeAsync()
  nameWithType: FixtureMappingManager.DisposeAsync()
  fullName: Xunit.v3.FixtureMappingManager.DisposeAsync()
  type: Method
  source:
    remote:
      path: src/xunit.v3.core/Utility/FixtureMappingManager.cs
      branch: ccd27e9792077b9ee82f40320c6f414e6a0338de
      repo: https://github.com/xunit/xunit
    id: DisposeAsync
    path: ../src/xunit.v3.core/Utility/FixtureMappingManager.cs
    startLine: 60
  assemblies:
  - xunit.v3.core
  namespace: Xunit.v3
  summary: >-
    Performs application-defined tasks associated with freeing, releasing, or

    resetting unmanaged resources asynchronously.
  example: []
  syntax:
    content: public ValueTask DisposeAsync()
    return:
      type: System.Threading.Tasks.ValueTask
    content.vb: Public Function DisposeAsync() As ValueTask
  overload: v3.2.0.2:Xunit.v3.FixtureMappingManager.DisposeAsync*
  implements:
  - System.IAsyncDisposable.DisposeAsync
- uid: v3.2.0.2:Xunit.v3.FixtureMappingManager.GetFixture(System.Type)
  commentId: M:Xunit.v3.FixtureMappingManager.GetFixture(System.Type)
  id: GetFixture(System.Type)
  parent: v3.2.0.2:Xunit.v3.FixtureMappingManager
  langs:
  - csharp
  - vb
  name: GetFixture(Type)
  nameWithType: FixtureMappingManager.GetFixture(Type)
  fullName: Xunit.v3.FixtureMappingManager.GetFixture(System.Type)
  type: Method
  source:
    remote:
      path: src/xunit.v3.core/Utility/FixtureMappingManager.cs
      branch: ccd27e9792077b9ee82f40320c6f414e6a0338de
      repo: https://github.com/xunit/xunit
    id: GetFixture
    path: ../src/xunit.v3.core/Utility/FixtureMappingManager.cs
    startLine: 106
  assemblies:
  - xunit.v3.core
  namespace: Xunit.v3
  summary: Get a value for the given fixture type. If the fixture type is unknown, then returns <code>null</code>.
  example: []
  syntax:
    content: public ValueTask<object?> GetFixture(Type fixtureType)
    parameters:
    - id: fixtureType
      type: System.Type
      description: The type of the fixture
    return:
      type: System.Threading.Tasks.ValueTask{System.Object}
      description: Returns the value if the fixture type is found, or <code>null</code> if it's not.
    content.vb: Public Function GetFixture(fixtureType As Type) As ValueTask(Of Object)
  overload: v3.2.0.2:Xunit.v3.FixtureMappingManager.GetFixture*
- uid: v3.2.0.2:Xunit.v3.FixtureMappingManager.InitializeAsync(System.Type[])
  commentId: M:Xunit.v3.FixtureMappingManager.InitializeAsync(System.Type[])
  id: InitializeAsync(System.Type[])
  parent: v3.2.0.2:Xunit.v3.FixtureMappingManager
  langs:
  - csharp
  - vb
  name: InitializeAsync(params Type[])
  nameWithType: FixtureMappingManager.InitializeAsync(params Type[])
  fullName: Xunit.v3.FixtureMappingManager.InitializeAsync(params System.Type[])
  type: Method
  source:
    remote:
      path: src/xunit.v3.core/Utility/FixtureMappingManager.cs
      branch: ccd27e9792077b9ee82f40320c6f414e6a0338de
      repo: https://github.com/xunit/xunit
    id: InitializeAsync
    path: ../src/xunit.v3.core/Utility/FixtureMappingManager.cs
    startLine: 199
  assemblies:
  - xunit.v3.core
  namespace: Xunit.v3
  example: []
  syntax:
    content: public ValueTask InitializeAsync(params Type[] fixtureTypes)
    parameters:
    - id: fixtureTypes
      type: System.Type[]
    return:
      type: System.Threading.Tasks.ValueTask
    content.vb: Public Function InitializeAsync(ParamArray fixtureTypes As Type()) As ValueTask
  overload: v3.2.0.2:Xunit.v3.FixtureMappingManager.InitializeAsync*
  nameWithType.vb: FixtureMappingManager.InitializeAsync(ParamArray Type())
  fullName.vb: Xunit.v3.FixtureMappingManager.InitializeAsync(ParamArray System.Type())
  name.vb: InitializeAsync(ParamArray Type())
- uid: v3.2.0.2:Xunit.v3.FixtureMappingManager.InitializeAsync(System.Collections.Generic.IReadOnlyCollection{System.Type})
  commentId: M:Xunit.v3.FixtureMappingManager.InitializeAsync(System.Collections.Generic.IReadOnlyCollection{System.Type})
  id: InitializeAsync(System.Collections.Generic.IReadOnlyCollection{System.Type})
  parent: v3.2.0.2:Xunit.v3.FixtureMappingManager
  langs:
  - csharp
  - vb
  name: InitializeAsync(IReadOnlyCollection<Type>)
  nameWithType: FixtureMappingManager.InitializeAsync(IReadOnlyCollection<Type>)
  fullName: Xunit.v3.FixtureMappingManager.InitializeAsync(System.Collections.Generic.IReadOnlyCollection<System.Type>)
  type: Method
  source:
    remote:
      path: src/xunit.v3.core/Utility/FixtureMappingManager.cs
      branch: ccd27e9792077b9ee82f40320c6f414e6a0338de
      repo: https://github.com/xunit/xunit
    id: InitializeAsync
    path: ../src/xunit.v3.core/Utility/FixtureMappingManager.cs
    startLine: 203
  assemblies:
  - xunit.v3.core
  namespace: Xunit.v3
  example: []
  syntax:
    content: public ValueTask InitializeAsync(IReadOnlyCollection<Type> fixtureTypes)
    parameters:
    - id: fixtureTypes
      type: System.Collections.Generic.IReadOnlyCollection{System.Type}
    return:
      type: System.Threading.Tasks.ValueTask
    content.vb: Public Function InitializeAsync(fixtureTypes As IReadOnlyCollection(Of Type)) As ValueTask
  overload: v3.2.0.2:Xunit.v3.FixtureMappingManager.InitializeAsync*
  nameWithType.vb: FixtureMappingManager.InitializeAsync(IReadOnlyCollection(Of Type))
  fullName.vb: Xunit.v3.FixtureMappingManager.InitializeAsync(System.Collections.Generic.IReadOnlyCollection(Of System.Type))
  name.vb: InitializeAsync(IReadOnlyCollection(Of Type))
references:
- uid: v3.2.0.2:Xunit.v3.FixtureMappingManager
  commentId: T:Xunit.v3.FixtureMappingManager
  parent: v3.2.0.2:Xunit.v3
  href: Xunit.v3.FixtureMappingManager.html
  name: FixtureMappingManager
  nameWithType: FixtureMappingManager
  fullName: Xunit.v3.FixtureMappingManager
- uid: v3.2.0.2:Xunit.v3
  commentId: N:Xunit.v3
  href: Xunit.html
  name: Xunit.v3
  nameWithType: Xunit.v3
  fullName: Xunit.v3
  spec.csharp:
  - uid: v3.2.0.2:Xunit
    name: Xunit
    href: Xunit.html
  - name: .
  - uid: v3.2.0.2:Xunit.v3
    name: v3
    href: Xunit.v3.html
  spec.vb:
  - uid: v3.2.0.2:Xunit
    name: Xunit
    href: Xunit.html
  - name: .
  - uid: v3.2.0.2:Xunit.v3
    name: v3
    href: Xunit.v3.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.IAsyncDisposable
  commentId: T:System.IAsyncDisposable
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.iasyncdisposable
  name: IAsyncDisposable
  nameWithType: IAsyncDisposable
  fullName: System.IAsyncDisposable
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: v3.2.0.2:Xunit.v3.FixtureMappingManager.#ctor*
  commentId: Overload:Xunit.v3.FixtureMappingManager.#ctor
  href: Xunit.v3.FixtureMappingManager.-ctor.html#Xunit_v3_FixtureMappingManager__ctor_System_String_Xunit_v3_FixtureMappingManager_
  name: FixtureMappingManager
  nameWithType: FixtureMappingManager.FixtureMappingManager
  fullName: Xunit.v3.FixtureMappingManager.FixtureMappingManager
  nameWithType.vb: FixtureMappingManager.New
  fullName.vb: Xunit.v3.FixtureMappingManager.New
  name.vb: New
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: System.Object[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object[]
  nameWithType: object[]
  fullName: object[]
  nameWithType.vb: Object()
  fullName.vb: Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: (
  - name: )
- uid: v3.2.0.2:Xunit.v3.FixtureMappingManager.LocalFixtureTypes*
  commentId: Overload:Xunit.v3.FixtureMappingManager.LocalFixtureTypes
  href: Xunit.v3.FixtureMappingManager.LocalFixtureTypes.html#Xunit_v3_FixtureMappingManager_LocalFixtureTypes
  name: LocalFixtureTypes
  nameWithType: FixtureMappingManager.LocalFixtureTypes
  fullName: Xunit.v3.FixtureMappingManager.LocalFixtureTypes
- uid: System.Collections.Generic.IReadOnlyCollection{System.Type}
  commentId: T:System.Collections.Generic.IReadOnlyCollection{System.Type}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlycollection-1
  name: IReadOnlyCollection<Type>
  nameWithType: IReadOnlyCollection<Type>
  fullName: System.Collections.Generic.IReadOnlyCollection<System.Type>
  nameWithType.vb: IReadOnlyCollection(Of Type)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of System.Type)
  name.vb: IReadOnlyCollection(Of Type)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlycollection-1
  - name: <
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlycollection-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: )
- uid: System.Collections.Generic.IReadOnlyCollection`1
  commentId: T:System.Collections.Generic.IReadOnlyCollection`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlycollection-1
  name: IReadOnlyCollection<T>
  nameWithType: IReadOnlyCollection<T>
  fullName: System.Collections.Generic.IReadOnlyCollection<T>
  nameWithType.vb: IReadOnlyCollection(Of T)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of T)
  name.vb: IReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlycollection-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlycollection-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: v3.2.0.2:Xunit.v3.FixtureMappingManager.GlobalFixtureTypes*
  commentId: Overload:Xunit.v3.FixtureMappingManager.GlobalFixtureTypes
  href: Xunit.v3.FixtureMappingManager.GlobalFixtureTypes.html#Xunit_v3_FixtureMappingManager_GlobalFixtureTypes
  name: GlobalFixtureTypes
  nameWithType: FixtureMappingManager.GlobalFixtureTypes
  fullName: Xunit.v3.FixtureMappingManager.GlobalFixtureTypes
- uid: v3.2.0.2:Xunit.v3.FixtureMappingManager.DisposeAsync*
  commentId: Overload:Xunit.v3.FixtureMappingManager.DisposeAsync
  href: Xunit.v3.FixtureMappingManager.DisposeAsync.html#Xunit_v3_FixtureMappingManager_DisposeAsync
  name: DisposeAsync
  nameWithType: FixtureMappingManager.DisposeAsync
  fullName: Xunit.v3.FixtureMappingManager.DisposeAsync
- uid: System.IAsyncDisposable.DisposeAsync
  commentId: M:System.IAsyncDisposable.DisposeAsync
  parent: System.IAsyncDisposable
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.iasyncdisposable.disposeasync
  name: DisposeAsync()
  nameWithType: IAsyncDisposable.DisposeAsync()
  fullName: System.IAsyncDisposable.DisposeAsync()
  spec.csharp:
  - uid: System.IAsyncDisposable.DisposeAsync
    name: DisposeAsync
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iasyncdisposable.disposeasync
  - name: (
  - name: )
  spec.vb:
  - uid: System.IAsyncDisposable.DisposeAsync
    name: DisposeAsync
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iasyncdisposable.disposeasync
  - name: (
  - name: )
- uid: System.Threading.Tasks.ValueTask
  commentId: T:System.Threading.Tasks.ValueTask
  parent: System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.valuetask
  name: ValueTask
  nameWithType: ValueTask
  fullName: System.Threading.Tasks.ValueTask
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
- uid: v3.2.0.2:Xunit.v3.FixtureMappingManager.GetFixture*
  commentId: Overload:Xunit.v3.FixtureMappingManager.GetFixture
  href: Xunit.v3.FixtureMappingManager.GetFixture.html#Xunit_v3_FixtureMappingManager_GetFixture_System_Type_
  name: GetFixture
  nameWithType: FixtureMappingManager.GetFixture
  fullName: Xunit.v3.FixtureMappingManager.GetFixture
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.type
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Threading.Tasks.ValueTask{System.Object}
  commentId: T:System.Threading.Tasks.ValueTask{System.Object}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.ValueTask`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.valuetask-1
  name: ValueTask<object>
  nameWithType: ValueTask<object>
  fullName: System.Threading.Tasks.ValueTask<object>
  nameWithType.vb: ValueTask(Of Object)
  fullName.vb: System.Threading.Tasks.ValueTask(Of Object)
  name.vb: ValueTask(Of Object)
  spec.csharp:
  - uid: System.Threading.Tasks.ValueTask`1
    name: ValueTask
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.valuetask-1
  - name: <
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.ValueTask`1
    name: ValueTask
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.valuetask-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Threading.Tasks.ValueTask`1
  commentId: T:System.Threading.Tasks.ValueTask`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.valuetask-1
  name: ValueTask<TResult>
  nameWithType: ValueTask<TResult>
  fullName: System.Threading.Tasks.ValueTask<TResult>
  nameWithType.vb: ValueTask(Of TResult)
  fullName.vb: System.Threading.Tasks.ValueTask(Of TResult)
  name.vb: ValueTask(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.ValueTask`1
    name: ValueTask
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.valuetask-1
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.ValueTask`1
    name: ValueTask
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.valuetask-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: v3.2.0.2:Xunit.v3.FixtureMappingManager.InitializeAsync*
  commentId: Overload:Xunit.v3.FixtureMappingManager.InitializeAsync
  href: Xunit.v3.FixtureMappingManager.InitializeAsync.html#Xunit_v3_FixtureMappingManager_InitializeAsync_System_Type___
  name: InitializeAsync
  nameWithType: FixtureMappingManager.InitializeAsync
  fullName: Xunit.v3.FixtureMappingManager.InitializeAsync
- uid: System.Type[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.type
  name: Type[]
  nameWithType: Type[]
  fullName: System.Type[]
  nameWithType.vb: Type()
  fullName.vb: System.Type()
  name.vb: Type()
  spec.csharp:
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: (
  - name: )
memberLayout: SeparatePages
